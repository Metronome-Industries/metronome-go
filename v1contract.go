// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package metronome

import (
	"context"
	"net/http"
	"net/url"
	"reflect"
	"time"

	"github.com/Metronome-Industries/metronome-go/internal/apijson"
	"github.com/Metronome-Industries/metronome-go/internal/apiquery"
	"github.com/Metronome-Industries/metronome-go/internal/param"
	"github.com/Metronome-Industries/metronome-go/internal/requestconfig"
	"github.com/Metronome-Industries/metronome-go/option"
	"github.com/tidwall/gjson"
)

// V1ContractService contains methods and other services that help with interacting
// with the metronome API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewV1ContractService] method instead.
type V1ContractService struct {
	Options        []option.RequestOption
	Products       *V1ContractProductService
	RateCards      *V1ContractRateCardService
	NamedSchedules *V1ContractNamedScheduleService
}

// NewV1ContractService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewV1ContractService(opts ...option.RequestOption) (r *V1ContractService) {
	r = &V1ContractService{}
	r.Options = opts
	r.Products = NewV1ContractProductService(opts...)
	r.RateCards = NewV1ContractRateCardService(opts...)
	r.NamedSchedules = NewV1ContractNamedScheduleService(opts...)
	return
}

// Create a new contract
func (r *V1ContractService) New(ctx context.Context, body V1ContractNewParams, opts ...option.RequestOption) (res *V1ContractNewResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/create"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// This is the v1 endpoint to get a contract. New clients should implement using
// the v2 endpoint.
func (r *V1ContractService) Get(ctx context.Context, body V1ContractGetParams, opts ...option.RequestOption) (res *V1ContractGetResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/get"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// This is the v1 endpoint to list all contracts for a customer. New clients should
// implement using the v2 endpoint.
func (r *V1ContractService) List(ctx context.Context, body V1ContractListParams, opts ...option.RequestOption) (res *V1ContractListResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/list"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Add a manual balance entry
func (r *V1ContractService) AddManualBalanceEntry(ctx context.Context, body V1ContractAddManualBalanceEntryParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "v1/contracts/addManualBalanceLedgerEntry"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

// Amendments will be replaced by Contract editing. New clients should implement
// using the editContract endpoint. Read more about the migration to contract
// editing [here](https://docs.metronome.com/migrate-amendments-to-edits/) and
// reach out to your Metronome representative for more details. Once contract
// editing is enabled, access to this endpoint will be removed.
func (r *V1ContractService) Amend(ctx context.Context, body V1ContractAmendParams, opts ...option.RequestOption) (res *V1ContractAmendResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/amend"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Archive a contract
func (r *V1ContractService) Archive(ctx context.Context, body V1ContractArchiveParams, opts ...option.RequestOption) (res *V1ContractArchiveResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/archive"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Creates historical usage invoices for a contract
func (r *V1ContractService) NewHistoricalInvoices(ctx context.Context, body V1ContractNewHistoricalInvoicesParams, opts ...option.RequestOption) (res *V1ContractNewHistoricalInvoicesResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/createHistoricalInvoices"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// List balances (commits and credits).
func (r *V1ContractService) ListBalances(ctx context.Context, body V1ContractListBalancesParams, opts ...option.RequestOption) (res *V1ContractListBalancesResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/customerBalances/list"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Get the rate schedule for the rate card on a given contract.
func (r *V1ContractService) GetRateSchedule(ctx context.Context, params V1ContractGetRateScheduleParams, opts ...option.RequestOption) (res *V1ContractGetRateScheduleResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/getContractRateSchedule"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, params, &res, opts...)
	return
}

// Fetch the quantity and price for a subscription over time. End-point does not
// return future scheduled changes.
func (r *V1ContractService) GetSubscriptionQuantityHistory(ctx context.Context, body V1ContractGetSubscriptionQuantityHistoryParams, opts ...option.RequestOption) (res *V1ContractGetSubscriptionQuantityHistoryResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/getSubscriptionQuantityHistory"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Create a new scheduled invoice for Professional Services terms on a contract.
// This endpoint's availability is dependent on your client's configuration.
func (r *V1ContractService) ScheduleProServicesInvoice(ctx context.Context, body V1ContractScheduleProServicesInvoiceParams, opts ...option.RequestOption) (res *V1ContractScheduleProServicesInvoiceResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/scheduleProServicesInvoice"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

// Set usage filter for a contract
func (r *V1ContractService) SetUsageFilter(ctx context.Context, body V1ContractSetUsageFilterParams, opts ...option.RequestOption) (err error) {
	opts = append(r.Options[:], opts...)
	opts = append([]option.RequestOption{option.WithHeader("Accept", "")}, opts...)
	path := "v1/contracts/setUsageFilter"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, nil, opts...)
	return
}

// Update the end date of a contract
func (r *V1ContractService) UpdateEndDate(ctx context.Context, body V1ContractUpdateEndDateParams, opts ...option.RequestOption) (res *V1ContractUpdateEndDateResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/contracts/updateEndDate"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

type V1ContractNewResponse struct {
	Data V1ContractNewResponseData `json:"data,required"`
	JSON v1ContractNewResponseJSON `json:"-"`
}

// v1ContractNewResponseJSON contains the JSON metadata for the struct
// [V1ContractNewResponse]
type v1ContractNewResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewResponseData struct {
	ID   string                        `json:"id,required" format:"uuid"`
	JSON v1ContractNewResponseDataJSON `json:"-"`
}

// v1ContractNewResponseDataJSON contains the JSON metadata for the struct
// [V1ContractNewResponseData]
type v1ContractNewResponseDataJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponse struct {
	Data V1ContractGetResponseData `json:"data,required"`
	JSON v1ContractGetResponseJSON `json:"-"`
}

// v1ContractGetResponseJSON contains the JSON metadata for the struct
// [V1ContractGetResponse]
type v1ContractGetResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseData struct {
	ID         string                               `json:"id,required" format:"uuid"`
	Amendments []V1ContractGetResponseDataAmendment `json:"amendments,required"`
	Current    V1ContractGetResponseDataCurrent     `json:"current,required"`
	CustomerID string                               `json:"customer_id,required" format:"uuid"`
	Initial    V1ContractGetResponseDataInitial     `json:"initial,required"`
	// RFC 3339 timestamp indicating when the contract was archived. If not returned,
	// the contract is not archived.
	ArchivedAt   time.Time         `json:"archived_at" format:"date-time"`
	CustomFields map[string]string `json:"custom_fields"`
	// The billing provider configuration associated with a contract.
	CustomerBillingProviderConfiguration V1ContractGetResponseDataCustomerBillingProviderConfiguration `json:"customer_billing_provider_configuration"`
	PrepaidBalanceThresholdConfiguration V1ContractGetResponseDataPrepaidBalanceThresholdConfiguration `json:"prepaid_balance_threshold_configuration"`
	// Priority of the contract.
	Priority float64 `json:"priority"`
	// Determines which scheduled and commit charges to consolidate onto the Contract's
	// usage invoice. The charge's `timestamp` must match the usage invoice's
	// `ending_before` date for consolidation to occur. This field cannot be modified
	// after a Contract has been created. If this field is omitted, charges will appear
	// on a separate invoice from usage charges.
	ScheduledChargesOnUsageInvoices V1ContractGetResponseDataScheduledChargesOnUsageInvoices `json:"scheduled_charges_on_usage_invoices"`
	SpendThresholdConfiguration     V1ContractGetResponseDataSpendThresholdConfiguration     `json:"spend_threshold_configuration"`
	// List of subscriptions on the contract.
	Subscriptions []V1ContractGetResponseDataSubscription `json:"subscriptions"`
	// Prevents the creation of duplicates. If a request to create a record is made
	// with a previously used uniqueness key, a new record will not be created and the
	// request will fail with a 409 error.
	UniquenessKey string                        `json:"uniqueness_key"`
	JSON          v1ContractGetResponseDataJSON `json:"-"`
}

// v1ContractGetResponseDataJSON contains the JSON metadata for the struct
// [V1ContractGetResponseData]
type v1ContractGetResponseDataJSON struct {
	ID                                   apijson.Field
	Amendments                           apijson.Field
	Current                              apijson.Field
	CustomerID                           apijson.Field
	Initial                              apijson.Field
	ArchivedAt                           apijson.Field
	CustomFields                         apijson.Field
	CustomerBillingProviderConfiguration apijson.Field
	PrepaidBalanceThresholdConfiguration apijson.Field
	Priority                             apijson.Field
	ScheduledChargesOnUsageInvoices      apijson.Field
	SpendThresholdConfiguration          apijson.Field
	Subscriptions                        apijson.Field
	UniquenessKey                        apijson.Field
	raw                                  string
	ExtraFields                          map[string]apijson.Field
}

func (r *V1ContractGetResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendment struct {
	ID               string                                               `json:"id,required" format:"uuid"`
	Commits          []V1ContractGetResponseDataAmendmentsCommit          `json:"commits,required"`
	CreatedAt        time.Time                                            `json:"created_at,required" format:"date-time"`
	CreatedBy        string                                               `json:"created_by,required"`
	Overrides        []V1ContractGetResponseDataAmendmentsOverride        `json:"overrides,required"`
	ScheduledCharges []V1ContractGetResponseDataAmendmentsScheduledCharge `json:"scheduled_charges,required"`
	StartingAt       time.Time                                            `json:"starting_at,required" format:"date-time"`
	Credits          []V1ContractGetResponseDataAmendmentsCredit          `json:"credits"`
	// This field's availability is dependent on your client's configuration.
	Discounts []V1ContractGetResponseDataAmendmentsDiscount `json:"discounts"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []V1ContractGetResponseDataAmendmentsProfessionalService `json:"professional_services"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []V1ContractGetResponseDataAmendmentsResellerRoyalty `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string                                 `json:"salesforce_opportunity_id"`
	JSON                    v1ContractGetResponseDataAmendmentJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentJSON contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendment]
type v1ContractGetResponseDataAmendmentJSON struct {
	ID                      apijson.Field
	Commits                 apijson.Field
	CreatedAt               apijson.Field
	CreatedBy               apijson.Field
	Overrides               apijson.Field
	ScheduledCharges        apijson.Field
	StartingAt              apijson.Field
	Credits                 apijson.Field
	Discounts               apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	ProfessionalServices    apijson.Field
	ResellerRoyalties       apijson.Field
	SalesforceOpportunityID apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendment) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommit struct {
	ID      string                                            `json:"id,required" format:"uuid"`
	Product V1ContractGetResponseDataAmendmentsCommitsProduct `json:"product,required"`
	Type    V1ContractGetResponseDataAmendmentsCommitsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits purposed with
	// this commit.
	AccessSchedule V1ContractGetResponseDataAmendmentsCommitsAccessSchedule `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount                float64  `json:"amount"`
	ApplicableContractIDs []string `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                            `json:"balance"`
	Contract     V1ContractGetResponseDataAmendmentsCommitsContract `json:"contract"`
	CustomFields map[string]string                                  `json:"custom_fields"`
	Description  string                                             `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataAmendmentsCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The contract that this commit will be billed on.
	InvoiceContract V1ContractGetResponseDataAmendmentsCommitsInvoiceContract `json:"invoice_contract"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule V1ContractGetResponseDataAmendmentsCommitsInvoiceSchedule `json:"invoice_schedule"`
	// A list of ordered events that impact the balance of a commit. For example, an
	// invoice deduction or a rollover.
	Ledger []V1ContractGetResponseDataAmendmentsCommitsLedger `json:"ledger"`
	Name   string                                             `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority         float64                                                  `json:"priority"`
	RateType         V1ContractGetResponseDataAmendmentsCommitsRateType       `json:"rate_type"`
	RolledOverFrom   V1ContractGetResponseDataAmendmentsCommitsRolledOverFrom `json:"rolled_over_from"`
	RolloverFraction float64                                                  `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataAmendmentsCommitsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                        `json:"uniqueness_key"`
	JSON          v1ContractGetResponseDataAmendmentsCommitJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataAmendmentsCommit]
type v1ContractGetResponseDataAmendmentsCommitJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsProduct struct {
	ID   string                                                `json:"id,required" format:"uuid"`
	Name string                                                `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsCommitsProductJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataAmendmentsCommitsProduct]
type v1ContractGetResponseDataAmendmentsCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsType string

const (
	V1ContractGetResponseDataAmendmentsCommitsTypePrepaid  V1ContractGetResponseDataAmendmentsCommitsType = "PREPAID"
	V1ContractGetResponseDataAmendmentsCommitsTypePostpaid V1ContractGetResponseDataAmendmentsCommitsType = "POSTPAID"
)

func (r V1ContractGetResponseDataAmendmentsCommitsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCommitsTypePrepaid, V1ContractGetResponseDataAmendmentsCommitsTypePostpaid:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits purposed with
// this commit.
type V1ContractGetResponseDataAmendmentsCommitsAccessSchedule struct {
	ScheduleItems []V1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractGetResponseDataAmendmentsCommitsAccessScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsAccessScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsAccessSchedule]
type v1ContractGetResponseDataAmendmentsCommitsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItem struct {
	ID           string                                                                   `json:"id,required" format:"uuid"`
	Amount       float64                                                                  `json:"amount,required"`
	EndingBefore time.Time                                                                `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                                `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItem]
type v1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditType struct {
	ID   string                                                                 `json:"id,required" format:"uuid"`
	Name string                                                                 `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditType]
type v1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsContract struct {
	ID   string                                                 `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataAmendmentsCommitsContractJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsContractJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsCommitsContract]
type v1ContractGetResponseDataAmendmentsCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for commit hierarchy access control
type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfiguration]
type v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                     `json:"contract_ids"`
	JSON        v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                              `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The contract that this commit will be billed on.
type V1ContractGetResponseDataAmendmentsCommitsInvoiceContract struct {
	ID   string                                                        `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataAmendmentsCommitsInvoiceContractJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsInvoiceContractJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsInvoiceContract]
type v1ContractGetResponseDataAmendmentsCommitsInvoiceContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsInvoiceContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsInvoiceContractJSON) RawJSON() string {
	return r.raw
}

// The schedule that the customer will be invoiced for this commit.
type V1ContractGetResponseDataAmendmentsCommitsInvoiceSchedule struct {
	CreditType V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                    `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsInvoiceSchedule]
type v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsInvoiceSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditType struct {
	ID   string                                                                  `json:"id,required" format:"uuid"`
	Name string                                                                  `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditType]
type v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem struct {
	ID        string                                                                    `json:"id,required" format:"uuid"`
	Amount    float64                                                                   `json:"amount,required"`
	Quantity  float64                                                                   `json:"quantity,required"`
	Timestamp time.Time                                                                 `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                   `json:"unit_price,required"`
	InvoiceID string                                                                    `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem]
type v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsLedger struct {
	Amount        float64                                              `json:"amount,required"`
	Timestamp     time.Time                                            `json:"timestamp,required" format:"date-time"`
	Type          V1ContractGetResponseDataAmendmentsCommitsLedgerType `json:"type,required"`
	ContractID    string                                               `json:"contract_id" format:"uuid"`
	InvoiceID     string                                               `json:"invoice_id" format:"uuid"`
	NewContractID string                                               `json:"new_contract_id" format:"uuid"`
	Reason        string                                               `json:"reason"`
	SegmentID     string                                               `json:"segment_id" format:"uuid"`
	JSON          v1ContractGetResponseDataAmendmentsCommitsLedgerJSON `json:"-"`
	union         V1ContractGetResponseDataAmendmentsCommitsLedgerUnion
}

// v1ContractGetResponseDataAmendmentsCommitsLedgerJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataAmendmentsCommitsLedger]
type v1ContractGetResponseDataAmendmentsCommitsLedgerJSON struct {
	Amount        apijson.Field
	Timestamp     apijson.Field
	Type          apijson.Field
	ContractID    apijson.Field
	InvoiceID     apijson.Field
	NewContractID apijson.Field
	Reason        apijson.Field
	SegmentID     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r v1ContractGetResponseDataAmendmentsCommitsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataAmendmentsCommitsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataAmendmentsCommitsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataAmendmentsCommitsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject].
func (r V1ContractGetResponseDataAmendmentsCommitsLedger) AsUnion() V1ContractGetResponseDataAmendmentsCommitsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject] or
// [V1ContractGetResponseDataAmendmentsCommitsLedgerObject].
type V1ContractGetResponseDataAmendmentsCommitsLedgerUnion interface {
	implementsV1ContractGetResponseDataAmendmentsCommitsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataAmendmentsCommitsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCommitsLedgerObject{}),
		},
	)
}

type V1ContractGetResponseDataAmendmentsCommitsLedgerObject struct {
	Amount    float64                                                    `json:"amount,required"`
	SegmentID string                                                     `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                  `json:"timestamp,required" format:"date-time"`
	Type      V1ContractGetResponseDataAmendmentsCommitsLedgerObjectType `json:"type,required"`
	JSON      v1ContractGetResponseDataAmendmentsCommitsLedgerObjectJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsCommitsLedgerObject]
type v1ContractGetResponseDataAmendmentsCommitsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataAmendmentsCommitsLedgerObject) implementsV1ContractGetResponseDataAmendmentsCommitsLedger() {
}

type V1ContractGetResponseDataAmendmentsCommitsLedgerObjectType string

const (
	V1ContractGetResponseDataAmendmentsCommitsLedgerObjectTypePrepaidCommitSegmentStart V1ContractGetResponseDataAmendmentsCommitsLedgerObjectType = "PREPAID_COMMIT_SEGMENT_START"
)

func (r V1ContractGetResponseDataAmendmentsCommitsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCommitsLedgerObjectTypePrepaidCommitSegmentStart:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCommitsLedgerType string

const (
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSegmentStart               V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_SEGMENT_START"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction  V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitRollover                   V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_ROLLOVER"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitExpiration                 V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_EXPIRATION"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCanceled                   V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_CANCELED"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCredited                   V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_CREDITED"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSeatBasedAdjustment        V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitInitialBalance            V1ContractGetResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_INITIAL_BALANCE"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction V1ContractGetResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitRollover                  V1ContractGetResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_ROLLOVER"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitTrueup                    V1ContractGetResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_TRUEUP"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitManual                     V1ContractGetResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_MANUAL"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitManual                    V1ContractGetResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_MANUAL"
	V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitExpiration                V1ContractGetResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_EXPIRATION"
)

func (r V1ContractGetResponseDataAmendmentsCommitsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSegmentStart, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitRollover, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitExpiration, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCanceled, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCredited, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSeatBasedAdjustment, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitInitialBalance, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitRollover, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitTrueup, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePrepaidCommitManual, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitManual, V1ContractGetResponseDataAmendmentsCommitsLedgerTypePostpaidCommitExpiration:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCommitsRateType string

const (
	V1ContractGetResponseDataAmendmentsCommitsRateTypeCommitRate V1ContractGetResponseDataAmendmentsCommitsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataAmendmentsCommitsRateTypeListRate   V1ContractGetResponseDataAmendmentsCommitsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataAmendmentsCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCommitsRateTypeCommitRate, V1ContractGetResponseDataAmendmentsCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCommitsRolledOverFrom struct {
	CommitID   string                                                       `json:"commit_id,required" format:"uuid"`
	ContractID string                                                       `json:"contract_id,required" format:"uuid"`
	JSON       v1ContractGetResponseDataAmendmentsCommitsRolledOverFromJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsRolledOverFromJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsCommitsRolledOverFrom]
type v1ContractGetResponseDataAmendmentsCommitsRolledOverFromJSON struct {
	CommitID    apijson.Field
	ContractID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsRolledOverFrom) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsRolledOverFromJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                `json:"product_tags"`
	JSON        v1ContractGetResponseDataAmendmentsCommitsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCommitsSpecifierJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsCommitsSpecifier]
type v1ContractGetResponseDataAmendmentsCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverride struct {
	ID                    string                                                 `json:"id,required" format:"uuid"`
	StartingAt            time.Time                                              `json:"starting_at,required" format:"date-time"`
	ApplicableProductTags []string                                               `json:"applicable_product_tags"`
	CreditType            V1ContractGetResponseDataAmendmentsOverridesCreditType `json:"credit_type"`
	EndingBefore          time.Time                                              `json:"ending_before" format:"date-time"`
	Entitled              bool                                                   `json:"entitled"`
	IsCommitSpecific      bool                                                   `json:"is_commit_specific"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated         bool                                                            `json:"is_prorated"`
	Multiplier         float64                                                         `json:"multiplier"`
	OverrideSpecifiers []V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifier `json:"override_specifiers"`
	OverrideTiers      []V1ContractGetResponseDataAmendmentsOverridesOverrideTier      `json:"override_tiers"`
	OverwriteRate      V1ContractGetResponseDataAmendmentsOverridesOverwriteRate       `json:"overwrite_rate"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price    float64                                             `json:"price"`
	Priority float64                                             `json:"priority"`
	Product  V1ContractGetResponseDataAmendmentsOverridesProduct `json:"product"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64                                              `json:"quantity"`
	RateType V1ContractGetResponseDataAmendmentsOverridesRateType `json:"rate_type"`
	Target   V1ContractGetResponseDataAmendmentsOverridesTarget   `json:"target"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetResponseDataAmendmentsOverridesTier `json:"tiers"`
	Type  V1ContractGetResponseDataAmendmentsOverridesType   `json:"type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	Value map[string]interface{}                          `json:"value"`
	JSON  v1ContractGetResponseDataAmendmentsOverrideJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverrideJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataAmendmentsOverride]
type v1ContractGetResponseDataAmendmentsOverrideJSON struct {
	ID                    apijson.Field
	StartingAt            apijson.Field
	ApplicableProductTags apijson.Field
	CreditType            apijson.Field
	EndingBefore          apijson.Field
	Entitled              apijson.Field
	IsCommitSpecific      apijson.Field
	IsProrated            apijson.Field
	Multiplier            apijson.Field
	OverrideSpecifiers    apijson.Field
	OverrideTiers         apijson.Field
	OverwriteRate         apijson.Field
	Price                 apijson.Field
	Priority              apijson.Field
	Product               apijson.Field
	Quantity              apijson.Field
	RateType              apijson.Field
	Target                apijson.Field
	Tiers                 apijson.Field
	Type                  apijson.Field
	Value                 apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverride) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverrideJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesCreditType struct {
	ID   string                                                     `json:"id,required" format:"uuid"`
	Name string                                                     `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsOverridesCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesCreditTypeJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsOverridesCreditType]
type v1ContractGetResponseDataAmendmentsOverridesCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifier struct {
	BillingFrequency        V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency `json:"billing_frequency"`
	CommitIDs               []string                                                                       `json:"commit_ids"`
	PresentationGroupValues map[string]string                                                              `json:"presentation_group_values"`
	PricingGroupValues      map[string]string                                                              `json:"pricing_group_values"`
	ProductID               string                                                                         `json:"product_id" format:"uuid"`
	ProductTags             []string                                                                       `json:"product_tags"`
	RecurringCommitIDs      []string                                                                       `json:"recurring_commit_ids"`
	RecurringCreditIDs      []string                                                                       `json:"recurring_credit_ids"`
	JSON                    v1ContractGetResponseDataAmendmentsOverridesOverrideSpecifierJSON              `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesOverrideSpecifierJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifier]
type v1ContractGetResponseDataAmendmentsOverridesOverrideSpecifierJSON struct {
	BillingFrequency        apijson.Field
	CommitIDs               apijson.Field
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	RecurringCommitIDs      apijson.Field
	RecurringCreditIDs      apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesOverrideSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractGetResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsOverridesOverrideTier struct {
	Multiplier float64                                                      `json:"multiplier,required"`
	Size       float64                                                      `json:"size"`
	JSON       v1ContractGetResponseDataAmendmentsOverridesOverrideTierJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesOverrideTierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsOverridesOverrideTier]
type v1ContractGetResponseDataAmendmentsOverridesOverrideTierJSON struct {
	Multiplier  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesOverrideTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesOverrideTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesOverwriteRate struct {
	RateType   V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType   `json:"rate_type,required"`
	CreditType V1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetResponseDataAmendmentsOverridesOverwriteRateTier `json:"tiers"`
	JSON  v1ContractGetResponseDataAmendmentsOverridesOverwriteRateJSON   `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesOverwriteRateJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsOverridesOverwriteRate]
type v1ContractGetResponseDataAmendmentsOverridesOverwriteRateJSON struct {
	RateType    apijson.Field
	CreditType  apijson.Field
	CustomRate  apijson.Field
	IsProrated  apijson.Field
	Price       apijson.Field
	Quantity    apijson.Field
	Tiers       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesOverwriteRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesOverwriteRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType string

const (
	V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeFlat         V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType = "FLAT"
	V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypePercentage   V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeSubscription V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeTiered       V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType = "TIERED"
	V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeCustom       V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeFlat, V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypePercentage, V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeSubscription, V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeTiered, V1ContractGetResponseDataAmendmentsOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditType struct {
	ID   string                                                                  `json:"id,required" format:"uuid"`
	Name string                                                                  `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditType]
type v1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesOverwriteRateTier struct {
	Price float64                                                           `json:"price,required"`
	Size  float64                                                           `json:"size"`
	JSON  v1ContractGetResponseDataAmendmentsOverridesOverwriteRateTierJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesOverwriteRateTierJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsOverridesOverwriteRateTier]
type v1ContractGetResponseDataAmendmentsOverridesOverwriteRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesOverwriteRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesOverwriteRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesProduct struct {
	ID   string                                                  `json:"id,required" format:"uuid"`
	Name string                                                  `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsOverridesProductJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesProductJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsOverridesProduct]
type v1ContractGetResponseDataAmendmentsOverridesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesRateType string

const (
	V1ContractGetResponseDataAmendmentsOverridesRateTypeFlat         V1ContractGetResponseDataAmendmentsOverridesRateType = "FLAT"
	V1ContractGetResponseDataAmendmentsOverridesRateTypePercentage   V1ContractGetResponseDataAmendmentsOverridesRateType = "PERCENTAGE"
	V1ContractGetResponseDataAmendmentsOverridesRateTypeSubscription V1ContractGetResponseDataAmendmentsOverridesRateType = "SUBSCRIPTION"
	V1ContractGetResponseDataAmendmentsOverridesRateTypeTiered       V1ContractGetResponseDataAmendmentsOverridesRateType = "TIERED"
	V1ContractGetResponseDataAmendmentsOverridesRateTypeCustom       V1ContractGetResponseDataAmendmentsOverridesRateType = "CUSTOM"
)

func (r V1ContractGetResponseDataAmendmentsOverridesRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsOverridesRateTypeFlat, V1ContractGetResponseDataAmendmentsOverridesRateTypePercentage, V1ContractGetResponseDataAmendmentsOverridesRateTypeSubscription, V1ContractGetResponseDataAmendmentsOverridesRateTypeTiered, V1ContractGetResponseDataAmendmentsOverridesRateTypeCustom:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsOverridesTarget string

const (
	V1ContractGetResponseDataAmendmentsOverridesTargetCommitRate V1ContractGetResponseDataAmendmentsOverridesTarget = "COMMIT_RATE"
	V1ContractGetResponseDataAmendmentsOverridesTargetListRate   V1ContractGetResponseDataAmendmentsOverridesTarget = "LIST_RATE"
)

func (r V1ContractGetResponseDataAmendmentsOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsOverridesTargetCommitRate, V1ContractGetResponseDataAmendmentsOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsOverridesTier struct {
	Price float64                                              `json:"price,required"`
	Size  float64                                              `json:"size"`
	JSON  v1ContractGetResponseDataAmendmentsOverridesTierJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsOverridesTierJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataAmendmentsOverridesTier]
type v1ContractGetResponseDataAmendmentsOverridesTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsOverridesTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsOverridesTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsOverridesType string

const (
	V1ContractGetResponseDataAmendmentsOverridesTypeOverwrite  V1ContractGetResponseDataAmendmentsOverridesType = "OVERWRITE"
	V1ContractGetResponseDataAmendmentsOverridesTypeMultiplier V1ContractGetResponseDataAmendmentsOverridesType = "MULTIPLIER"
	V1ContractGetResponseDataAmendmentsOverridesTypeTiered     V1ContractGetResponseDataAmendmentsOverridesType = "TIERED"
)

func (r V1ContractGetResponseDataAmendmentsOverridesType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsOverridesTypeOverwrite, V1ContractGetResponseDataAmendmentsOverridesTypeMultiplier, V1ContractGetResponseDataAmendmentsOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsScheduledCharge struct {
	ID           string                                                      `json:"id,required" format:"uuid"`
	Product      V1ContractGetResponseDataAmendmentsScheduledChargesProduct  `json:"product,required"`
	Schedule     V1ContractGetResponseDataAmendmentsScheduledChargesSchedule `json:"schedule,required"`
	ArchivedAt   time.Time                                                   `json:"archived_at" format:"date-time"`
	CustomFields map[string]string                                           `json:"custom_fields"`
	// displayed on invoices
	Name string `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                 `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataAmendmentsScheduledChargeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsScheduledChargeJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsScheduledCharge]
type v1ContractGetResponseDataAmendmentsScheduledChargeJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	ArchivedAt           apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsScheduledCharge) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsScheduledChargeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsScheduledChargesProduct struct {
	ID   string                                                         `json:"id,required" format:"uuid"`
	Name string                                                         `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsScheduledChargesProductJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsScheduledChargesProductJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsScheduledChargesProduct]
type v1ContractGetResponseDataAmendmentsScheduledChargesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsScheduledChargesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsScheduledChargesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsScheduledChargesSchedule struct {
	CreditType V1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                      `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataAmendmentsScheduledChargesScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataAmendmentsScheduledChargesScheduleJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsScheduledChargesSchedule]
type v1ContractGetResponseDataAmendmentsScheduledChargesScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsScheduledChargesSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsScheduledChargesScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditType struct {
	ID   string                                                                    `json:"id,required" format:"uuid"`
	Name string                                                                    `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditType]
type v1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItem struct {
	ID        string                                                                      `json:"id,required" format:"uuid"`
	Amount    float64                                                                     `json:"amount,required"`
	Quantity  float64                                                                     `json:"quantity,required"`
	Timestamp time.Time                                                                   `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                     `json:"unit_price,required"`
	InvoiceID string                                                                      `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItem]
type v1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCredit struct {
	ID      string                                            `json:"id,required" format:"uuid"`
	Product V1ContractGetResponseDataAmendmentsCreditsProduct `json:"product,required"`
	Type    V1ContractGetResponseDataAmendmentsCreditsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        V1ContractGetResponseDataAmendmentsCreditsAccessSchedule `json:"access_schedule"`
	ApplicableContractIDs []string                                                 `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string                                                 `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string                                                 `json:"applicable_product_tags"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                            `json:"balance"`
	Contract     V1ContractGetResponseDataAmendmentsCreditsContract `json:"contract"`
	CustomFields map[string]string                                  `json:"custom_fields"`
	Description  string                                             `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataAmendmentsCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// A list of ordered events that impact the balance of a credit. For example, an
	// invoice deduction or an expiration.
	Ledger []V1ContractGetResponseDataAmendmentsCreditsLedger `json:"ledger"`
	Name   string                                             `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority float64                                            `json:"priority"`
	RateType V1ContractGetResponseDataAmendmentsCreditsRateType `json:"rate_type"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataAmendmentsCreditsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                        `json:"uniqueness_key"`
	JSON          v1ContractGetResponseDataAmendmentsCreditJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataAmendmentsCredit]
type v1ContractGetResponseDataAmendmentsCreditJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCreditsProduct struct {
	ID   string                                                `json:"id,required" format:"uuid"`
	Name string                                                `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsCreditsProductJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataAmendmentsCreditsProduct]
type v1ContractGetResponseDataAmendmentsCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCreditsType string

const (
	V1ContractGetResponseDataAmendmentsCreditsTypeCredit V1ContractGetResponseDataAmendmentsCreditsType = "CREDIT"
)

func (r V1ContractGetResponseDataAmendmentsCreditsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCreditsTypeCredit:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits.
type V1ContractGetResponseDataAmendmentsCreditsAccessSchedule struct {
	ScheduleItems []V1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractGetResponseDataAmendmentsCreditsAccessScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsAccessScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataAmendmentsCreditsAccessSchedule]
type v1ContractGetResponseDataAmendmentsCreditsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItem struct {
	ID           string                                                                   `json:"id,required" format:"uuid"`
	Amount       float64                                                                  `json:"amount,required"`
	EndingBefore time.Time                                                                `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                                `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItem]
type v1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditType struct {
	ID   string                                                                 `json:"id,required" format:"uuid"`
	Name string                                                                 `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditType]
type v1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCreditsContract struct {
	ID   string                                                 `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataAmendmentsCreditsContractJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsContractJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsCreditsContract]
type v1ContractGetResponseDataAmendmentsCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for credit hierarchy access control
type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfiguration]
type v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                     `json:"contract_ids"`
	JSON        v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                              `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCreditsLedger struct {
	Amount     float64                                              `json:"amount,required"`
	Timestamp  time.Time                                            `json:"timestamp,required" format:"date-time"`
	Type       V1ContractGetResponseDataAmendmentsCreditsLedgerType `json:"type,required"`
	ContractID string                                               `json:"contract_id" format:"uuid"`
	InvoiceID  string                                               `json:"invoice_id" format:"uuid"`
	Reason     string                                               `json:"reason"`
	SegmentID  string                                               `json:"segment_id" format:"uuid"`
	JSON       v1ContractGetResponseDataAmendmentsCreditsLedgerJSON `json:"-"`
	union      V1ContractGetResponseDataAmendmentsCreditsLedgerUnion
}

// v1ContractGetResponseDataAmendmentsCreditsLedgerJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataAmendmentsCreditsLedger]
type v1ContractGetResponseDataAmendmentsCreditsLedgerJSON struct {
	Amount      apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	ContractID  apijson.Field
	InvoiceID   apijson.Field
	Reason      apijson.Field
	SegmentID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataAmendmentsCreditsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataAmendmentsCreditsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataAmendmentsCreditsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataAmendmentsCreditsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject].
func (r V1ContractGetResponseDataAmendmentsCreditsLedger) AsUnion() V1ContractGetResponseDataAmendmentsCreditsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject] or
// [V1ContractGetResponseDataAmendmentsCreditsLedgerObject].
type V1ContractGetResponseDataAmendmentsCreditsLedgerUnion interface {
	implementsV1ContractGetResponseDataAmendmentsCreditsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataAmendmentsCreditsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataAmendmentsCreditsLedgerObject{}),
		},
	)
}

type V1ContractGetResponseDataAmendmentsCreditsLedgerObject struct {
	Amount    float64                                                    `json:"amount,required"`
	SegmentID string                                                     `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                  `json:"timestamp,required" format:"date-time"`
	Type      V1ContractGetResponseDataAmendmentsCreditsLedgerObjectType `json:"type,required"`
	JSON      v1ContractGetResponseDataAmendmentsCreditsLedgerObjectJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsCreditsLedgerObject]
type v1ContractGetResponseDataAmendmentsCreditsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataAmendmentsCreditsLedgerObject) implementsV1ContractGetResponseDataAmendmentsCreditsLedger() {
}

type V1ContractGetResponseDataAmendmentsCreditsLedgerObjectType string

const (
	V1ContractGetResponseDataAmendmentsCreditsLedgerObjectTypeCreditSegmentStart V1ContractGetResponseDataAmendmentsCreditsLedgerObjectType = "CREDIT_SEGMENT_START"
)

func (r V1ContractGetResponseDataAmendmentsCreditsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCreditsLedgerObjectTypeCreditSegmentStart:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCreditsLedgerType string

const (
	V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditSegmentStart              V1ContractGetResponseDataAmendmentsCreditsLedgerType = "CREDIT_SEGMENT_START"
	V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditAutomatedInvoiceDeduction V1ContractGetResponseDataAmendmentsCreditsLedgerType = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditExpiration                V1ContractGetResponseDataAmendmentsCreditsLedgerType = "CREDIT_EXPIRATION"
	V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditCanceled                  V1ContractGetResponseDataAmendmentsCreditsLedgerType = "CREDIT_CANCELED"
	V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditCredited                  V1ContractGetResponseDataAmendmentsCreditsLedgerType = "CREDIT_CREDITED"
	V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditManual                    V1ContractGetResponseDataAmendmentsCreditsLedgerType = "CREDIT_MANUAL"
	V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditSeatBasedAdjustment       V1ContractGetResponseDataAmendmentsCreditsLedgerType = "CREDIT_SEAT_BASED_ADJUSTMENT"
)

func (r V1ContractGetResponseDataAmendmentsCreditsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditSegmentStart, V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditAutomatedInvoiceDeduction, V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditExpiration, V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditCanceled, V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditCredited, V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditManual, V1ContractGetResponseDataAmendmentsCreditsLedgerTypeCreditSeatBasedAdjustment:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCreditsRateType string

const (
	V1ContractGetResponseDataAmendmentsCreditsRateTypeCommitRate V1ContractGetResponseDataAmendmentsCreditsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataAmendmentsCreditsRateTypeListRate   V1ContractGetResponseDataAmendmentsCreditsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataAmendmentsCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsCreditsRateTypeCommitRate, V1ContractGetResponseDataAmendmentsCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataAmendmentsCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                `json:"product_tags"`
	JSON        v1ContractGetResponseDataAmendmentsCreditsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsCreditsSpecifierJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsCreditsSpecifier]
type v1ContractGetResponseDataAmendmentsCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsDiscount struct {
	ID           string                                               `json:"id,required" format:"uuid"`
	Product      V1ContractGetResponseDataAmendmentsDiscountsProduct  `json:"product,required"`
	Schedule     V1ContractGetResponseDataAmendmentsDiscountsSchedule `json:"schedule,required"`
	CustomFields map[string]string                                    `json:"custom_fields"`
	Name         string                                               `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                          `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataAmendmentsDiscountJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsDiscountJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataAmendmentsDiscount]
type v1ContractGetResponseDataAmendmentsDiscountJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsDiscount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsDiscountJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsDiscountsProduct struct {
	ID   string                                                  `json:"id,required" format:"uuid"`
	Name string                                                  `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsDiscountsProductJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsDiscountsProductJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsDiscountsProduct]
type v1ContractGetResponseDataAmendmentsDiscountsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsDiscountsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsDiscountsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsDiscountsSchedule struct {
	CreditType V1ContractGetResponseDataAmendmentsDiscountsScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                               `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataAmendmentsDiscountsScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataAmendmentsDiscountsScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsDiscountsSchedule]
type v1ContractGetResponseDataAmendmentsDiscountsScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsDiscountsSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsDiscountsScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsDiscountsScheduleCreditType struct {
	ID   string                                                             `json:"id,required" format:"uuid"`
	Name string                                                             `json:"name,required"`
	JSON v1ContractGetResponseDataAmendmentsDiscountsScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsDiscountsScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsDiscountsScheduleCreditType]
type v1ContractGetResponseDataAmendmentsDiscountsScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsDiscountsScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsDiscountsScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItem struct {
	ID        string                                                               `json:"id,required" format:"uuid"`
	Amount    float64                                                              `json:"amount,required"`
	Quantity  float64                                                              `json:"quantity,required"`
	Timestamp time.Time                                                            `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                              `json:"unit_price,required"`
	InvoiceID string                                                               `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItem]
type v1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsDiscountsScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsProfessionalService struct {
	ID string `json:"id,required" format:"uuid"`
	// Maximum amount for the term.
	MaxAmount float64 `json:"max_amount,required"`
	ProductID string  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity float64 `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    float64           `json:"unit_price,required"`
	CustomFields map[string]string `json:"custom_fields"`
	Description  string            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                     `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataAmendmentsProfessionalServiceJSON `json:"-"`
}

// v1ContractGetResponseDataAmendmentsProfessionalServiceJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsProfessionalService]
type v1ContractGetResponseDataAmendmentsProfessionalServiceJSON struct {
	ID                   apijson.Field
	MaxAmount            apijson.Field
	ProductID            apijson.Field
	Quantity             apijson.Field
	UnitPrice            apijson.Field
	CustomFields         apijson.Field
	Description          apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsProfessionalService) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsProfessionalServiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsResellerRoyalty struct {
	ResellerType          V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerType `json:"reseller_type,required"`
	AwsAccountNumber      string                                                           `json:"aws_account_number"`
	AwsOfferID            string                                                           `json:"aws_offer_id"`
	AwsPayerReferenceID   string                                                           `json:"aws_payer_reference_id"`
	EndingBefore          time.Time                                                        `json:"ending_before,nullable" format:"date-time"`
	Fraction              float64                                                          `json:"fraction"`
	GcpAccountID          string                                                           `json:"gcp_account_id"`
	GcpOfferID            string                                                           `json:"gcp_offer_id"`
	NetsuiteResellerID    string                                                           `json:"netsuite_reseller_id"`
	ResellerContractValue float64                                                          `json:"reseller_contract_value"`
	StartingAt            time.Time                                                        `json:"starting_at" format:"date-time"`
	JSON                  v1ContractGetResponseDataAmendmentsResellerRoyaltyJSON           `json:"-"`
}

// v1ContractGetResponseDataAmendmentsResellerRoyaltyJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataAmendmentsResellerRoyalty]
type v1ContractGetResponseDataAmendmentsResellerRoyaltyJSON struct {
	ResellerType          apijson.Field
	AwsAccountNumber      apijson.Field
	AwsOfferID            apijson.Field
	AwsPayerReferenceID   apijson.Field
	EndingBefore          apijson.Field
	Fraction              apijson.Field
	GcpAccountID          apijson.Field
	GcpOfferID            apijson.Field
	NetsuiteResellerID    apijson.Field
	ResellerContractValue apijson.Field
	StartingAt            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataAmendmentsResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataAmendmentsResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerType string

const (
	V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeAws           V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerType = "AWS"
	V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeAwsProService V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeGcp           V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerType = "GCP"
	V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeGcpProService V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeAws, V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeAwsProService, V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeGcp, V1ContractGetResponseDataAmendmentsResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrent struct {
	Commits                []V1ContractGetResponseDataCurrentCommit               `json:"commits,required"`
	CreatedAt              time.Time                                              `json:"created_at,required" format:"date-time"`
	CreatedBy              string                                                 `json:"created_by,required"`
	Overrides              []V1ContractGetResponseDataCurrentOverride             `json:"overrides,required"`
	ScheduledCharges       []V1ContractGetResponseDataCurrentScheduledCharge      `json:"scheduled_charges,required"`
	StartingAt             time.Time                                              `json:"starting_at,required" format:"date-time"`
	Transitions            []V1ContractGetResponseDataCurrentTransition           `json:"transitions,required"`
	UsageStatementSchedule V1ContractGetResponseDataCurrentUsageStatementSchedule `json:"usage_statement_schedule,required"`
	Credits                []V1ContractGetResponseDataCurrentCredit               `json:"credits"`
	// This field's availability is dependent on your client's configuration.
	Discounts    []V1ContractGetResponseDataCurrentDiscount `json:"discounts"`
	EndingBefore time.Time                                  `json:"ending_before" format:"date-time"`
	// Either a **parent** configuration with a list of children or a **child**
	// configuration with a single parent.
	HierarchyConfiguration V1ContractGetResponseDataCurrentHierarchyConfiguration `json:"hierarchy_configuration"`
	Name                   string                                                 `json:"name"`
	NetPaymentTermsDays    float64                                                `json:"net_payment_terms_days"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID                 string                                                               `json:"netsuite_sales_order_id"`
	PrepaidBalanceThresholdConfiguration V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfiguration `json:"prepaid_balance_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []V1ContractGetResponseDataCurrentProfessionalService `json:"professional_services"`
	RateCardID           string                                                `json:"rate_card_id" format:"uuid"`
	RecurringCommits     []V1ContractGetResponseDataCurrentRecurringCommit     `json:"recurring_commits"`
	RecurringCredits     []V1ContractGetResponseDataCurrentRecurringCredit     `json:"recurring_credits"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []V1ContractGetResponseDataCurrentResellerRoyalty `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// Determines which scheduled and commit charges to consolidate onto the Contract's
	// usage invoice. The charge's `timestamp` must match the usage invoice's
	// `ending_before` date for consolidation to occur. This field cannot be modified
	// after a Contract has been created. If this field is omitted, charges will appear
	// on a separate invoice from usage charges.
	ScheduledChargesOnUsageInvoices V1ContractGetResponseDataCurrentScheduledChargesOnUsageInvoices `json:"scheduled_charges_on_usage_invoices"`
	SpendThresholdConfiguration     V1ContractGetResponseDataCurrentSpendThresholdConfiguration     `json:"spend_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue float64                                     `json:"total_contract_value"`
	UsageFilter        V1ContractGetResponseDataCurrentUsageFilter `json:"usage_filter"`
	JSON               v1ContractGetResponseDataCurrentJSON        `json:"-"`
}

// v1ContractGetResponseDataCurrentJSON contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrent]
type v1ContractGetResponseDataCurrentJSON struct {
	Commits                              apijson.Field
	CreatedAt                            apijson.Field
	CreatedBy                            apijson.Field
	Overrides                            apijson.Field
	ScheduledCharges                     apijson.Field
	StartingAt                           apijson.Field
	Transitions                          apijson.Field
	UsageStatementSchedule               apijson.Field
	Credits                              apijson.Field
	Discounts                            apijson.Field
	EndingBefore                         apijson.Field
	HierarchyConfiguration               apijson.Field
	Name                                 apijson.Field
	NetPaymentTermsDays                  apijson.Field
	NetsuiteSalesOrderID                 apijson.Field
	PrepaidBalanceThresholdConfiguration apijson.Field
	ProfessionalServices                 apijson.Field
	RateCardID                           apijson.Field
	RecurringCommits                     apijson.Field
	RecurringCredits                     apijson.Field
	ResellerRoyalties                    apijson.Field
	SalesforceOpportunityID              apijson.Field
	ScheduledChargesOnUsageInvoices      apijson.Field
	SpendThresholdConfiguration          apijson.Field
	TotalContractValue                   apijson.Field
	UsageFilter                          apijson.Field
	raw                                  string
	ExtraFields                          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommit struct {
	ID      string                                         `json:"id,required" format:"uuid"`
	Product V1ContractGetResponseDataCurrentCommitsProduct `json:"product,required"`
	Type    V1ContractGetResponseDataCurrentCommitsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits purposed with
	// this commit.
	AccessSchedule V1ContractGetResponseDataCurrentCommitsAccessSchedule `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount                float64  `json:"amount"`
	ApplicableContractIDs []string `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                         `json:"balance"`
	Contract     V1ContractGetResponseDataCurrentCommitsContract `json:"contract"`
	CustomFields map[string]string                               `json:"custom_fields"`
	Description  string                                          `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataCurrentCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The contract that this commit will be billed on.
	InvoiceContract V1ContractGetResponseDataCurrentCommitsInvoiceContract `json:"invoice_contract"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule V1ContractGetResponseDataCurrentCommitsInvoiceSchedule `json:"invoice_schedule"`
	// A list of ordered events that impact the balance of a commit. For example, an
	// invoice deduction or a rollover.
	Ledger []V1ContractGetResponseDataCurrentCommitsLedger `json:"ledger"`
	Name   string                                          `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority         float64                                               `json:"priority"`
	RateType         V1ContractGetResponseDataCurrentCommitsRateType       `json:"rate_type"`
	RolledOverFrom   V1ContractGetResponseDataCurrentCommitsRolledOverFrom `json:"rolled_over_from"`
	RolloverFraction float64                                               `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataCurrentCommitsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                     `json:"uniqueness_key"`
	JSON          v1ContractGetResponseDataCurrentCommitJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataCurrentCommit]
type v1ContractGetResponseDataCurrentCommitJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsProduct struct {
	ID   string                                             `json:"id,required" format:"uuid"`
	Name string                                             `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentCommitsProductJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentCommitsProduct]
type v1ContractGetResponseDataCurrentCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsType string

const (
	V1ContractGetResponseDataCurrentCommitsTypePrepaid  V1ContractGetResponseDataCurrentCommitsType = "PREPAID"
	V1ContractGetResponseDataCurrentCommitsTypePostpaid V1ContractGetResponseDataCurrentCommitsType = "POSTPAID"
)

func (r V1ContractGetResponseDataCurrentCommitsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCommitsTypePrepaid, V1ContractGetResponseDataCurrentCommitsTypePostpaid:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits purposed with
// this commit.
type V1ContractGetResponseDataCurrentCommitsAccessSchedule struct {
	ScheduleItems []V1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractGetResponseDataCurrentCommitsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractGetResponseDataCurrentCommitsAccessScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentCommitsAccessSchedule]
type v1ContractGetResponseDataCurrentCommitsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItem struct {
	ID           string                                                                `json:"id,required" format:"uuid"`
	Amount       float64                                                               `json:"amount,required"`
	EndingBefore time.Time                                                             `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                             `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItem]
type v1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsAccessScheduleCreditType struct {
	ID   string                                                              `json:"id,required" format:"uuid"`
	Name string                                                              `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentCommitsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsAccessScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsAccessScheduleCreditType]
type v1ContractGetResponseDataCurrentCommitsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsContract struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataCurrentCommitsContractJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsContractJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentCommitsContract]
type v1ContractGetResponseDataCurrentCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for commit hierarchy access control
type V1ContractGetResponseDataCurrentCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfiguration]
type v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                  `json:"contract_ids"`
	JSON        v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                           `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The contract that this commit will be billed on.
type V1ContractGetResponseDataCurrentCommitsInvoiceContract struct {
	ID   string                                                     `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataCurrentCommitsInvoiceContractJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsInvoiceContractJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentCommitsInvoiceContract]
type v1ContractGetResponseDataCurrentCommitsInvoiceContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsInvoiceContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsInvoiceContractJSON) RawJSON() string {
	return r.raw
}

// The schedule that the customer will be invoiced for this commit.
type V1ContractGetResponseDataCurrentCommitsInvoiceSchedule struct {
	CreditType V1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                 `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataCurrentCommitsInvoiceScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsInvoiceScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentCommitsInvoiceSchedule]
type v1ContractGetResponseDataCurrentCommitsInvoiceScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsInvoiceSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsInvoiceScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditType]
type v1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItem struct {
	ID        string                                                                 `json:"id,required" format:"uuid"`
	Amount    float64                                                                `json:"amount,required"`
	Quantity  float64                                                                `json:"quantity,required"`
	Timestamp time.Time                                                              `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                `json:"unit_price,required"`
	InvoiceID string                                                                 `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItem]
type v1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsLedger struct {
	Amount        float64                                           `json:"amount,required"`
	Timestamp     time.Time                                         `json:"timestamp,required" format:"date-time"`
	Type          V1ContractGetResponseDataCurrentCommitsLedgerType `json:"type,required"`
	ContractID    string                                            `json:"contract_id" format:"uuid"`
	InvoiceID     string                                            `json:"invoice_id" format:"uuid"`
	NewContractID string                                            `json:"new_contract_id" format:"uuid"`
	Reason        string                                            `json:"reason"`
	SegmentID     string                                            `json:"segment_id" format:"uuid"`
	JSON          v1ContractGetResponseDataCurrentCommitsLedgerJSON `json:"-"`
	union         V1ContractGetResponseDataCurrentCommitsLedgerUnion
}

// v1ContractGetResponseDataCurrentCommitsLedgerJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataCurrentCommitsLedger]
type v1ContractGetResponseDataCurrentCommitsLedgerJSON struct {
	Amount        apijson.Field
	Timestamp     apijson.Field
	Type          apijson.Field
	ContractID    apijson.Field
	InvoiceID     apijson.Field
	NewContractID apijson.Field
	Reason        apijson.Field
	SegmentID     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r v1ContractGetResponseDataCurrentCommitsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataCurrentCommitsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataCurrentCommitsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataCurrentCommitsLedgerUnion] interface
// which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject].
func (r V1ContractGetResponseDataCurrentCommitsLedger) AsUnion() V1ContractGetResponseDataCurrentCommitsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject],
// [V1ContractGetResponseDataCurrentCommitsLedgerObject] or
// [V1ContractGetResponseDataCurrentCommitsLedgerObject].
type V1ContractGetResponseDataCurrentCommitsLedgerUnion interface {
	implementsV1ContractGetResponseDataCurrentCommitsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataCurrentCommitsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCommitsLedgerObject{}),
		},
	)
}

type V1ContractGetResponseDataCurrentCommitsLedgerObject struct {
	Amount    float64                                                 `json:"amount,required"`
	SegmentID string                                                  `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                               `json:"timestamp,required" format:"date-time"`
	Type      V1ContractGetResponseDataCurrentCommitsLedgerObjectType `json:"type,required"`
	JSON      v1ContractGetResponseDataCurrentCommitsLedgerObjectJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentCommitsLedgerObject]
type v1ContractGetResponseDataCurrentCommitsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentCommitsLedgerObject) implementsV1ContractGetResponseDataCurrentCommitsLedger() {
}

type V1ContractGetResponseDataCurrentCommitsLedgerObjectType string

const (
	V1ContractGetResponseDataCurrentCommitsLedgerObjectTypePrepaidCommitSegmentStart V1ContractGetResponseDataCurrentCommitsLedgerObjectType = "PREPAID_COMMIT_SEGMENT_START"
)

func (r V1ContractGetResponseDataCurrentCommitsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCommitsLedgerObjectTypePrepaidCommitSegmentStart:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCommitsLedgerType string

const (
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitSegmentStart               V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_SEGMENT_START"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction  V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitRollover                   V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_ROLLOVER"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitExpiration                 V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_EXPIRATION"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitCanceled                   V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_CANCELED"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitCredited                   V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_CREDITED"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitSeatBasedAdjustment        V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitInitialBalance            V1ContractGetResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_INITIAL_BALANCE"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction V1ContractGetResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitRollover                  V1ContractGetResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_ROLLOVER"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitTrueup                    V1ContractGetResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_TRUEUP"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitManual                     V1ContractGetResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_MANUAL"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitManual                    V1ContractGetResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_MANUAL"
	V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitExpiration                V1ContractGetResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_EXPIRATION"
)

func (r V1ContractGetResponseDataCurrentCommitsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitSegmentStart, V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction, V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitRollover, V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitExpiration, V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitCanceled, V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitCredited, V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitSeatBasedAdjustment, V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitInitialBalance, V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction, V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitRollover, V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitTrueup, V1ContractGetResponseDataCurrentCommitsLedgerTypePrepaidCommitManual, V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitManual, V1ContractGetResponseDataCurrentCommitsLedgerTypePostpaidCommitExpiration:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCommitsRateType string

const (
	V1ContractGetResponseDataCurrentCommitsRateTypeCommitRate V1ContractGetResponseDataCurrentCommitsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataCurrentCommitsRateTypeListRate   V1ContractGetResponseDataCurrentCommitsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataCurrentCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCommitsRateTypeCommitRate, V1ContractGetResponseDataCurrentCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCommitsRolledOverFrom struct {
	CommitID   string                                                    `json:"commit_id,required" format:"uuid"`
	ContractID string                                                    `json:"contract_id,required" format:"uuid"`
	JSON       v1ContractGetResponseDataCurrentCommitsRolledOverFromJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsRolledOverFromJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentCommitsRolledOverFrom]
type v1ContractGetResponseDataCurrentCommitsRolledOverFromJSON struct {
	CommitID    apijson.Field
	ContractID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsRolledOverFrom) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsRolledOverFromJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                             `json:"product_tags"`
	JSON        v1ContractGetResponseDataCurrentCommitsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCommitsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentCommitsSpecifier]
type v1ContractGetResponseDataCurrentCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverride struct {
	ID                    string                                              `json:"id,required" format:"uuid"`
	StartingAt            time.Time                                           `json:"starting_at,required" format:"date-time"`
	ApplicableProductTags []string                                            `json:"applicable_product_tags"`
	CreditType            V1ContractGetResponseDataCurrentOverridesCreditType `json:"credit_type"`
	EndingBefore          time.Time                                           `json:"ending_before" format:"date-time"`
	Entitled              bool                                                `json:"entitled"`
	IsCommitSpecific      bool                                                `json:"is_commit_specific"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated         bool                                                         `json:"is_prorated"`
	Multiplier         float64                                                      `json:"multiplier"`
	OverrideSpecifiers []V1ContractGetResponseDataCurrentOverridesOverrideSpecifier `json:"override_specifiers"`
	OverrideTiers      []V1ContractGetResponseDataCurrentOverridesOverrideTier      `json:"override_tiers"`
	OverwriteRate      V1ContractGetResponseDataCurrentOverridesOverwriteRate       `json:"overwrite_rate"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price    float64                                          `json:"price"`
	Priority float64                                          `json:"priority"`
	Product  V1ContractGetResponseDataCurrentOverridesProduct `json:"product"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64                                           `json:"quantity"`
	RateType V1ContractGetResponseDataCurrentOverridesRateType `json:"rate_type"`
	Target   V1ContractGetResponseDataCurrentOverridesTarget   `json:"target"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetResponseDataCurrentOverridesTier `json:"tiers"`
	Type  V1ContractGetResponseDataCurrentOverridesType   `json:"type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	Value map[string]interface{}                       `json:"value"`
	JSON  v1ContractGetResponseDataCurrentOverrideJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentOverrideJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataCurrentOverride]
type v1ContractGetResponseDataCurrentOverrideJSON struct {
	ID                    apijson.Field
	StartingAt            apijson.Field
	ApplicableProductTags apijson.Field
	CreditType            apijson.Field
	EndingBefore          apijson.Field
	Entitled              apijson.Field
	IsCommitSpecific      apijson.Field
	IsProrated            apijson.Field
	Multiplier            apijson.Field
	OverrideSpecifiers    apijson.Field
	OverrideTiers         apijson.Field
	OverwriteRate         apijson.Field
	Price                 apijson.Field
	Priority              apijson.Field
	Product               apijson.Field
	Quantity              apijson.Field
	RateType              apijson.Field
	Target                apijson.Field
	Tiers                 apijson.Field
	Type                  apijson.Field
	Value                 apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverride) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverrideJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesCreditType struct {
	ID   string                                                  `json:"id,required" format:"uuid"`
	Name string                                                  `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentOverridesCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesCreditTypeJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentOverridesCreditType]
type v1ContractGetResponseDataCurrentOverridesCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesOverrideSpecifier struct {
	BillingFrequency        V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency `json:"billing_frequency"`
	CommitIDs               []string                                                                    `json:"commit_ids"`
	PresentationGroupValues map[string]string                                                           `json:"presentation_group_values"`
	PricingGroupValues      map[string]string                                                           `json:"pricing_group_values"`
	ProductID               string                                                                      `json:"product_id" format:"uuid"`
	ProductTags             []string                                                                    `json:"product_tags"`
	RecurringCommitIDs      []string                                                                    `json:"recurring_commit_ids"`
	RecurringCreditIDs      []string                                                                    `json:"recurring_credit_ids"`
	JSON                    v1ContractGetResponseDataCurrentOverridesOverrideSpecifierJSON              `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesOverrideSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentOverridesOverrideSpecifier]
type v1ContractGetResponseDataCurrentOverridesOverrideSpecifierJSON struct {
	BillingFrequency        apijson.Field
	CommitIDs               apijson.Field
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	RecurringCommitIDs      apijson.Field
	RecurringCreditIDs      apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesOverrideSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesOverrideSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractGetResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentOverridesOverrideTier struct {
	Multiplier float64                                                   `json:"multiplier,required"`
	Size       float64                                                   `json:"size"`
	JSON       v1ContractGetResponseDataCurrentOverridesOverrideTierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesOverrideTierJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentOverridesOverrideTier]
type v1ContractGetResponseDataCurrentOverridesOverrideTierJSON struct {
	Multiplier  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesOverrideTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesOverrideTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesOverwriteRate struct {
	RateType   V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType   `json:"rate_type,required"`
	CreditType V1ContractGetResponseDataCurrentOverridesOverwriteRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetResponseDataCurrentOverridesOverwriteRateTier `json:"tiers"`
	JSON  v1ContractGetResponseDataCurrentOverridesOverwriteRateJSON   `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesOverwriteRateJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentOverridesOverwriteRate]
type v1ContractGetResponseDataCurrentOverridesOverwriteRateJSON struct {
	RateType    apijson.Field
	CreditType  apijson.Field
	CustomRate  apijson.Field
	IsProrated  apijson.Field
	Price       apijson.Field
	Quantity    apijson.Field
	Tiers       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesOverwriteRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesOverwriteRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType string

const (
	V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeFlat         V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType = "FLAT"
	V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypePercentage   V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeSubscription V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeTiered       V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType = "TIERED"
	V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeCustom       V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractGetResponseDataCurrentOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeFlat, V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypePercentage, V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeSubscription, V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeTiered, V1ContractGetResponseDataCurrentOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentOverridesOverwriteRateCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentOverridesOverwriteRateCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesOverwriteRateCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentOverridesOverwriteRateCreditType]
type v1ContractGetResponseDataCurrentOverridesOverwriteRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesOverwriteRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesOverwriteRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesOverwriteRateTier struct {
	Price float64                                                        `json:"price,required"`
	Size  float64                                                        `json:"size"`
	JSON  v1ContractGetResponseDataCurrentOverridesOverwriteRateTierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesOverwriteRateTierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentOverridesOverwriteRateTier]
type v1ContractGetResponseDataCurrentOverridesOverwriteRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesOverwriteRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesOverwriteRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesProduct struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	Name string                                               `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentOverridesProductJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentOverridesProduct]
type v1ContractGetResponseDataCurrentOverridesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesRateType string

const (
	V1ContractGetResponseDataCurrentOverridesRateTypeFlat         V1ContractGetResponseDataCurrentOverridesRateType = "FLAT"
	V1ContractGetResponseDataCurrentOverridesRateTypePercentage   V1ContractGetResponseDataCurrentOverridesRateType = "PERCENTAGE"
	V1ContractGetResponseDataCurrentOverridesRateTypeSubscription V1ContractGetResponseDataCurrentOverridesRateType = "SUBSCRIPTION"
	V1ContractGetResponseDataCurrentOverridesRateTypeTiered       V1ContractGetResponseDataCurrentOverridesRateType = "TIERED"
	V1ContractGetResponseDataCurrentOverridesRateTypeCustom       V1ContractGetResponseDataCurrentOverridesRateType = "CUSTOM"
)

func (r V1ContractGetResponseDataCurrentOverridesRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentOverridesRateTypeFlat, V1ContractGetResponseDataCurrentOverridesRateTypePercentage, V1ContractGetResponseDataCurrentOverridesRateTypeSubscription, V1ContractGetResponseDataCurrentOverridesRateTypeTiered, V1ContractGetResponseDataCurrentOverridesRateTypeCustom:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentOverridesTarget string

const (
	V1ContractGetResponseDataCurrentOverridesTargetCommitRate V1ContractGetResponseDataCurrentOverridesTarget = "COMMIT_RATE"
	V1ContractGetResponseDataCurrentOverridesTargetListRate   V1ContractGetResponseDataCurrentOverridesTarget = "LIST_RATE"
)

func (r V1ContractGetResponseDataCurrentOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentOverridesTargetCommitRate, V1ContractGetResponseDataCurrentOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentOverridesTier struct {
	Price float64                                           `json:"price,required"`
	Size  float64                                           `json:"size"`
	JSON  v1ContractGetResponseDataCurrentOverridesTierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentOverridesTierJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataCurrentOverridesTier]
type v1ContractGetResponseDataCurrentOverridesTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentOverridesTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentOverridesTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentOverridesType string

const (
	V1ContractGetResponseDataCurrentOverridesTypeOverwrite  V1ContractGetResponseDataCurrentOverridesType = "OVERWRITE"
	V1ContractGetResponseDataCurrentOverridesTypeMultiplier V1ContractGetResponseDataCurrentOverridesType = "MULTIPLIER"
	V1ContractGetResponseDataCurrentOverridesTypeTiered     V1ContractGetResponseDataCurrentOverridesType = "TIERED"
)

func (r V1ContractGetResponseDataCurrentOverridesType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentOverridesTypeOverwrite, V1ContractGetResponseDataCurrentOverridesTypeMultiplier, V1ContractGetResponseDataCurrentOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentScheduledCharge struct {
	ID           string                                                   `json:"id,required" format:"uuid"`
	Product      V1ContractGetResponseDataCurrentScheduledChargesProduct  `json:"product,required"`
	Schedule     V1ContractGetResponseDataCurrentScheduledChargesSchedule `json:"schedule,required"`
	ArchivedAt   time.Time                                                `json:"archived_at" format:"date-time"`
	CustomFields map[string]string                                        `json:"custom_fields"`
	// displayed on invoices
	Name string `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                              `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataCurrentScheduledChargeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentScheduledChargeJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentScheduledCharge]
type v1ContractGetResponseDataCurrentScheduledChargeJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	ArchivedAt           apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentScheduledCharge) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentScheduledChargeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentScheduledChargesProduct struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentScheduledChargesProductJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentScheduledChargesProductJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentScheduledChargesProduct]
type v1ContractGetResponseDataCurrentScheduledChargesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentScheduledChargesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentScheduledChargesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentScheduledChargesSchedule struct {
	CreditType V1ContractGetResponseDataCurrentScheduledChargesScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                   `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataCurrentScheduledChargesScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataCurrentScheduledChargesScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentScheduledChargesSchedule]
type v1ContractGetResponseDataCurrentScheduledChargesScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentScheduledChargesSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentScheduledChargesScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentScheduledChargesScheduleCreditType struct {
	ID   string                                                                 `json:"id,required" format:"uuid"`
	Name string                                                                 `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentScheduledChargesScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentScheduledChargesScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentScheduledChargesScheduleCreditType]
type v1ContractGetResponseDataCurrentScheduledChargesScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentScheduledChargesScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentScheduledChargesScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItem struct {
	ID        string                                                                   `json:"id,required" format:"uuid"`
	Amount    float64                                                                  `json:"amount,required"`
	Quantity  float64                                                                  `json:"quantity,required"`
	Timestamp time.Time                                                                `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                  `json:"unit_price,required"`
	InvoiceID string                                                                   `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItem]
type v1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentScheduledChargesScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentTransition struct {
	FromContractID string                                          `json:"from_contract_id,required" format:"uuid"`
	ToContractID   string                                          `json:"to_contract_id,required" format:"uuid"`
	Type           V1ContractGetResponseDataCurrentTransitionsType `json:"type,required"`
	JSON           v1ContractGetResponseDataCurrentTransitionJSON  `json:"-"`
}

// v1ContractGetResponseDataCurrentTransitionJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataCurrentTransition]
type v1ContractGetResponseDataCurrentTransitionJSON struct {
	FromContractID apijson.Field
	ToContractID   apijson.Field
	Type           apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentTransition) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentTransitionJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentTransitionsType string

const (
	V1ContractGetResponseDataCurrentTransitionsTypeSupersede V1ContractGetResponseDataCurrentTransitionsType = "SUPERSEDE"
	V1ContractGetResponseDataCurrentTransitionsTypeRenewal   V1ContractGetResponseDataCurrentTransitionsType = "RENEWAL"
)

func (r V1ContractGetResponseDataCurrentTransitionsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentTransitionsTypeSupersede, V1ContractGetResponseDataCurrentTransitionsTypeRenewal:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentUsageStatementSchedule struct {
	// Contract usage statements follow a selected cadence based on this date.
	BillingAnchorDate time.Time                                                       `json:"billing_anchor_date,required" format:"date-time"`
	Frequency         V1ContractGetResponseDataCurrentUsageStatementScheduleFrequency `json:"frequency,required"`
	JSON              v1ContractGetResponseDataCurrentUsageStatementScheduleJSON      `json:"-"`
}

// v1ContractGetResponseDataCurrentUsageStatementScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentUsageStatementSchedule]
type v1ContractGetResponseDataCurrentUsageStatementScheduleJSON struct {
	BillingAnchorDate apijson.Field
	Frequency         apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentUsageStatementSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentUsageStatementScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentUsageStatementScheduleFrequency string

const (
	V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyMonthly   V1ContractGetResponseDataCurrentUsageStatementScheduleFrequency = "MONTHLY"
	V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyQuarterly V1ContractGetResponseDataCurrentUsageStatementScheduleFrequency = "QUARTERLY"
	V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyAnnual    V1ContractGetResponseDataCurrentUsageStatementScheduleFrequency = "ANNUAL"
	V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyWeekly    V1ContractGetResponseDataCurrentUsageStatementScheduleFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataCurrentUsageStatementScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyMonthly, V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyQuarterly, V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyAnnual, V1ContractGetResponseDataCurrentUsageStatementScheduleFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCredit struct {
	ID      string                                         `json:"id,required" format:"uuid"`
	Product V1ContractGetResponseDataCurrentCreditsProduct `json:"product,required"`
	Type    V1ContractGetResponseDataCurrentCreditsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        V1ContractGetResponseDataCurrentCreditsAccessSchedule `json:"access_schedule"`
	ApplicableContractIDs []string                                              `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string                                              `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string                                              `json:"applicable_product_tags"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                         `json:"balance"`
	Contract     V1ContractGetResponseDataCurrentCreditsContract `json:"contract"`
	CustomFields map[string]string                               `json:"custom_fields"`
	Description  string                                          `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataCurrentCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// A list of ordered events that impact the balance of a credit. For example, an
	// invoice deduction or an expiration.
	Ledger []V1ContractGetResponseDataCurrentCreditsLedger `json:"ledger"`
	Name   string                                          `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority float64                                         `json:"priority"`
	RateType V1ContractGetResponseDataCurrentCreditsRateType `json:"rate_type"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataCurrentCreditsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                     `json:"uniqueness_key"`
	JSON          v1ContractGetResponseDataCurrentCreditJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataCurrentCredit]
type v1ContractGetResponseDataCurrentCreditJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCreditsProduct struct {
	ID   string                                             `json:"id,required" format:"uuid"`
	Name string                                             `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentCreditsProductJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentCreditsProduct]
type v1ContractGetResponseDataCurrentCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCreditsType string

const (
	V1ContractGetResponseDataCurrentCreditsTypeCredit V1ContractGetResponseDataCurrentCreditsType = "CREDIT"
)

func (r V1ContractGetResponseDataCurrentCreditsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCreditsTypeCredit:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits.
type V1ContractGetResponseDataCurrentCreditsAccessSchedule struct {
	ScheduleItems []V1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractGetResponseDataCurrentCreditsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractGetResponseDataCurrentCreditsAccessScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentCreditsAccessSchedule]
type v1ContractGetResponseDataCurrentCreditsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItem struct {
	ID           string                                                                `json:"id,required" format:"uuid"`
	Amount       float64                                                               `json:"amount,required"`
	EndingBefore time.Time                                                             `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                             `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItem]
type v1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCreditsAccessScheduleCreditType struct {
	ID   string                                                              `json:"id,required" format:"uuid"`
	Name string                                                              `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentCreditsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsAccessScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCreditsAccessScheduleCreditType]
type v1ContractGetResponseDataCurrentCreditsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCreditsContract struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataCurrentCreditsContractJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsContractJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentCreditsContract]
type v1ContractGetResponseDataCurrentCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for credit hierarchy access control
type V1ContractGetResponseDataCurrentCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfiguration]
type v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                  `json:"contract_ids"`
	JSON        v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                           `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCreditsLedger struct {
	Amount     float64                                           `json:"amount,required"`
	Timestamp  time.Time                                         `json:"timestamp,required" format:"date-time"`
	Type       V1ContractGetResponseDataCurrentCreditsLedgerType `json:"type,required"`
	ContractID string                                            `json:"contract_id" format:"uuid"`
	InvoiceID  string                                            `json:"invoice_id" format:"uuid"`
	Reason     string                                            `json:"reason"`
	SegmentID  string                                            `json:"segment_id" format:"uuid"`
	JSON       v1ContractGetResponseDataCurrentCreditsLedgerJSON `json:"-"`
	union      V1ContractGetResponseDataCurrentCreditsLedgerUnion
}

// v1ContractGetResponseDataCurrentCreditsLedgerJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataCurrentCreditsLedger]
type v1ContractGetResponseDataCurrentCreditsLedgerJSON struct {
	Amount      apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	ContractID  apijson.Field
	InvoiceID   apijson.Field
	Reason      apijson.Field
	SegmentID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataCurrentCreditsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataCurrentCreditsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataCurrentCreditsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataCurrentCreditsLedgerUnion] interface
// which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject].
func (r V1ContractGetResponseDataCurrentCreditsLedger) AsUnion() V1ContractGetResponseDataCurrentCreditsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject],
// [V1ContractGetResponseDataCurrentCreditsLedgerObject] or
// [V1ContractGetResponseDataCurrentCreditsLedgerObject].
type V1ContractGetResponseDataCurrentCreditsLedgerUnion interface {
	implementsV1ContractGetResponseDataCurrentCreditsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataCurrentCreditsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentCreditsLedgerObject{}),
		},
	)
}

type V1ContractGetResponseDataCurrentCreditsLedgerObject struct {
	Amount    float64                                                 `json:"amount,required"`
	SegmentID string                                                  `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                               `json:"timestamp,required" format:"date-time"`
	Type      V1ContractGetResponseDataCurrentCreditsLedgerObjectType `json:"type,required"`
	JSON      v1ContractGetResponseDataCurrentCreditsLedgerObjectJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentCreditsLedgerObject]
type v1ContractGetResponseDataCurrentCreditsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentCreditsLedgerObject) implementsV1ContractGetResponseDataCurrentCreditsLedger() {
}

type V1ContractGetResponseDataCurrentCreditsLedgerObjectType string

const (
	V1ContractGetResponseDataCurrentCreditsLedgerObjectTypeCreditSegmentStart V1ContractGetResponseDataCurrentCreditsLedgerObjectType = "CREDIT_SEGMENT_START"
)

func (r V1ContractGetResponseDataCurrentCreditsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCreditsLedgerObjectTypeCreditSegmentStart:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCreditsLedgerType string

const (
	V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditSegmentStart              V1ContractGetResponseDataCurrentCreditsLedgerType = "CREDIT_SEGMENT_START"
	V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditAutomatedInvoiceDeduction V1ContractGetResponseDataCurrentCreditsLedgerType = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditExpiration                V1ContractGetResponseDataCurrentCreditsLedgerType = "CREDIT_EXPIRATION"
	V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditCanceled                  V1ContractGetResponseDataCurrentCreditsLedgerType = "CREDIT_CANCELED"
	V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditCredited                  V1ContractGetResponseDataCurrentCreditsLedgerType = "CREDIT_CREDITED"
	V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditManual                    V1ContractGetResponseDataCurrentCreditsLedgerType = "CREDIT_MANUAL"
	V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditSeatBasedAdjustment       V1ContractGetResponseDataCurrentCreditsLedgerType = "CREDIT_SEAT_BASED_ADJUSTMENT"
)

func (r V1ContractGetResponseDataCurrentCreditsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditSegmentStart, V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditAutomatedInvoiceDeduction, V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditExpiration, V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditCanceled, V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditCredited, V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditManual, V1ContractGetResponseDataCurrentCreditsLedgerTypeCreditSeatBasedAdjustment:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCreditsRateType string

const (
	V1ContractGetResponseDataCurrentCreditsRateTypeCommitRate V1ContractGetResponseDataCurrentCreditsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataCurrentCreditsRateTypeListRate   V1ContractGetResponseDataCurrentCreditsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataCurrentCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentCreditsRateTypeCommitRate, V1ContractGetResponseDataCurrentCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                             `json:"product_tags"`
	JSON        v1ContractGetResponseDataCurrentCreditsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentCreditsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentCreditsSpecifier]
type v1ContractGetResponseDataCurrentCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentDiscount struct {
	ID           string                                            `json:"id,required" format:"uuid"`
	Product      V1ContractGetResponseDataCurrentDiscountsProduct  `json:"product,required"`
	Schedule     V1ContractGetResponseDataCurrentDiscountsSchedule `json:"schedule,required"`
	CustomFields map[string]string                                 `json:"custom_fields"`
	Name         string                                            `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                       `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataCurrentDiscountJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentDiscountJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataCurrentDiscount]
type v1ContractGetResponseDataCurrentDiscountJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentDiscount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentDiscountJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentDiscountsProduct struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	Name string                                               `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentDiscountsProductJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentDiscountsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentDiscountsProduct]
type v1ContractGetResponseDataCurrentDiscountsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentDiscountsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentDiscountsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentDiscountsSchedule struct {
	CreditType V1ContractGetResponseDataCurrentDiscountsScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                            `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataCurrentDiscountsScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataCurrentDiscountsScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataCurrentDiscountsScheduleJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentDiscountsSchedule]
type v1ContractGetResponseDataCurrentDiscountsScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentDiscountsSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentDiscountsScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentDiscountsScheduleCreditType struct {
	ID   string                                                          `json:"id,required" format:"uuid"`
	Name string                                                          `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentDiscountsScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentDiscountsScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentDiscountsScheduleCreditType]
type v1ContractGetResponseDataCurrentDiscountsScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentDiscountsScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentDiscountsScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentDiscountsScheduleScheduleItem struct {
	ID        string                                                            `json:"id,required" format:"uuid"`
	Amount    float64                                                           `json:"amount,required"`
	Quantity  float64                                                           `json:"quantity,required"`
	Timestamp time.Time                                                         `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                           `json:"unit_price,required"`
	InvoiceID string                                                            `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataCurrentDiscountsScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentDiscountsScheduleScheduleItemJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentDiscountsScheduleScheduleItem]
type v1ContractGetResponseDataCurrentDiscountsScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentDiscountsScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentDiscountsScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
type V1ContractGetResponseDataCurrentHierarchyConfiguration struct {
	// This field can have the runtime type of
	// [[]V1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChild].
	Children interface{} `json:"children"`
	// This field can have the runtime type of
	// [V1ContractGetResponseDataCurrentHierarchyConfigurationParentParent].
	Parent interface{}                                                `json:"parent"`
	JSON   v1ContractGetResponseDataCurrentHierarchyConfigurationJSON `json:"-"`
	union  V1ContractGetResponseDataCurrentHierarchyConfigurationUnion
}

// v1ContractGetResponseDataCurrentHierarchyConfigurationJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentHierarchyConfiguration]
type v1ContractGetResponseDataCurrentHierarchyConfigurationJSON struct {
	Children    apijson.Field
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataCurrentHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataCurrentHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataCurrentHierarchyConfiguration{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataCurrentHierarchyConfigurationUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataCurrentHierarchyConfigurationChildren],
// [V1ContractGetResponseDataCurrentHierarchyConfigurationParent].
func (r V1ContractGetResponseDataCurrentHierarchyConfiguration) AsUnion() V1ContractGetResponseDataCurrentHierarchyConfigurationUnion {
	return r.union
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
//
// Union satisfied by
// [V1ContractGetResponseDataCurrentHierarchyConfigurationChildren] or
// [V1ContractGetResponseDataCurrentHierarchyConfigurationParent].
type V1ContractGetResponseDataCurrentHierarchyConfigurationUnion interface {
	implementsV1ContractGetResponseDataCurrentHierarchyConfiguration()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataCurrentHierarchyConfigurationUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentHierarchyConfigurationChildren{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentHierarchyConfigurationParent{}),
		},
	)
}

type V1ContractGetResponseDataCurrentHierarchyConfigurationChildren struct {
	// List of contracts that belong to this parent.
	Children []V1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChild `json:"children,required"`
	JSON     v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenJSON    `json:"-"`
}

// v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentHierarchyConfigurationChildren]
type v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenJSON struct {
	Children    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentHierarchyConfigurationChildren) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentHierarchyConfigurationChildren) implementsV1ContractGetResponseDataCurrentHierarchyConfiguration() {
}

type V1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChild struct {
	ContractID string                                                                  `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                  `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChildJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChildJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChild]
type v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChildJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChild) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentHierarchyConfigurationChildrenChildJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentHierarchyConfigurationParent struct {
	// The single parent contract/customer for this child.
	Parent V1ContractGetResponseDataCurrentHierarchyConfigurationParentParent `json:"parent,required"`
	JSON   v1ContractGetResponseDataCurrentHierarchyConfigurationParentJSON   `json:"-"`
}

// v1ContractGetResponseDataCurrentHierarchyConfigurationParentJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentHierarchyConfigurationParent]
type v1ContractGetResponseDataCurrentHierarchyConfigurationParentJSON struct {
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentHierarchyConfigurationParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentHierarchyConfigurationParentJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentHierarchyConfigurationParent) implementsV1ContractGetResponseDataCurrentHierarchyConfiguration() {
}

// The single parent contract/customer for this child.
type V1ContractGetResponseDataCurrentHierarchyConfigurationParentParent struct {
	ContractID string                                                                 `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                 `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractGetResponseDataCurrentHierarchyConfigurationParentParentJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentHierarchyConfigurationParentParentJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentHierarchyConfigurationParentParent]
type v1ContractGetResponseDataCurrentHierarchyConfigurationParentParentJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentHierarchyConfigurationParentParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentHierarchyConfigurationParentParentJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfiguration struct {
	Commit V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                                  `json:"is_enabled,required"`
	PaymentGateConfig V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the amount the balance should be recharged to.
	RechargeToAmount float64 `json:"recharge_to_amount,required"`
	// Specify the threshold amount for the contract. Each time the contract's prepaid
	// balance lowers to this amount, a threshold charge will be initiated.
	ThresholdAmount float64 `json:"threshold_amount,required"`
	// If provided, the threshold, recharge-to amount, and the resulting threshold
	// commit amount will be in terms of this credit type instead of the fiat currency.
	CustomCreditTypeID string                                                                   `json:"custom_credit_type_id" format:"uuid"`
	JSON               v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfiguration]
type v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON struct {
	Commit             apijson.Field
	IsEnabled          apijson.Field
	PaymentGateConfig  apijson.Field
	RechargeToAmount   apijson.Field
	ThresholdAmount    apijson.Field
	CustomCreditTypeID apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID string `json:"product_id,required"`
	// Which products the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Which tags the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags []string `json:"applicable_product_tags"`
	Description           string   `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string `json:"name"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers []V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier `json:"specifiers"`
	JSON       v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON        `json:"-"`
}

// v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit]
type v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON struct {
	ProductID             apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	Description           apijson.Field
	Name                  apijson.Field
	Specifiers            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                                                `json:"product_tags"`
	JSON        v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier]
type v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig]
type v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                          `json:"tax_name"`
	JSON    v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                                     `json:"invoice_metadata"`
	JSON            v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractGetResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentProfessionalService struct {
	ID string `json:"id,required" format:"uuid"`
	// Maximum amount for the term.
	MaxAmount float64 `json:"max_amount,required"`
	ProductID string  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity float64 `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    float64           `json:"unit_price,required"`
	CustomFields map[string]string `json:"custom_fields"`
	Description  string            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                  `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataCurrentProfessionalServiceJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentProfessionalServiceJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentProfessionalService]
type v1ContractGetResponseDataCurrentProfessionalServiceJSON struct {
	ID                   apijson.Field
	MaxAmount            apijson.Field
	ProductID            apijson.Field
	Quantity             apijson.Field
	UnitPrice            apijson.Field
	CustomFields         apijson.Field
	Description          apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentProfessionalService) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentProfessionalServiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCommit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractGetResponseDataCurrentRecurringCommitsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractGetResponseDataCurrentRecurringCommitsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                 `json:"priority,required"`
	Product  V1ContractGetResponseDataCurrentRecurringCommitsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractGetResponseDataCurrentRecurringCommitsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                 `json:"applicable_product_tags"`
	Contract              V1ContractGetResponseDataCurrentRecurringCommitsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The amount the customer should be billed for the commit. Not required.
	InvoiceAmount V1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmount `json:"invoice_amount"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractGetResponseDataCurrentRecurringCommitsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataCurrentRecurringCommitsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractGetResponseDataCurrentRecurringCommitJSON                `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentRecurringCommit]
type v1ContractGetResponseDataCurrentRecurringCommitJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	InvoiceAmount          apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractGetResponseDataCurrentRecurringCommitsAccessAmount struct {
	CreditTypeID string                                                           `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                          `json:"unit_price,required"`
	Quantity     float64                                                          `json:"quantity"`
	JSON         v1ContractGetResponseDataCurrentRecurringCommitsAccessAmountJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsAccessAmount]
type v1ContractGetResponseDataCurrentRecurringCommitsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractGetResponseDataCurrentRecurringCommitsCommitDuration struct {
	Value float64                                                            `json:"value,required"`
	Unit  V1ContractGetResponseDataCurrentRecurringCommitsCommitDurationUnit `json:"unit"`
	JSON  v1ContractGetResponseDataCurrentRecurringCommitsCommitDurationJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsCommitDuration]
type v1ContractGetResponseDataCurrentRecurringCommitsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCommitsCommitDurationUnit string

const (
	V1ContractGetResponseDataCurrentRecurringCommitsCommitDurationUnitPeriods V1ContractGetResponseDataCurrentRecurringCommitsCommitDurationUnit = "PERIODS"
)

func (r V1ContractGetResponseDataCurrentRecurringCommitsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCommitsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCommitsProduct struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentRecurringCommitsProductJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsProductJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsProduct]
type v1ContractGetResponseDataCurrentRecurringCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractGetResponseDataCurrentRecurringCommitsRateType string

const (
	V1ContractGetResponseDataCurrentRecurringCommitsRateTypeCommitRate V1ContractGetResponseDataCurrentRecurringCommitsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataCurrentRecurringCommitsRateTypeListRate   V1ContractGetResponseDataCurrentRecurringCommitsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataCurrentRecurringCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCommitsRateTypeCommitRate, V1ContractGetResponseDataCurrentRecurringCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCommitsContract struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataCurrentRecurringCommitsContractJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsContractJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsContract]
type v1ContractGetResponseDataCurrentRecurringCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfiguration]
type v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                           `json:"contract_ids"`
	JSON        v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                    `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The amount the customer should be billed for the commit. Not required.
type V1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmount struct {
	CreditTypeID string                                                            `json:"credit_type_id,required" format:"uuid"`
	Quantity     float64                                                           `json:"quantity,required"`
	UnitPrice    float64                                                           `json:"unit_price,required"`
	JSON         v1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmountJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmountJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmount]
type v1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmountJSON struct {
	CreditTypeID apijson.Field
	Quantity     apijson.Field
	UnitPrice    apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsInvoiceAmountJSON) RawJSON() string {
	return r.raw
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractGetResponseDataCurrentRecurringCommitsProration string

const (
	V1ContractGetResponseDataCurrentRecurringCommitsProrationNone         V1ContractGetResponseDataCurrentRecurringCommitsProration = "NONE"
	V1ContractGetResponseDataCurrentRecurringCommitsProrationFirst        V1ContractGetResponseDataCurrentRecurringCommitsProration = "FIRST"
	V1ContractGetResponseDataCurrentRecurringCommitsProrationLast         V1ContractGetResponseDataCurrentRecurringCommitsProration = "LAST"
	V1ContractGetResponseDataCurrentRecurringCommitsProrationFirstAndLast V1ContractGetResponseDataCurrentRecurringCommitsProration = "FIRST_AND_LAST"
)

func (r V1ContractGetResponseDataCurrentRecurringCommitsProration) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCommitsProrationNone, V1ContractGetResponseDataCurrentRecurringCommitsProrationFirst, V1ContractGetResponseDataCurrentRecurringCommitsProrationLast, V1ContractGetResponseDataCurrentRecurringCommitsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequency string

const (
	V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyMonthly   V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequency = "MONTHLY"
	V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyQuarterly V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequency = "QUARTERLY"
	V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyAnnual    V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequency = "ANNUAL"
	V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyWeekly    V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyMonthly, V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyQuarterly, V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyAnnual, V1ContractGetResponseDataCurrentRecurringCommitsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                      `json:"product_tags"`
	JSON        v1ContractGetResponseDataCurrentRecurringCommitsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsSpecifier]
type v1ContractGetResponseDataCurrentRecurringCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfig struct {
	Allocation              V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                    `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfig]
type v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation string

const (
	V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationIndividual V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationPooled     V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationIndividual, V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                          `json:"is_prorated,required"`
	JSON       v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCredit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractGetResponseDataCurrentRecurringCreditsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractGetResponseDataCurrentRecurringCreditsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                 `json:"priority,required"`
	Product  V1ContractGetResponseDataCurrentRecurringCreditsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractGetResponseDataCurrentRecurringCreditsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                 `json:"applicable_product_tags"`
	Contract              V1ContractGetResponseDataCurrentRecurringCreditsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractGetResponseDataCurrentRecurringCreditsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataCurrentRecurringCreditsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractGetResponseDataCurrentRecurringCreditJSON                `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentRecurringCredit]
type v1ContractGetResponseDataCurrentRecurringCreditJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractGetResponseDataCurrentRecurringCreditsAccessAmount struct {
	CreditTypeID string                                                           `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                          `json:"unit_price,required"`
	Quantity     float64                                                          `json:"quantity"`
	JSON         v1ContractGetResponseDataCurrentRecurringCreditsAccessAmountJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsAccessAmount]
type v1ContractGetResponseDataCurrentRecurringCreditsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractGetResponseDataCurrentRecurringCreditsCommitDuration struct {
	Value float64                                                            `json:"value,required"`
	Unit  V1ContractGetResponseDataCurrentRecurringCreditsCommitDurationUnit `json:"unit"`
	JSON  v1ContractGetResponseDataCurrentRecurringCreditsCommitDurationJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsCommitDuration]
type v1ContractGetResponseDataCurrentRecurringCreditsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCreditsCommitDurationUnit string

const (
	V1ContractGetResponseDataCurrentRecurringCreditsCommitDurationUnitPeriods V1ContractGetResponseDataCurrentRecurringCreditsCommitDurationUnit = "PERIODS"
)

func (r V1ContractGetResponseDataCurrentRecurringCreditsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCreditsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCreditsProduct struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractGetResponseDataCurrentRecurringCreditsProductJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsProductJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsProduct]
type v1ContractGetResponseDataCurrentRecurringCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractGetResponseDataCurrentRecurringCreditsRateType string

const (
	V1ContractGetResponseDataCurrentRecurringCreditsRateTypeCommitRate V1ContractGetResponseDataCurrentRecurringCreditsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataCurrentRecurringCreditsRateTypeListRate   V1ContractGetResponseDataCurrentRecurringCreditsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataCurrentRecurringCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCreditsRateTypeCommitRate, V1ContractGetResponseDataCurrentRecurringCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCreditsContract struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataCurrentRecurringCreditsContractJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsContractJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsContract]
type v1ContractGetResponseDataCurrentRecurringCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfiguration]
type v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                           `json:"contract_ids"`
	JSON        v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                    `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractGetResponseDataCurrentRecurringCreditsProration string

const (
	V1ContractGetResponseDataCurrentRecurringCreditsProrationNone         V1ContractGetResponseDataCurrentRecurringCreditsProration = "NONE"
	V1ContractGetResponseDataCurrentRecurringCreditsProrationFirst        V1ContractGetResponseDataCurrentRecurringCreditsProration = "FIRST"
	V1ContractGetResponseDataCurrentRecurringCreditsProrationLast         V1ContractGetResponseDataCurrentRecurringCreditsProration = "LAST"
	V1ContractGetResponseDataCurrentRecurringCreditsProrationFirstAndLast V1ContractGetResponseDataCurrentRecurringCreditsProration = "FIRST_AND_LAST"
)

func (r V1ContractGetResponseDataCurrentRecurringCreditsProration) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCreditsProrationNone, V1ContractGetResponseDataCurrentRecurringCreditsProrationFirst, V1ContractGetResponseDataCurrentRecurringCreditsProrationLast, V1ContractGetResponseDataCurrentRecurringCreditsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequency string

const (
	V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyMonthly   V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequency = "MONTHLY"
	V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyQuarterly V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequency = "QUARTERLY"
	V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyAnnual    V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequency = "ANNUAL"
	V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyWeekly    V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyMonthly, V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyQuarterly, V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyAnnual, V1ContractGetResponseDataCurrentRecurringCreditsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                      `json:"product_tags"`
	JSON        v1ContractGetResponseDataCurrentRecurringCreditsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsSpecifier]
type v1ContractGetResponseDataCurrentRecurringCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfig struct {
	Allocation              V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                    `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfig]
type v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation string

const (
	V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationIndividual V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationPooled     V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationIndividual, V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                          `json:"is_prorated,required"`
	JSON       v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentResellerRoyalty struct {
	Fraction              float64                                                       `json:"fraction,required"`
	NetsuiteResellerID    string                                                        `json:"netsuite_reseller_id,required"`
	ResellerType          V1ContractGetResponseDataCurrentResellerRoyaltiesResellerType `json:"reseller_type,required"`
	StartingAt            time.Time                                                     `json:"starting_at,required" format:"date-time"`
	ApplicableProductIDs  []string                                                      `json:"applicable_product_ids"`
	ApplicableProductTags []string                                                      `json:"applicable_product_tags"`
	AwsAccountNumber      string                                                        `json:"aws_account_number"`
	AwsOfferID            string                                                        `json:"aws_offer_id"`
	AwsPayerReferenceID   string                                                        `json:"aws_payer_reference_id"`
	EndingBefore          time.Time                                                     `json:"ending_before" format:"date-time"`
	GcpAccountID          string                                                        `json:"gcp_account_id"`
	GcpOfferID            string                                                        `json:"gcp_offer_id"`
	ResellerContractValue float64                                                       `json:"reseller_contract_value"`
	JSON                  v1ContractGetResponseDataCurrentResellerRoyaltyJSON           `json:"-"`
}

// v1ContractGetResponseDataCurrentResellerRoyaltyJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentResellerRoyalty]
type v1ContractGetResponseDataCurrentResellerRoyaltyJSON struct {
	Fraction              apijson.Field
	NetsuiteResellerID    apijson.Field
	ResellerType          apijson.Field
	StartingAt            apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	AwsAccountNumber      apijson.Field
	AwsOfferID            apijson.Field
	AwsPayerReferenceID   apijson.Field
	EndingBefore          apijson.Field
	GcpAccountID          apijson.Field
	GcpOfferID            apijson.Field
	ResellerContractValue apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentResellerRoyaltiesResellerType string

const (
	V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeAws           V1ContractGetResponseDataCurrentResellerRoyaltiesResellerType = "AWS"
	V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeAwsProService V1ContractGetResponseDataCurrentResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeGcp           V1ContractGetResponseDataCurrentResellerRoyaltiesResellerType = "GCP"
	V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeGcpProService V1ContractGetResponseDataCurrentResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractGetResponseDataCurrentResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeAws, V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeAwsProService, V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeGcp, V1ContractGetResponseDataCurrentResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

// Determines which scheduled and commit charges to consolidate onto the Contract's
// usage invoice. The charge's `timestamp` must match the usage invoice's
// `ending_before` date for consolidation to occur. This field cannot be modified
// after a Contract has been created. If this field is omitted, charges will appear
// on a separate invoice from usage charges.
type V1ContractGetResponseDataCurrentScheduledChargesOnUsageInvoices string

const (
	V1ContractGetResponseDataCurrentScheduledChargesOnUsageInvoicesAll V1ContractGetResponseDataCurrentScheduledChargesOnUsageInvoices = "ALL"
)

func (r V1ContractGetResponseDataCurrentScheduledChargesOnUsageInvoices) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentScheduledChargesOnUsageInvoicesAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentSpendThresholdConfiguration struct {
	Commit V1ContractGetResponseDataCurrentSpendThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                         `json:"is_enabled,required"`
	PaymentGateConfig V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the threshold amount for the contract. Each time the contract's usage
	// hits this amount, a threshold charge will be initiated.
	ThresholdAmount float64                                                         `json:"threshold_amount,required"`
	JSON            v1ContractGetResponseDataCurrentSpendThresholdConfigurationJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentSpendThresholdConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCurrentSpendThresholdConfiguration]
type v1ContractGetResponseDataCurrentSpendThresholdConfigurationJSON struct {
	Commit            apijson.Field
	IsEnabled         apijson.Field
	PaymentGateConfig apijson.Field
	ThresholdAmount   apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentSpendThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentSpendThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentSpendThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID   string `json:"product_id,required"`
	Description string `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string                                                                `json:"name"`
	JSON v1ContractGetResponseDataCurrentSpendThresholdConfigurationCommitJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentSpendThresholdConfigurationCommitJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentSpendThresholdConfigurationCommit]
type v1ContractGetResponseDataCurrentSpendThresholdConfigurationCommitJSON struct {
	ProductID   apijson.Field
	Description apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentSpendThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentSpendThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig]
type v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                 `json:"tax_name"`
	JSON    v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                            `json:"invoice_metadata"`
	JSON            v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractGetResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractGetResponseDataCurrentUsageFilter struct {
	Current V1ContractGetResponseDataCurrentUsageFilterCurrent  `json:"current,required,nullable"`
	Initial V1ContractGetResponseDataCurrentUsageFilterInitial  `json:"initial,required"`
	Updates []V1ContractGetResponseDataCurrentUsageFilterUpdate `json:"updates,required"`
	JSON    v1ContractGetResponseDataCurrentUsageFilterJSON     `json:"-"`
}

// v1ContractGetResponseDataCurrentUsageFilterJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataCurrentUsageFilter]
type v1ContractGetResponseDataCurrentUsageFilterJSON struct {
	Current     apijson.Field
	Initial     apijson.Field
	Updates     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentUsageFilter) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentUsageFilterJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentUsageFilterCurrent struct {
	GroupKey    string                                                 `json:"group_key,required"`
	GroupValues []string                                               `json:"group_values,required"`
	StartingAt  time.Time                                              `json:"starting_at" format:"date-time"`
	JSON        v1ContractGetResponseDataCurrentUsageFilterCurrentJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentUsageFilterCurrentJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentUsageFilterCurrent]
type v1ContractGetResponseDataCurrentUsageFilterCurrentJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentUsageFilterCurrent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentUsageFilterCurrentJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentUsageFilterInitial struct {
	GroupKey    string                                                 `json:"group_key,required"`
	GroupValues []string                                               `json:"group_values,required"`
	StartingAt  time.Time                                              `json:"starting_at" format:"date-time"`
	JSON        v1ContractGetResponseDataCurrentUsageFilterInitialJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentUsageFilterInitialJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataCurrentUsageFilterInitial]
type v1ContractGetResponseDataCurrentUsageFilterInitialJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentUsageFilterInitial) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentUsageFilterInitialJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCurrentUsageFilterUpdate struct {
	GroupKey    string                                                `json:"group_key,required"`
	GroupValues []string                                              `json:"group_values,required"`
	StartingAt  time.Time                                             `json:"starting_at,required" format:"date-time"`
	JSON        v1ContractGetResponseDataCurrentUsageFilterUpdateJSON `json:"-"`
}

// v1ContractGetResponseDataCurrentUsageFilterUpdateJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataCurrentUsageFilterUpdate]
type v1ContractGetResponseDataCurrentUsageFilterUpdateJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCurrentUsageFilterUpdate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCurrentUsageFilterUpdateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitial struct {
	Commits                []V1ContractGetResponseDataInitialCommit               `json:"commits,required"`
	CreatedAt              time.Time                                              `json:"created_at,required" format:"date-time"`
	CreatedBy              string                                                 `json:"created_by,required"`
	Overrides              []V1ContractGetResponseDataInitialOverride             `json:"overrides,required"`
	ScheduledCharges       []V1ContractGetResponseDataInitialScheduledCharge      `json:"scheduled_charges,required"`
	StartingAt             time.Time                                              `json:"starting_at,required" format:"date-time"`
	Transitions            []V1ContractGetResponseDataInitialTransition           `json:"transitions,required"`
	UsageStatementSchedule V1ContractGetResponseDataInitialUsageStatementSchedule `json:"usage_statement_schedule,required"`
	Credits                []V1ContractGetResponseDataInitialCredit               `json:"credits"`
	// This field's availability is dependent on your client's configuration.
	Discounts    []V1ContractGetResponseDataInitialDiscount `json:"discounts"`
	EndingBefore time.Time                                  `json:"ending_before" format:"date-time"`
	// Either a **parent** configuration with a list of children or a **child**
	// configuration with a single parent.
	HierarchyConfiguration V1ContractGetResponseDataInitialHierarchyConfiguration `json:"hierarchy_configuration"`
	Name                   string                                                 `json:"name"`
	NetPaymentTermsDays    float64                                                `json:"net_payment_terms_days"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID                 string                                                               `json:"netsuite_sales_order_id"`
	PrepaidBalanceThresholdConfiguration V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfiguration `json:"prepaid_balance_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []V1ContractGetResponseDataInitialProfessionalService `json:"professional_services"`
	RateCardID           string                                                `json:"rate_card_id" format:"uuid"`
	RecurringCommits     []V1ContractGetResponseDataInitialRecurringCommit     `json:"recurring_commits"`
	RecurringCredits     []V1ContractGetResponseDataInitialRecurringCredit     `json:"recurring_credits"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []V1ContractGetResponseDataInitialResellerRoyalty `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// Determines which scheduled and commit charges to consolidate onto the Contract's
	// usage invoice. The charge's `timestamp` must match the usage invoice's
	// `ending_before` date for consolidation to occur. This field cannot be modified
	// after a Contract has been created. If this field is omitted, charges will appear
	// on a separate invoice from usage charges.
	ScheduledChargesOnUsageInvoices V1ContractGetResponseDataInitialScheduledChargesOnUsageInvoices `json:"scheduled_charges_on_usage_invoices"`
	SpendThresholdConfiguration     V1ContractGetResponseDataInitialSpendThresholdConfiguration     `json:"spend_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue float64                                     `json:"total_contract_value"`
	UsageFilter        V1ContractGetResponseDataInitialUsageFilter `json:"usage_filter"`
	JSON               v1ContractGetResponseDataInitialJSON        `json:"-"`
}

// v1ContractGetResponseDataInitialJSON contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitial]
type v1ContractGetResponseDataInitialJSON struct {
	Commits                              apijson.Field
	CreatedAt                            apijson.Field
	CreatedBy                            apijson.Field
	Overrides                            apijson.Field
	ScheduledCharges                     apijson.Field
	StartingAt                           apijson.Field
	Transitions                          apijson.Field
	UsageStatementSchedule               apijson.Field
	Credits                              apijson.Field
	Discounts                            apijson.Field
	EndingBefore                         apijson.Field
	HierarchyConfiguration               apijson.Field
	Name                                 apijson.Field
	NetPaymentTermsDays                  apijson.Field
	NetsuiteSalesOrderID                 apijson.Field
	PrepaidBalanceThresholdConfiguration apijson.Field
	ProfessionalServices                 apijson.Field
	RateCardID                           apijson.Field
	RecurringCommits                     apijson.Field
	RecurringCredits                     apijson.Field
	ResellerRoyalties                    apijson.Field
	SalesforceOpportunityID              apijson.Field
	ScheduledChargesOnUsageInvoices      apijson.Field
	SpendThresholdConfiguration          apijson.Field
	TotalContractValue                   apijson.Field
	UsageFilter                          apijson.Field
	raw                                  string
	ExtraFields                          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitial) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommit struct {
	ID      string                                         `json:"id,required" format:"uuid"`
	Product V1ContractGetResponseDataInitialCommitsProduct `json:"product,required"`
	Type    V1ContractGetResponseDataInitialCommitsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits purposed with
	// this commit.
	AccessSchedule V1ContractGetResponseDataInitialCommitsAccessSchedule `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount                float64  `json:"amount"`
	ApplicableContractIDs []string `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                         `json:"balance"`
	Contract     V1ContractGetResponseDataInitialCommitsContract `json:"contract"`
	CustomFields map[string]string                               `json:"custom_fields"`
	Description  string                                          `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataInitialCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The contract that this commit will be billed on.
	InvoiceContract V1ContractGetResponseDataInitialCommitsInvoiceContract `json:"invoice_contract"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule V1ContractGetResponseDataInitialCommitsInvoiceSchedule `json:"invoice_schedule"`
	// A list of ordered events that impact the balance of a commit. For example, an
	// invoice deduction or a rollover.
	Ledger []V1ContractGetResponseDataInitialCommitsLedger `json:"ledger"`
	Name   string                                          `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority         float64                                               `json:"priority"`
	RateType         V1ContractGetResponseDataInitialCommitsRateType       `json:"rate_type"`
	RolledOverFrom   V1ContractGetResponseDataInitialCommitsRolledOverFrom `json:"rolled_over_from"`
	RolloverFraction float64                                               `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataInitialCommitsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                     `json:"uniqueness_key"`
	JSON          v1ContractGetResponseDataInitialCommitJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataInitialCommit]
type v1ContractGetResponseDataInitialCommitJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsProduct struct {
	ID   string                                             `json:"id,required" format:"uuid"`
	Name string                                             `json:"name,required"`
	JSON v1ContractGetResponseDataInitialCommitsProductJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialCommitsProduct]
type v1ContractGetResponseDataInitialCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsType string

const (
	V1ContractGetResponseDataInitialCommitsTypePrepaid  V1ContractGetResponseDataInitialCommitsType = "PREPAID"
	V1ContractGetResponseDataInitialCommitsTypePostpaid V1ContractGetResponseDataInitialCommitsType = "POSTPAID"
)

func (r V1ContractGetResponseDataInitialCommitsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCommitsTypePrepaid, V1ContractGetResponseDataInitialCommitsTypePostpaid:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits purposed with
// this commit.
type V1ContractGetResponseDataInitialCommitsAccessSchedule struct {
	ScheduleItems []V1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractGetResponseDataInitialCommitsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractGetResponseDataInitialCommitsAccessScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialCommitsAccessSchedule]
type v1ContractGetResponseDataInitialCommitsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItem struct {
	ID           string                                                                `json:"id,required" format:"uuid"`
	Amount       float64                                                               `json:"amount,required"`
	EndingBefore time.Time                                                             `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                             `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItem]
type v1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsAccessScheduleCreditType struct {
	ID   string                                                              `json:"id,required" format:"uuid"`
	Name string                                                              `json:"name,required"`
	JSON v1ContractGetResponseDataInitialCommitsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsAccessScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsAccessScheduleCreditType]
type v1ContractGetResponseDataInitialCommitsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsContract struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataInitialCommitsContractJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsContractJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialCommitsContract]
type v1ContractGetResponseDataInitialCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for commit hierarchy access control
type V1ContractGetResponseDataInitialCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataInitialCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsHierarchyConfiguration]
type v1ContractGetResponseDataInitialCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                  `json:"contract_ids"`
	JSON        v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                           `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The contract that this commit will be billed on.
type V1ContractGetResponseDataInitialCommitsInvoiceContract struct {
	ID   string                                                     `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataInitialCommitsInvoiceContractJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsInvoiceContractJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialCommitsInvoiceContract]
type v1ContractGetResponseDataInitialCommitsInvoiceContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsInvoiceContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsInvoiceContractJSON) RawJSON() string {
	return r.raw
}

// The schedule that the customer will be invoiced for this commit.
type V1ContractGetResponseDataInitialCommitsInvoiceSchedule struct {
	CreditType V1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                 `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataInitialCommitsInvoiceScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsInvoiceScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialCommitsInvoiceSchedule]
type v1ContractGetResponseDataInitialCommitsInvoiceScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsInvoiceSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsInvoiceScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditType]
type v1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItem struct {
	ID        string                                                                 `json:"id,required" format:"uuid"`
	Amount    float64                                                                `json:"amount,required"`
	Quantity  float64                                                                `json:"quantity,required"`
	Timestamp time.Time                                                              `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                `json:"unit_price,required"`
	InvoiceID string                                                                 `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItem]
type v1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsLedger struct {
	Amount        float64                                           `json:"amount,required"`
	Timestamp     time.Time                                         `json:"timestamp,required" format:"date-time"`
	Type          V1ContractGetResponseDataInitialCommitsLedgerType `json:"type,required"`
	ContractID    string                                            `json:"contract_id" format:"uuid"`
	InvoiceID     string                                            `json:"invoice_id" format:"uuid"`
	NewContractID string                                            `json:"new_contract_id" format:"uuid"`
	Reason        string                                            `json:"reason"`
	SegmentID     string                                            `json:"segment_id" format:"uuid"`
	JSON          v1ContractGetResponseDataInitialCommitsLedgerJSON `json:"-"`
	union         V1ContractGetResponseDataInitialCommitsLedgerUnion
}

// v1ContractGetResponseDataInitialCommitsLedgerJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataInitialCommitsLedger]
type v1ContractGetResponseDataInitialCommitsLedgerJSON struct {
	Amount        apijson.Field
	Timestamp     apijson.Field
	Type          apijson.Field
	ContractID    apijson.Field
	InvoiceID     apijson.Field
	NewContractID apijson.Field
	Reason        apijson.Field
	SegmentID     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r v1ContractGetResponseDataInitialCommitsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataInitialCommitsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataInitialCommitsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataInitialCommitsLedgerUnion] interface
// which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject].
func (r V1ContractGetResponseDataInitialCommitsLedger) AsUnion() V1ContractGetResponseDataInitialCommitsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject],
// [V1ContractGetResponseDataInitialCommitsLedgerObject] or
// [V1ContractGetResponseDataInitialCommitsLedgerObject].
type V1ContractGetResponseDataInitialCommitsLedgerUnion interface {
	implementsV1ContractGetResponseDataInitialCommitsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataInitialCommitsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCommitsLedgerObject{}),
		},
	)
}

type V1ContractGetResponseDataInitialCommitsLedgerObject struct {
	Amount    float64                                                 `json:"amount,required"`
	SegmentID string                                                  `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                               `json:"timestamp,required" format:"date-time"`
	Type      V1ContractGetResponseDataInitialCommitsLedgerObjectType `json:"type,required"`
	JSON      v1ContractGetResponseDataInitialCommitsLedgerObjectJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialCommitsLedgerObject]
type v1ContractGetResponseDataInitialCommitsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialCommitsLedgerObject) implementsV1ContractGetResponseDataInitialCommitsLedger() {
}

type V1ContractGetResponseDataInitialCommitsLedgerObjectType string

const (
	V1ContractGetResponseDataInitialCommitsLedgerObjectTypePrepaidCommitSegmentStart V1ContractGetResponseDataInitialCommitsLedgerObjectType = "PREPAID_COMMIT_SEGMENT_START"
)

func (r V1ContractGetResponseDataInitialCommitsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCommitsLedgerObjectTypePrepaidCommitSegmentStart:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCommitsLedgerType string

const (
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitSegmentStart               V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_SEGMENT_START"
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction  V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitRollover                   V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_ROLLOVER"
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitExpiration                 V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_EXPIRATION"
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitCanceled                   V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_CANCELED"
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitCredited                   V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_CREDITED"
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitSeatBasedAdjustment        V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"
	V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitInitialBalance            V1ContractGetResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_INITIAL_BALANCE"
	V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction V1ContractGetResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitRollover                  V1ContractGetResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_ROLLOVER"
	V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitTrueup                    V1ContractGetResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_TRUEUP"
	V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitManual                     V1ContractGetResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_MANUAL"
	V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitManual                    V1ContractGetResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_MANUAL"
	V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitExpiration                V1ContractGetResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_EXPIRATION"
)

func (r V1ContractGetResponseDataInitialCommitsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitSegmentStart, V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction, V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitRollover, V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitExpiration, V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitCanceled, V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitCredited, V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitSeatBasedAdjustment, V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitInitialBalance, V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction, V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitRollover, V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitTrueup, V1ContractGetResponseDataInitialCommitsLedgerTypePrepaidCommitManual, V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitManual, V1ContractGetResponseDataInitialCommitsLedgerTypePostpaidCommitExpiration:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCommitsRateType string

const (
	V1ContractGetResponseDataInitialCommitsRateTypeCommitRate V1ContractGetResponseDataInitialCommitsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataInitialCommitsRateTypeListRate   V1ContractGetResponseDataInitialCommitsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataInitialCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCommitsRateTypeCommitRate, V1ContractGetResponseDataInitialCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCommitsRolledOverFrom struct {
	CommitID   string                                                    `json:"commit_id,required" format:"uuid"`
	ContractID string                                                    `json:"contract_id,required" format:"uuid"`
	JSON       v1ContractGetResponseDataInitialCommitsRolledOverFromJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsRolledOverFromJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialCommitsRolledOverFrom]
type v1ContractGetResponseDataInitialCommitsRolledOverFromJSON struct {
	CommitID    apijson.Field
	ContractID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsRolledOverFrom) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsRolledOverFromJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                             `json:"product_tags"`
	JSON        v1ContractGetResponseDataInitialCommitsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCommitsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialCommitsSpecifier]
type v1ContractGetResponseDataInitialCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverride struct {
	ID                    string                                              `json:"id,required" format:"uuid"`
	StartingAt            time.Time                                           `json:"starting_at,required" format:"date-time"`
	ApplicableProductTags []string                                            `json:"applicable_product_tags"`
	CreditType            V1ContractGetResponseDataInitialOverridesCreditType `json:"credit_type"`
	EndingBefore          time.Time                                           `json:"ending_before" format:"date-time"`
	Entitled              bool                                                `json:"entitled"`
	IsCommitSpecific      bool                                                `json:"is_commit_specific"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated         bool                                                         `json:"is_prorated"`
	Multiplier         float64                                                      `json:"multiplier"`
	OverrideSpecifiers []V1ContractGetResponseDataInitialOverridesOverrideSpecifier `json:"override_specifiers"`
	OverrideTiers      []V1ContractGetResponseDataInitialOverridesOverrideTier      `json:"override_tiers"`
	OverwriteRate      V1ContractGetResponseDataInitialOverridesOverwriteRate       `json:"overwrite_rate"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price    float64                                          `json:"price"`
	Priority float64                                          `json:"priority"`
	Product  V1ContractGetResponseDataInitialOverridesProduct `json:"product"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64                                           `json:"quantity"`
	RateType V1ContractGetResponseDataInitialOverridesRateType `json:"rate_type"`
	Target   V1ContractGetResponseDataInitialOverridesTarget   `json:"target"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetResponseDataInitialOverridesTier `json:"tiers"`
	Type  V1ContractGetResponseDataInitialOverridesType   `json:"type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	Value map[string]interface{}                       `json:"value"`
	JSON  v1ContractGetResponseDataInitialOverrideJSON `json:"-"`
}

// v1ContractGetResponseDataInitialOverrideJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataInitialOverride]
type v1ContractGetResponseDataInitialOverrideJSON struct {
	ID                    apijson.Field
	StartingAt            apijson.Field
	ApplicableProductTags apijson.Field
	CreditType            apijson.Field
	EndingBefore          apijson.Field
	Entitled              apijson.Field
	IsCommitSpecific      apijson.Field
	IsProrated            apijson.Field
	Multiplier            apijson.Field
	OverrideSpecifiers    apijson.Field
	OverrideTiers         apijson.Field
	OverwriteRate         apijson.Field
	Price                 apijson.Field
	Priority              apijson.Field
	Product               apijson.Field
	Quantity              apijson.Field
	RateType              apijson.Field
	Target                apijson.Field
	Tiers                 apijson.Field
	Type                  apijson.Field
	Value                 apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverride) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverrideJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesCreditType struct {
	ID   string                                                  `json:"id,required" format:"uuid"`
	Name string                                                  `json:"name,required"`
	JSON v1ContractGetResponseDataInitialOverridesCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesCreditTypeJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialOverridesCreditType]
type v1ContractGetResponseDataInitialOverridesCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesOverrideSpecifier struct {
	BillingFrequency        V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequency `json:"billing_frequency"`
	CommitIDs               []string                                                                    `json:"commit_ids"`
	PresentationGroupValues map[string]string                                                           `json:"presentation_group_values"`
	PricingGroupValues      map[string]string                                                           `json:"pricing_group_values"`
	ProductID               string                                                                      `json:"product_id" format:"uuid"`
	ProductTags             []string                                                                    `json:"product_tags"`
	RecurringCommitIDs      []string                                                                    `json:"recurring_commit_ids"`
	RecurringCreditIDs      []string                                                                    `json:"recurring_credit_ids"`
	JSON                    v1ContractGetResponseDataInitialOverridesOverrideSpecifierJSON              `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesOverrideSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialOverridesOverrideSpecifier]
type v1ContractGetResponseDataInitialOverridesOverrideSpecifierJSON struct {
	BillingFrequency        apijson.Field
	CommitIDs               apijson.Field
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	RecurringCommitIDs      apijson.Field
	RecurringCreditIDs      apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesOverrideSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesOverrideSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractGetResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialOverridesOverrideTier struct {
	Multiplier float64                                                   `json:"multiplier,required"`
	Size       float64                                                   `json:"size"`
	JSON       v1ContractGetResponseDataInitialOverridesOverrideTierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesOverrideTierJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialOverridesOverrideTier]
type v1ContractGetResponseDataInitialOverridesOverrideTierJSON struct {
	Multiplier  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesOverrideTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesOverrideTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesOverwriteRate struct {
	RateType   V1ContractGetResponseDataInitialOverridesOverwriteRateRateType   `json:"rate_type,required"`
	CreditType V1ContractGetResponseDataInitialOverridesOverwriteRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetResponseDataInitialOverridesOverwriteRateTier `json:"tiers"`
	JSON  v1ContractGetResponseDataInitialOverridesOverwriteRateJSON   `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesOverwriteRateJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialOverridesOverwriteRate]
type v1ContractGetResponseDataInitialOverridesOverwriteRateJSON struct {
	RateType    apijson.Field
	CreditType  apijson.Field
	CustomRate  apijson.Field
	IsProrated  apijson.Field
	Price       apijson.Field
	Quantity    apijson.Field
	Tiers       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesOverwriteRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesOverwriteRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesOverwriteRateRateType string

const (
	V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeFlat         V1ContractGetResponseDataInitialOverridesOverwriteRateRateType = "FLAT"
	V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypePercentage   V1ContractGetResponseDataInitialOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeSubscription V1ContractGetResponseDataInitialOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeTiered       V1ContractGetResponseDataInitialOverridesOverwriteRateRateType = "TIERED"
	V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeCustom       V1ContractGetResponseDataInitialOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractGetResponseDataInitialOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeFlat, V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypePercentage, V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeSubscription, V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeTiered, V1ContractGetResponseDataInitialOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialOverridesOverwriteRateCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractGetResponseDataInitialOverridesOverwriteRateCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesOverwriteRateCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialOverridesOverwriteRateCreditType]
type v1ContractGetResponseDataInitialOverridesOverwriteRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesOverwriteRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesOverwriteRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesOverwriteRateTier struct {
	Price float64                                                        `json:"price,required"`
	Size  float64                                                        `json:"size"`
	JSON  v1ContractGetResponseDataInitialOverridesOverwriteRateTierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesOverwriteRateTierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialOverridesOverwriteRateTier]
type v1ContractGetResponseDataInitialOverridesOverwriteRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesOverwriteRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesOverwriteRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesProduct struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	Name string                                               `json:"name,required"`
	JSON v1ContractGetResponseDataInitialOverridesProductJSON `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialOverridesProduct]
type v1ContractGetResponseDataInitialOverridesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesRateType string

const (
	V1ContractGetResponseDataInitialOverridesRateTypeFlat         V1ContractGetResponseDataInitialOverridesRateType = "FLAT"
	V1ContractGetResponseDataInitialOverridesRateTypePercentage   V1ContractGetResponseDataInitialOverridesRateType = "PERCENTAGE"
	V1ContractGetResponseDataInitialOverridesRateTypeSubscription V1ContractGetResponseDataInitialOverridesRateType = "SUBSCRIPTION"
	V1ContractGetResponseDataInitialOverridesRateTypeTiered       V1ContractGetResponseDataInitialOverridesRateType = "TIERED"
	V1ContractGetResponseDataInitialOverridesRateTypeCustom       V1ContractGetResponseDataInitialOverridesRateType = "CUSTOM"
)

func (r V1ContractGetResponseDataInitialOverridesRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialOverridesRateTypeFlat, V1ContractGetResponseDataInitialOverridesRateTypePercentage, V1ContractGetResponseDataInitialOverridesRateTypeSubscription, V1ContractGetResponseDataInitialOverridesRateTypeTiered, V1ContractGetResponseDataInitialOverridesRateTypeCustom:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialOverridesTarget string

const (
	V1ContractGetResponseDataInitialOverridesTargetCommitRate V1ContractGetResponseDataInitialOverridesTarget = "COMMIT_RATE"
	V1ContractGetResponseDataInitialOverridesTargetListRate   V1ContractGetResponseDataInitialOverridesTarget = "LIST_RATE"
)

func (r V1ContractGetResponseDataInitialOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialOverridesTargetCommitRate, V1ContractGetResponseDataInitialOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialOverridesTier struct {
	Price float64                                           `json:"price,required"`
	Size  float64                                           `json:"size"`
	JSON  v1ContractGetResponseDataInitialOverridesTierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialOverridesTierJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataInitialOverridesTier]
type v1ContractGetResponseDataInitialOverridesTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialOverridesTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialOverridesTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialOverridesType string

const (
	V1ContractGetResponseDataInitialOverridesTypeOverwrite  V1ContractGetResponseDataInitialOverridesType = "OVERWRITE"
	V1ContractGetResponseDataInitialOverridesTypeMultiplier V1ContractGetResponseDataInitialOverridesType = "MULTIPLIER"
	V1ContractGetResponseDataInitialOverridesTypeTiered     V1ContractGetResponseDataInitialOverridesType = "TIERED"
)

func (r V1ContractGetResponseDataInitialOverridesType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialOverridesTypeOverwrite, V1ContractGetResponseDataInitialOverridesTypeMultiplier, V1ContractGetResponseDataInitialOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialScheduledCharge struct {
	ID           string                                                   `json:"id,required" format:"uuid"`
	Product      V1ContractGetResponseDataInitialScheduledChargesProduct  `json:"product,required"`
	Schedule     V1ContractGetResponseDataInitialScheduledChargesSchedule `json:"schedule,required"`
	ArchivedAt   time.Time                                                `json:"archived_at" format:"date-time"`
	CustomFields map[string]string                                        `json:"custom_fields"`
	// displayed on invoices
	Name string `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                              `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataInitialScheduledChargeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialScheduledChargeJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialScheduledCharge]
type v1ContractGetResponseDataInitialScheduledChargeJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	ArchivedAt           apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialScheduledCharge) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialScheduledChargeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialScheduledChargesProduct struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractGetResponseDataInitialScheduledChargesProductJSON `json:"-"`
}

// v1ContractGetResponseDataInitialScheduledChargesProductJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialScheduledChargesProduct]
type v1ContractGetResponseDataInitialScheduledChargesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialScheduledChargesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialScheduledChargesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialScheduledChargesSchedule struct {
	CreditType V1ContractGetResponseDataInitialScheduledChargesScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                   `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataInitialScheduledChargesScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataInitialScheduledChargesScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialScheduledChargesSchedule]
type v1ContractGetResponseDataInitialScheduledChargesScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialScheduledChargesSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialScheduledChargesScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialScheduledChargesScheduleCreditType struct {
	ID   string                                                                 `json:"id,required" format:"uuid"`
	Name string                                                                 `json:"name,required"`
	JSON v1ContractGetResponseDataInitialScheduledChargesScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialScheduledChargesScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialScheduledChargesScheduleCreditType]
type v1ContractGetResponseDataInitialScheduledChargesScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialScheduledChargesScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialScheduledChargesScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItem struct {
	ID        string                                                                   `json:"id,required" format:"uuid"`
	Amount    float64                                                                  `json:"amount,required"`
	Quantity  float64                                                                  `json:"quantity,required"`
	Timestamp time.Time                                                                `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                  `json:"unit_price,required"`
	InvoiceID string                                                                   `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItem]
type v1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialScheduledChargesScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialTransition struct {
	FromContractID string                                          `json:"from_contract_id,required" format:"uuid"`
	ToContractID   string                                          `json:"to_contract_id,required" format:"uuid"`
	Type           V1ContractGetResponseDataInitialTransitionsType `json:"type,required"`
	JSON           v1ContractGetResponseDataInitialTransitionJSON  `json:"-"`
}

// v1ContractGetResponseDataInitialTransitionJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataInitialTransition]
type v1ContractGetResponseDataInitialTransitionJSON struct {
	FromContractID apijson.Field
	ToContractID   apijson.Field
	Type           apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialTransition) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialTransitionJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialTransitionsType string

const (
	V1ContractGetResponseDataInitialTransitionsTypeSupersede V1ContractGetResponseDataInitialTransitionsType = "SUPERSEDE"
	V1ContractGetResponseDataInitialTransitionsTypeRenewal   V1ContractGetResponseDataInitialTransitionsType = "RENEWAL"
)

func (r V1ContractGetResponseDataInitialTransitionsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialTransitionsTypeSupersede, V1ContractGetResponseDataInitialTransitionsTypeRenewal:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialUsageStatementSchedule struct {
	// Contract usage statements follow a selected cadence based on this date.
	BillingAnchorDate time.Time                                                       `json:"billing_anchor_date,required" format:"date-time"`
	Frequency         V1ContractGetResponseDataInitialUsageStatementScheduleFrequency `json:"frequency,required"`
	JSON              v1ContractGetResponseDataInitialUsageStatementScheduleJSON      `json:"-"`
}

// v1ContractGetResponseDataInitialUsageStatementScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialUsageStatementSchedule]
type v1ContractGetResponseDataInitialUsageStatementScheduleJSON struct {
	BillingAnchorDate apijson.Field
	Frequency         apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialUsageStatementSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialUsageStatementScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialUsageStatementScheduleFrequency string

const (
	V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyMonthly   V1ContractGetResponseDataInitialUsageStatementScheduleFrequency = "MONTHLY"
	V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyQuarterly V1ContractGetResponseDataInitialUsageStatementScheduleFrequency = "QUARTERLY"
	V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyAnnual    V1ContractGetResponseDataInitialUsageStatementScheduleFrequency = "ANNUAL"
	V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyWeekly    V1ContractGetResponseDataInitialUsageStatementScheduleFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataInitialUsageStatementScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyMonthly, V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyQuarterly, V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyAnnual, V1ContractGetResponseDataInitialUsageStatementScheduleFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCredit struct {
	ID      string                                         `json:"id,required" format:"uuid"`
	Product V1ContractGetResponseDataInitialCreditsProduct `json:"product,required"`
	Type    V1ContractGetResponseDataInitialCreditsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        V1ContractGetResponseDataInitialCreditsAccessSchedule `json:"access_schedule"`
	ApplicableContractIDs []string                                              `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string                                              `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string                                              `json:"applicable_product_tags"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                         `json:"balance"`
	Contract     V1ContractGetResponseDataInitialCreditsContract `json:"contract"`
	CustomFields map[string]string                               `json:"custom_fields"`
	Description  string                                          `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataInitialCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// A list of ordered events that impact the balance of a credit. For example, an
	// invoice deduction or an expiration.
	Ledger []V1ContractGetResponseDataInitialCreditsLedger `json:"ledger"`
	Name   string                                          `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority float64                                         `json:"priority"`
	RateType V1ContractGetResponseDataInitialCreditsRateType `json:"rate_type"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataInitialCreditsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                     `json:"uniqueness_key"`
	JSON          v1ContractGetResponseDataInitialCreditJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataInitialCredit]
type v1ContractGetResponseDataInitialCreditJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCreditsProduct struct {
	ID   string                                             `json:"id,required" format:"uuid"`
	Name string                                             `json:"name,required"`
	JSON v1ContractGetResponseDataInitialCreditsProductJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialCreditsProduct]
type v1ContractGetResponseDataInitialCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCreditsType string

const (
	V1ContractGetResponseDataInitialCreditsTypeCredit V1ContractGetResponseDataInitialCreditsType = "CREDIT"
)

func (r V1ContractGetResponseDataInitialCreditsType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCreditsTypeCredit:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits.
type V1ContractGetResponseDataInitialCreditsAccessSchedule struct {
	ScheduleItems []V1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractGetResponseDataInitialCreditsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractGetResponseDataInitialCreditsAccessScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialCreditsAccessSchedule]
type v1ContractGetResponseDataInitialCreditsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItem struct {
	ID           string                                                                `json:"id,required" format:"uuid"`
	Amount       float64                                                               `json:"amount,required"`
	EndingBefore time.Time                                                             `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                             `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItem]
type v1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCreditsAccessScheduleCreditType struct {
	ID   string                                                              `json:"id,required" format:"uuid"`
	Name string                                                              `json:"name,required"`
	JSON v1ContractGetResponseDataInitialCreditsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsAccessScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialCreditsAccessScheduleCreditType]
type v1ContractGetResponseDataInitialCreditsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCreditsContract struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataInitialCreditsContractJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsContractJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialCreditsContract]
type v1ContractGetResponseDataInitialCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for credit hierarchy access control
type V1ContractGetResponseDataInitialCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataInitialCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialCreditsHierarchyConfiguration]
type v1ContractGetResponseDataInitialCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                  `json:"contract_ids"`
	JSON        v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                           `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCreditsLedger struct {
	Amount     float64                                           `json:"amount,required"`
	Timestamp  time.Time                                         `json:"timestamp,required" format:"date-time"`
	Type       V1ContractGetResponseDataInitialCreditsLedgerType `json:"type,required"`
	ContractID string                                            `json:"contract_id" format:"uuid"`
	InvoiceID  string                                            `json:"invoice_id" format:"uuid"`
	Reason     string                                            `json:"reason"`
	SegmentID  string                                            `json:"segment_id" format:"uuid"`
	JSON       v1ContractGetResponseDataInitialCreditsLedgerJSON `json:"-"`
	union      V1ContractGetResponseDataInitialCreditsLedgerUnion
}

// v1ContractGetResponseDataInitialCreditsLedgerJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataInitialCreditsLedger]
type v1ContractGetResponseDataInitialCreditsLedgerJSON struct {
	Amount      apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	ContractID  apijson.Field
	InvoiceID   apijson.Field
	Reason      apijson.Field
	SegmentID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataInitialCreditsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataInitialCreditsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataInitialCreditsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataInitialCreditsLedgerUnion] interface
// which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject].
func (r V1ContractGetResponseDataInitialCreditsLedger) AsUnion() V1ContractGetResponseDataInitialCreditsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject],
// [V1ContractGetResponseDataInitialCreditsLedgerObject] or
// [V1ContractGetResponseDataInitialCreditsLedgerObject].
type V1ContractGetResponseDataInitialCreditsLedgerUnion interface {
	implementsV1ContractGetResponseDataInitialCreditsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataInitialCreditsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialCreditsLedgerObject{}),
		},
	)
}

type V1ContractGetResponseDataInitialCreditsLedgerObject struct {
	Amount    float64                                                 `json:"amount,required"`
	SegmentID string                                                  `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                               `json:"timestamp,required" format:"date-time"`
	Type      V1ContractGetResponseDataInitialCreditsLedgerObjectType `json:"type,required"`
	JSON      v1ContractGetResponseDataInitialCreditsLedgerObjectJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialCreditsLedgerObject]
type v1ContractGetResponseDataInitialCreditsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialCreditsLedgerObject) implementsV1ContractGetResponseDataInitialCreditsLedger() {
}

type V1ContractGetResponseDataInitialCreditsLedgerObjectType string

const (
	V1ContractGetResponseDataInitialCreditsLedgerObjectTypeCreditSegmentStart V1ContractGetResponseDataInitialCreditsLedgerObjectType = "CREDIT_SEGMENT_START"
)

func (r V1ContractGetResponseDataInitialCreditsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCreditsLedgerObjectTypeCreditSegmentStart:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCreditsLedgerType string

const (
	V1ContractGetResponseDataInitialCreditsLedgerTypeCreditSegmentStart              V1ContractGetResponseDataInitialCreditsLedgerType = "CREDIT_SEGMENT_START"
	V1ContractGetResponseDataInitialCreditsLedgerTypeCreditAutomatedInvoiceDeduction V1ContractGetResponseDataInitialCreditsLedgerType = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractGetResponseDataInitialCreditsLedgerTypeCreditExpiration                V1ContractGetResponseDataInitialCreditsLedgerType = "CREDIT_EXPIRATION"
	V1ContractGetResponseDataInitialCreditsLedgerTypeCreditCanceled                  V1ContractGetResponseDataInitialCreditsLedgerType = "CREDIT_CANCELED"
	V1ContractGetResponseDataInitialCreditsLedgerTypeCreditCredited                  V1ContractGetResponseDataInitialCreditsLedgerType = "CREDIT_CREDITED"
	V1ContractGetResponseDataInitialCreditsLedgerTypeCreditManual                    V1ContractGetResponseDataInitialCreditsLedgerType = "CREDIT_MANUAL"
	V1ContractGetResponseDataInitialCreditsLedgerTypeCreditSeatBasedAdjustment       V1ContractGetResponseDataInitialCreditsLedgerType = "CREDIT_SEAT_BASED_ADJUSTMENT"
)

func (r V1ContractGetResponseDataInitialCreditsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCreditsLedgerTypeCreditSegmentStart, V1ContractGetResponseDataInitialCreditsLedgerTypeCreditAutomatedInvoiceDeduction, V1ContractGetResponseDataInitialCreditsLedgerTypeCreditExpiration, V1ContractGetResponseDataInitialCreditsLedgerTypeCreditCanceled, V1ContractGetResponseDataInitialCreditsLedgerTypeCreditCredited, V1ContractGetResponseDataInitialCreditsLedgerTypeCreditManual, V1ContractGetResponseDataInitialCreditsLedgerTypeCreditSeatBasedAdjustment:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCreditsRateType string

const (
	V1ContractGetResponseDataInitialCreditsRateTypeCommitRate V1ContractGetResponseDataInitialCreditsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataInitialCreditsRateTypeListRate   V1ContractGetResponseDataInitialCreditsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataInitialCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialCreditsRateTypeCommitRate, V1ContractGetResponseDataInitialCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                             `json:"product_tags"`
	JSON        v1ContractGetResponseDataInitialCreditsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialCreditsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialCreditsSpecifier]
type v1ContractGetResponseDataInitialCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialDiscount struct {
	ID           string                                            `json:"id,required" format:"uuid"`
	Product      V1ContractGetResponseDataInitialDiscountsProduct  `json:"product,required"`
	Schedule     V1ContractGetResponseDataInitialDiscountsSchedule `json:"schedule,required"`
	CustomFields map[string]string                                 `json:"custom_fields"`
	Name         string                                            `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                       `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataInitialDiscountJSON `json:"-"`
}

// v1ContractGetResponseDataInitialDiscountJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataInitialDiscount]
type v1ContractGetResponseDataInitialDiscountJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialDiscount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialDiscountJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialDiscountsProduct struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	Name string                                               `json:"name,required"`
	JSON v1ContractGetResponseDataInitialDiscountsProductJSON `json:"-"`
}

// v1ContractGetResponseDataInitialDiscountsProductJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialDiscountsProduct]
type v1ContractGetResponseDataInitialDiscountsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialDiscountsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialDiscountsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialDiscountsSchedule struct {
	CreditType V1ContractGetResponseDataInitialDiscountsScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                            `json:"do_not_invoice"`
	ScheduleItems []V1ContractGetResponseDataInitialDiscountsScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractGetResponseDataInitialDiscountsScheduleJSON           `json:"-"`
}

// v1ContractGetResponseDataInitialDiscountsScheduleJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialDiscountsSchedule]
type v1ContractGetResponseDataInitialDiscountsScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialDiscountsSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialDiscountsScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialDiscountsScheduleCreditType struct {
	ID   string                                                          `json:"id,required" format:"uuid"`
	Name string                                                          `json:"name,required"`
	JSON v1ContractGetResponseDataInitialDiscountsScheduleCreditTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialDiscountsScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialDiscountsScheduleCreditType]
type v1ContractGetResponseDataInitialDiscountsScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialDiscountsScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialDiscountsScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialDiscountsScheduleScheduleItem struct {
	ID        string                                                            `json:"id,required" format:"uuid"`
	Amount    float64                                                           `json:"amount,required"`
	Quantity  float64                                                           `json:"quantity,required"`
	Timestamp time.Time                                                         `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                           `json:"unit_price,required"`
	InvoiceID string                                                            `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractGetResponseDataInitialDiscountsScheduleScheduleItemJSON `json:"-"`
}

// v1ContractGetResponseDataInitialDiscountsScheduleScheduleItemJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialDiscountsScheduleScheduleItem]
type v1ContractGetResponseDataInitialDiscountsScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialDiscountsScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialDiscountsScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
type V1ContractGetResponseDataInitialHierarchyConfiguration struct {
	// This field can have the runtime type of
	// [[]V1ContractGetResponseDataInitialHierarchyConfigurationChildrenChild].
	Children interface{} `json:"children"`
	// This field can have the runtime type of
	// [V1ContractGetResponseDataInitialHierarchyConfigurationParentParent].
	Parent interface{}                                                `json:"parent"`
	JSON   v1ContractGetResponseDataInitialHierarchyConfigurationJSON `json:"-"`
	union  V1ContractGetResponseDataInitialHierarchyConfigurationUnion
}

// v1ContractGetResponseDataInitialHierarchyConfigurationJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialHierarchyConfiguration]
type v1ContractGetResponseDataInitialHierarchyConfigurationJSON struct {
	Children    apijson.Field
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataInitialHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataInitialHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataInitialHierarchyConfiguration{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractGetResponseDataInitialHierarchyConfigurationUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataInitialHierarchyConfigurationChildren],
// [V1ContractGetResponseDataInitialHierarchyConfigurationParent].
func (r V1ContractGetResponseDataInitialHierarchyConfiguration) AsUnion() V1ContractGetResponseDataInitialHierarchyConfigurationUnion {
	return r.union
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
//
// Union satisfied by
// [V1ContractGetResponseDataInitialHierarchyConfigurationChildren] or
// [V1ContractGetResponseDataInitialHierarchyConfigurationParent].
type V1ContractGetResponseDataInitialHierarchyConfigurationUnion interface {
	implementsV1ContractGetResponseDataInitialHierarchyConfiguration()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataInitialHierarchyConfigurationUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialHierarchyConfigurationChildren{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialHierarchyConfigurationParent{}),
		},
	)
}

type V1ContractGetResponseDataInitialHierarchyConfigurationChildren struct {
	// List of contracts that belong to this parent.
	Children []V1ContractGetResponseDataInitialHierarchyConfigurationChildrenChild `json:"children,required"`
	JSON     v1ContractGetResponseDataInitialHierarchyConfigurationChildrenJSON    `json:"-"`
}

// v1ContractGetResponseDataInitialHierarchyConfigurationChildrenJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialHierarchyConfigurationChildren]
type v1ContractGetResponseDataInitialHierarchyConfigurationChildrenJSON struct {
	Children    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialHierarchyConfigurationChildren) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialHierarchyConfigurationChildrenJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialHierarchyConfigurationChildren) implementsV1ContractGetResponseDataInitialHierarchyConfiguration() {
}

type V1ContractGetResponseDataInitialHierarchyConfigurationChildrenChild struct {
	ContractID string                                                                  `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                  `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractGetResponseDataInitialHierarchyConfigurationChildrenChildJSON `json:"-"`
}

// v1ContractGetResponseDataInitialHierarchyConfigurationChildrenChildJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialHierarchyConfigurationChildrenChild]
type v1ContractGetResponseDataInitialHierarchyConfigurationChildrenChildJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialHierarchyConfigurationChildrenChild) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialHierarchyConfigurationChildrenChildJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialHierarchyConfigurationParent struct {
	// The single parent contract/customer for this child.
	Parent V1ContractGetResponseDataInitialHierarchyConfigurationParentParent `json:"parent,required"`
	JSON   v1ContractGetResponseDataInitialHierarchyConfigurationParentJSON   `json:"-"`
}

// v1ContractGetResponseDataInitialHierarchyConfigurationParentJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialHierarchyConfigurationParent]
type v1ContractGetResponseDataInitialHierarchyConfigurationParentJSON struct {
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialHierarchyConfigurationParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialHierarchyConfigurationParentJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialHierarchyConfigurationParent) implementsV1ContractGetResponseDataInitialHierarchyConfiguration() {
}

// The single parent contract/customer for this child.
type V1ContractGetResponseDataInitialHierarchyConfigurationParentParent struct {
	ContractID string                                                                 `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                 `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractGetResponseDataInitialHierarchyConfigurationParentParentJSON `json:"-"`
}

// v1ContractGetResponseDataInitialHierarchyConfigurationParentParentJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialHierarchyConfigurationParentParent]
type v1ContractGetResponseDataInitialHierarchyConfigurationParentParentJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialHierarchyConfigurationParentParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialHierarchyConfigurationParentParentJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfiguration struct {
	Commit V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                                  `json:"is_enabled,required"`
	PaymentGateConfig V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the amount the balance should be recharged to.
	RechargeToAmount float64 `json:"recharge_to_amount,required"`
	// Specify the threshold amount for the contract. Each time the contract's prepaid
	// balance lowers to this amount, a threshold charge will be initiated.
	ThresholdAmount float64 `json:"threshold_amount,required"`
	// If provided, the threshold, recharge-to amount, and the resulting threshold
	// commit amount will be in terms of this credit type instead of the fiat currency.
	CustomCreditTypeID string                                                                   `json:"custom_credit_type_id" format:"uuid"`
	JSON               v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationJSON `json:"-"`
}

// v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfiguration]
type v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationJSON struct {
	Commit             apijson.Field
	IsEnabled          apijson.Field
	PaymentGateConfig  apijson.Field
	RechargeToAmount   apijson.Field
	ThresholdAmount    apijson.Field
	CustomCreditTypeID apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID string `json:"product_id,required"`
	// Which products the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Which tags the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags []string `json:"applicable_product_tags"`
	Description           string   `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string `json:"name"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers []V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier `json:"specifiers"`
	JSON       v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON        `json:"-"`
}

// v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommit]
type v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON struct {
	ProductID             apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	Description           apijson.Field
	Name                  apijson.Field
	Specifiers            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                                                `json:"product_tags"`
	JSON        v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier]
type v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig]
type v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                          `json:"tax_name"`
	JSON    v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                                     `json:"invoice_metadata"`
	JSON            v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractGetResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialProfessionalService struct {
	ID string `json:"id,required" format:"uuid"`
	// Maximum amount for the term.
	MaxAmount float64 `json:"max_amount,required"`
	ProductID string  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity float64 `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    float64           `json:"unit_price,required"`
	CustomFields map[string]string `json:"custom_fields"`
	Description  string            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                  `json:"netsuite_sales_order_id"`
	JSON                 v1ContractGetResponseDataInitialProfessionalServiceJSON `json:"-"`
}

// v1ContractGetResponseDataInitialProfessionalServiceJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialProfessionalService]
type v1ContractGetResponseDataInitialProfessionalServiceJSON struct {
	ID                   apijson.Field
	MaxAmount            apijson.Field
	ProductID            apijson.Field
	Quantity             apijson.Field
	UnitPrice            apijson.Field
	CustomFields         apijson.Field
	Description          apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialProfessionalService) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialProfessionalServiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCommit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractGetResponseDataInitialRecurringCommitsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractGetResponseDataInitialRecurringCommitsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                 `json:"priority,required"`
	Product  V1ContractGetResponseDataInitialRecurringCommitsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractGetResponseDataInitialRecurringCommitsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                 `json:"applicable_product_tags"`
	Contract              V1ContractGetResponseDataInitialRecurringCommitsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The amount the customer should be billed for the commit. Not required.
	InvoiceAmount V1ContractGetResponseDataInitialRecurringCommitsInvoiceAmount `json:"invoice_amount"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractGetResponseDataInitialRecurringCommitsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataInitialRecurringCommitsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractGetResponseDataInitialRecurringCommitJSON                `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialRecurringCommit]
type v1ContractGetResponseDataInitialRecurringCommitJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	InvoiceAmount          apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractGetResponseDataInitialRecurringCommitsAccessAmount struct {
	CreditTypeID string                                                           `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                          `json:"unit_price,required"`
	Quantity     float64                                                          `json:"quantity"`
	JSON         v1ContractGetResponseDataInitialRecurringCommitsAccessAmountJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsAccessAmount]
type v1ContractGetResponseDataInitialRecurringCommitsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractGetResponseDataInitialRecurringCommitsCommitDuration struct {
	Value float64                                                            `json:"value,required"`
	Unit  V1ContractGetResponseDataInitialRecurringCommitsCommitDurationUnit `json:"unit"`
	JSON  v1ContractGetResponseDataInitialRecurringCommitsCommitDurationJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsCommitDuration]
type v1ContractGetResponseDataInitialRecurringCommitsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCommitsCommitDurationUnit string

const (
	V1ContractGetResponseDataInitialRecurringCommitsCommitDurationUnitPeriods V1ContractGetResponseDataInitialRecurringCommitsCommitDurationUnit = "PERIODS"
)

func (r V1ContractGetResponseDataInitialRecurringCommitsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCommitsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCommitsProduct struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractGetResponseDataInitialRecurringCommitsProductJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsProductJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsProduct]
type v1ContractGetResponseDataInitialRecurringCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractGetResponseDataInitialRecurringCommitsRateType string

const (
	V1ContractGetResponseDataInitialRecurringCommitsRateTypeCommitRate V1ContractGetResponseDataInitialRecurringCommitsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataInitialRecurringCommitsRateTypeListRate   V1ContractGetResponseDataInitialRecurringCommitsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataInitialRecurringCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCommitsRateTypeCommitRate, V1ContractGetResponseDataInitialRecurringCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCommitsContract struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataInitialRecurringCommitsContractJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsContractJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsContract]
type v1ContractGetResponseDataInitialRecurringCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfiguration]
type v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                           `json:"contract_ids"`
	JSON        v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                    `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The amount the customer should be billed for the commit. Not required.
type V1ContractGetResponseDataInitialRecurringCommitsInvoiceAmount struct {
	CreditTypeID string                                                            `json:"credit_type_id,required" format:"uuid"`
	Quantity     float64                                                           `json:"quantity,required"`
	UnitPrice    float64                                                           `json:"unit_price,required"`
	JSON         v1ContractGetResponseDataInitialRecurringCommitsInvoiceAmountJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsInvoiceAmountJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsInvoiceAmount]
type v1ContractGetResponseDataInitialRecurringCommitsInvoiceAmountJSON struct {
	CreditTypeID apijson.Field
	Quantity     apijson.Field
	UnitPrice    apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsInvoiceAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsInvoiceAmountJSON) RawJSON() string {
	return r.raw
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractGetResponseDataInitialRecurringCommitsProration string

const (
	V1ContractGetResponseDataInitialRecurringCommitsProrationNone         V1ContractGetResponseDataInitialRecurringCommitsProration = "NONE"
	V1ContractGetResponseDataInitialRecurringCommitsProrationFirst        V1ContractGetResponseDataInitialRecurringCommitsProration = "FIRST"
	V1ContractGetResponseDataInitialRecurringCommitsProrationLast         V1ContractGetResponseDataInitialRecurringCommitsProration = "LAST"
	V1ContractGetResponseDataInitialRecurringCommitsProrationFirstAndLast V1ContractGetResponseDataInitialRecurringCommitsProration = "FIRST_AND_LAST"
)

func (r V1ContractGetResponseDataInitialRecurringCommitsProration) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCommitsProrationNone, V1ContractGetResponseDataInitialRecurringCommitsProrationFirst, V1ContractGetResponseDataInitialRecurringCommitsProrationLast, V1ContractGetResponseDataInitialRecurringCommitsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequency string

const (
	V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyMonthly   V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequency = "MONTHLY"
	V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyQuarterly V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequency = "QUARTERLY"
	V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyAnnual    V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequency = "ANNUAL"
	V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyWeekly    V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyMonthly, V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyQuarterly, V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyAnnual, V1ContractGetResponseDataInitialRecurringCommitsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                      `json:"product_tags"`
	JSON        v1ContractGetResponseDataInitialRecurringCommitsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsSpecifier]
type v1ContractGetResponseDataInitialRecurringCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfig struct {
	Allocation              V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                    `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfig]
type v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocation string

const (
	V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocationIndividual V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocationPooled     V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocationIndividual, V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                          `json:"is_prorated,required"`
	JSON       v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCredit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractGetResponseDataInitialRecurringCreditsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractGetResponseDataInitialRecurringCreditsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                 `json:"priority,required"`
	Product  V1ContractGetResponseDataInitialRecurringCreditsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractGetResponseDataInitialRecurringCreditsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                 `json:"applicable_product_tags"`
	Contract              V1ContractGetResponseDataInitialRecurringCreditsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractGetResponseDataInitialRecurringCreditsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractGetResponseDataInitialRecurringCreditsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractGetResponseDataInitialRecurringCreditJSON                `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialRecurringCredit]
type v1ContractGetResponseDataInitialRecurringCreditJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractGetResponseDataInitialRecurringCreditsAccessAmount struct {
	CreditTypeID string                                                           `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                          `json:"unit_price,required"`
	Quantity     float64                                                          `json:"quantity"`
	JSON         v1ContractGetResponseDataInitialRecurringCreditsAccessAmountJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsAccessAmount]
type v1ContractGetResponseDataInitialRecurringCreditsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractGetResponseDataInitialRecurringCreditsCommitDuration struct {
	Value float64                                                            `json:"value,required"`
	Unit  V1ContractGetResponseDataInitialRecurringCreditsCommitDurationUnit `json:"unit"`
	JSON  v1ContractGetResponseDataInitialRecurringCreditsCommitDurationJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsCommitDuration]
type v1ContractGetResponseDataInitialRecurringCreditsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCreditsCommitDurationUnit string

const (
	V1ContractGetResponseDataInitialRecurringCreditsCommitDurationUnitPeriods V1ContractGetResponseDataInitialRecurringCreditsCommitDurationUnit = "PERIODS"
)

func (r V1ContractGetResponseDataInitialRecurringCreditsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCreditsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCreditsProduct struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractGetResponseDataInitialRecurringCreditsProductJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsProductJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsProduct]
type v1ContractGetResponseDataInitialRecurringCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractGetResponseDataInitialRecurringCreditsRateType string

const (
	V1ContractGetResponseDataInitialRecurringCreditsRateTypeCommitRate V1ContractGetResponseDataInitialRecurringCreditsRateType = "COMMIT_RATE"
	V1ContractGetResponseDataInitialRecurringCreditsRateTypeListRate   V1ContractGetResponseDataInitialRecurringCreditsRateType = "LIST_RATE"
)

func (r V1ContractGetResponseDataInitialRecurringCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCreditsRateTypeCommitRate, V1ContractGetResponseDataInitialRecurringCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCreditsContract struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	JSON v1ContractGetResponseDataInitialRecurringCreditsContractJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsContractJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsContract]
type v1ContractGetResponseDataInitialRecurringCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfiguration]
type v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                           `json:"contract_ids"`
	JSON        v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess]
type v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject].
type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType]
type v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType) implementsV1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                    `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject]
type v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractGetResponseDataInitialRecurringCreditsProration string

const (
	V1ContractGetResponseDataInitialRecurringCreditsProrationNone         V1ContractGetResponseDataInitialRecurringCreditsProration = "NONE"
	V1ContractGetResponseDataInitialRecurringCreditsProrationFirst        V1ContractGetResponseDataInitialRecurringCreditsProration = "FIRST"
	V1ContractGetResponseDataInitialRecurringCreditsProrationLast         V1ContractGetResponseDataInitialRecurringCreditsProration = "LAST"
	V1ContractGetResponseDataInitialRecurringCreditsProrationFirstAndLast V1ContractGetResponseDataInitialRecurringCreditsProration = "FIRST_AND_LAST"
)

func (r V1ContractGetResponseDataInitialRecurringCreditsProration) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCreditsProrationNone, V1ContractGetResponseDataInitialRecurringCreditsProrationFirst, V1ContractGetResponseDataInitialRecurringCreditsProrationLast, V1ContractGetResponseDataInitialRecurringCreditsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequency string

const (
	V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyMonthly   V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequency = "MONTHLY"
	V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyQuarterly V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequency = "QUARTERLY"
	V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyAnnual    V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequency = "ANNUAL"
	V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyWeekly    V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyMonthly, V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyQuarterly, V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyAnnual, V1ContractGetResponseDataInitialRecurringCreditsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                      `json:"product_tags"`
	JSON        v1ContractGetResponseDataInitialRecurringCreditsSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsSpecifier]
type v1ContractGetResponseDataInitialRecurringCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfig struct {
	Allocation              V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                    `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfig]
type v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocation string

const (
	V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocationIndividual V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocationPooled     V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocationIndividual, V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                          `json:"is_prorated,required"`
	JSON       v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialResellerRoyalty struct {
	Fraction              float64                                                       `json:"fraction,required"`
	NetsuiteResellerID    string                                                        `json:"netsuite_reseller_id,required"`
	ResellerType          V1ContractGetResponseDataInitialResellerRoyaltiesResellerType `json:"reseller_type,required"`
	StartingAt            time.Time                                                     `json:"starting_at,required" format:"date-time"`
	ApplicableProductIDs  []string                                                      `json:"applicable_product_ids"`
	ApplicableProductTags []string                                                      `json:"applicable_product_tags"`
	AwsAccountNumber      string                                                        `json:"aws_account_number"`
	AwsOfferID            string                                                        `json:"aws_offer_id"`
	AwsPayerReferenceID   string                                                        `json:"aws_payer_reference_id"`
	EndingBefore          time.Time                                                     `json:"ending_before" format:"date-time"`
	GcpAccountID          string                                                        `json:"gcp_account_id"`
	GcpOfferID            string                                                        `json:"gcp_offer_id"`
	ResellerContractValue float64                                                       `json:"reseller_contract_value"`
	JSON                  v1ContractGetResponseDataInitialResellerRoyaltyJSON           `json:"-"`
}

// v1ContractGetResponseDataInitialResellerRoyaltyJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialResellerRoyalty]
type v1ContractGetResponseDataInitialResellerRoyaltyJSON struct {
	Fraction              apijson.Field
	NetsuiteResellerID    apijson.Field
	ResellerType          apijson.Field
	StartingAt            apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	AwsAccountNumber      apijson.Field
	AwsOfferID            apijson.Field
	AwsPayerReferenceID   apijson.Field
	EndingBefore          apijson.Field
	GcpAccountID          apijson.Field
	GcpOfferID            apijson.Field
	ResellerContractValue apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialResellerRoyaltiesResellerType string

const (
	V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeAws           V1ContractGetResponseDataInitialResellerRoyaltiesResellerType = "AWS"
	V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeAwsProService V1ContractGetResponseDataInitialResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeGcp           V1ContractGetResponseDataInitialResellerRoyaltiesResellerType = "GCP"
	V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeGcpProService V1ContractGetResponseDataInitialResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractGetResponseDataInitialResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeAws, V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeAwsProService, V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeGcp, V1ContractGetResponseDataInitialResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

// Determines which scheduled and commit charges to consolidate onto the Contract's
// usage invoice. The charge's `timestamp` must match the usage invoice's
// `ending_before` date for consolidation to occur. This field cannot be modified
// after a Contract has been created. If this field is omitted, charges will appear
// on a separate invoice from usage charges.
type V1ContractGetResponseDataInitialScheduledChargesOnUsageInvoices string

const (
	V1ContractGetResponseDataInitialScheduledChargesOnUsageInvoicesAll V1ContractGetResponseDataInitialScheduledChargesOnUsageInvoices = "ALL"
)

func (r V1ContractGetResponseDataInitialScheduledChargesOnUsageInvoices) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialScheduledChargesOnUsageInvoicesAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialSpendThresholdConfiguration struct {
	Commit V1ContractGetResponseDataInitialSpendThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                         `json:"is_enabled,required"`
	PaymentGateConfig V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the threshold amount for the contract. Each time the contract's usage
	// hits this amount, a threshold charge will be initiated.
	ThresholdAmount float64                                                         `json:"threshold_amount,required"`
	JSON            v1ContractGetResponseDataInitialSpendThresholdConfigurationJSON `json:"-"`
}

// v1ContractGetResponseDataInitialSpendThresholdConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataInitialSpendThresholdConfiguration]
type v1ContractGetResponseDataInitialSpendThresholdConfigurationJSON struct {
	Commit            apijson.Field
	IsEnabled         apijson.Field
	PaymentGateConfig apijson.Field
	ThresholdAmount   apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialSpendThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialSpendThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialSpendThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID   string `json:"product_id,required"`
	Description string `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string                                                                `json:"name"`
	JSON v1ContractGetResponseDataInitialSpendThresholdConfigurationCommitJSON `json:"-"`
}

// v1ContractGetResponseDataInitialSpendThresholdConfigurationCommitJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataInitialSpendThresholdConfigurationCommit]
type v1ContractGetResponseDataInitialSpendThresholdConfigurationCommitJSON struct {
	ProductID   apijson.Field
	Description apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialSpendThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialSpendThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfig]
type v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                 `json:"tax_name"`
	JSON    v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                            `json:"invoice_metadata"`
	JSON            v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractGetResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractGetResponseDataInitialUsageFilter struct {
	Current V1ContractGetResponseDataInitialUsageFilterCurrent  `json:"current,required,nullable"`
	Initial V1ContractGetResponseDataInitialUsageFilterInitial  `json:"initial,required"`
	Updates []V1ContractGetResponseDataInitialUsageFilterUpdate `json:"updates,required"`
	JSON    v1ContractGetResponseDataInitialUsageFilterJSON     `json:"-"`
}

// v1ContractGetResponseDataInitialUsageFilterJSON contains the JSON metadata for
// the struct [V1ContractGetResponseDataInitialUsageFilter]
type v1ContractGetResponseDataInitialUsageFilterJSON struct {
	Current     apijson.Field
	Initial     apijson.Field
	Updates     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialUsageFilter) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialUsageFilterJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialUsageFilterCurrent struct {
	GroupKey    string                                                 `json:"group_key,required"`
	GroupValues []string                                               `json:"group_values,required"`
	StartingAt  time.Time                                              `json:"starting_at" format:"date-time"`
	JSON        v1ContractGetResponseDataInitialUsageFilterCurrentJSON `json:"-"`
}

// v1ContractGetResponseDataInitialUsageFilterCurrentJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialUsageFilterCurrent]
type v1ContractGetResponseDataInitialUsageFilterCurrentJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialUsageFilterCurrent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialUsageFilterCurrentJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialUsageFilterInitial struct {
	GroupKey    string                                                 `json:"group_key,required"`
	GroupValues []string                                               `json:"group_values,required"`
	StartingAt  time.Time                                              `json:"starting_at" format:"date-time"`
	JSON        v1ContractGetResponseDataInitialUsageFilterInitialJSON `json:"-"`
}

// v1ContractGetResponseDataInitialUsageFilterInitialJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataInitialUsageFilterInitial]
type v1ContractGetResponseDataInitialUsageFilterInitialJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialUsageFilterInitial) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialUsageFilterInitialJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataInitialUsageFilterUpdate struct {
	GroupKey    string                                                `json:"group_key,required"`
	GroupValues []string                                              `json:"group_values,required"`
	StartingAt  time.Time                                             `json:"starting_at,required" format:"date-time"`
	JSON        v1ContractGetResponseDataInitialUsageFilterUpdateJSON `json:"-"`
}

// v1ContractGetResponseDataInitialUsageFilterUpdateJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataInitialUsageFilterUpdate]
type v1ContractGetResponseDataInitialUsageFilterUpdateJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataInitialUsageFilterUpdate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataInitialUsageFilterUpdateJSON) RawJSON() string {
	return r.raw
}

// The billing provider configuration associated with a contract.
type V1ContractGetResponseDataCustomerBillingProviderConfiguration struct {
	BillingProvider V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider `json:"billing_provider,required"`
	DeliveryMethod  V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethod  `json:"delivery_method,required"`
	ID              string                                                                       `json:"id" format:"uuid"`
	// Configuration for the billing provider. The structure of this object is specific
	// to the billing provider.
	Configuration map[string]interface{}                                            `json:"configuration"`
	JSON          v1ContractGetResponseDataCustomerBillingProviderConfigurationJSON `json:"-"`
}

// v1ContractGetResponseDataCustomerBillingProviderConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataCustomerBillingProviderConfiguration]
type v1ContractGetResponseDataCustomerBillingProviderConfigurationJSON struct {
	BillingProvider apijson.Field
	DeliveryMethod  apijson.Field
	ID              apijson.Field
	Configuration   apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataCustomerBillingProviderConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataCustomerBillingProviderConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider string

const (
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderAwsMarketplace   V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "aws_marketplace"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderStripe           V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "stripe"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderNetsuite         V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "netsuite"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderCustom           V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "custom"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderAzureMarketplace V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "azure_marketplace"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderQuickbooksOnline V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "quickbooks_online"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderWorkday          V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "workday"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderGcpMarketplace   V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider = "gcp_marketplace"
)

func (r V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProvider) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderAwsMarketplace, V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderStripe, V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderNetsuite, V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderCustom, V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderAzureMarketplace, V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderQuickbooksOnline, V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderWorkday, V1ContractGetResponseDataCustomerBillingProviderConfigurationBillingProviderGcpMarketplace:
		return true
	}
	return false
}

type V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethod string

const (
	V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodDirectToBillingProvider V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "direct_to_billing_provider"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSqs                  V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "aws_sqs"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodTackle                  V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "tackle"
	V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSns                  V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "aws_sns"
)

func (r V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethod) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodDirectToBillingProvider, V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSqs, V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodTackle, V1ContractGetResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSns:
		return true
	}
	return false
}

type V1ContractGetResponseDataPrepaidBalanceThresholdConfiguration struct {
	Commit V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                           `json:"is_enabled,required"`
	PaymentGateConfig V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the amount the balance should be recharged to.
	RechargeToAmount float64 `json:"recharge_to_amount,required"`
	// Specify the threshold amount for the contract. Each time the contract's prepaid
	// balance lowers to this amount, a threshold charge will be initiated.
	ThresholdAmount float64 `json:"threshold_amount,required"`
	// If provided, the threshold, recharge-to amount, and the resulting threshold
	// commit amount will be in terms of this credit type instead of the fiat currency.
	CustomCreditTypeID string                                                            `json:"custom_credit_type_id" format:"uuid"`
	JSON               v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationJSON `json:"-"`
}

// v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataPrepaidBalanceThresholdConfiguration]
type v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationJSON struct {
	Commit             apijson.Field
	IsEnabled          apijson.Field
	PaymentGateConfig  apijson.Field
	RechargeToAmount   apijson.Field
	ThresholdAmount    apijson.Field
	CustomCreditTypeID apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractGetResponseDataPrepaidBalanceThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID string `json:"product_id,required"`
	// Which products the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Which tags the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags []string `json:"applicable_product_tags"`
	Description           string   `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string `json:"name"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers []V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier `json:"specifiers"`
	JSON       v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitJSON        `json:"-"`
}

// v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitJSON contains
// the JSON metadata for the struct
// [V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommit]
type v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitJSON struct {
	ProductID             apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	Description           apijson.Field
	Name                  apijson.Field
	Specifiers            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                                         `json:"product_tags"`
	JSON        v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON `json:"-"`
}

// v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier]
type v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig]
type v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                   `json:"tax_name"`
	JSON    v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                              `json:"invoice_metadata"`
	JSON            v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractGetResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

// Determines which scheduled and commit charges to consolidate onto the Contract's
// usage invoice. The charge's `timestamp` must match the usage invoice's
// `ending_before` date for consolidation to occur. This field cannot be modified
// after a Contract has been created. If this field is omitted, charges will appear
// on a separate invoice from usage charges.
type V1ContractGetResponseDataScheduledChargesOnUsageInvoices string

const (
	V1ContractGetResponseDataScheduledChargesOnUsageInvoicesAll V1ContractGetResponseDataScheduledChargesOnUsageInvoices = "ALL"
)

func (r V1ContractGetResponseDataScheduledChargesOnUsageInvoices) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataScheduledChargesOnUsageInvoicesAll:
		return true
	}
	return false
}

type V1ContractGetResponseDataSpendThresholdConfiguration struct {
	Commit V1ContractGetResponseDataSpendThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                  `json:"is_enabled,required"`
	PaymentGateConfig V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the threshold amount for the contract. Each time the contract's usage
	// hits this amount, a threshold charge will be initiated.
	ThresholdAmount float64                                                  `json:"threshold_amount,required"`
	JSON            v1ContractGetResponseDataSpendThresholdConfigurationJSON `json:"-"`
}

// v1ContractGetResponseDataSpendThresholdConfigurationJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataSpendThresholdConfiguration]
type v1ContractGetResponseDataSpendThresholdConfigurationJSON struct {
	Commit            apijson.Field
	IsEnabled         apijson.Field
	PaymentGateConfig apijson.Field
	ThresholdAmount   apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSpendThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSpendThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataSpendThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID   string `json:"product_id,required"`
	Description string `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string                                                         `json:"name"`
	JSON v1ContractGetResponseDataSpendThresholdConfigurationCommitJSON `json:"-"`
}

// v1ContractGetResponseDataSpendThresholdConfigurationCommitJSON contains the JSON
// metadata for the struct
// [V1ContractGetResponseDataSpendThresholdConfigurationCommit]
type v1ContractGetResponseDataSpendThresholdConfigurationCommitJSON struct {
	ProductID   apijson.Field
	Description apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSpendThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSpendThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfig]
type v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                          `json:"tax_name"`
	JSON    v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                     `json:"invoice_metadata"`
	JSON            v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractGetResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractGetResponseDataSubscription struct {
	CollectionSchedule V1ContractGetResponseDataSubscriptionsCollectionSchedule `json:"collection_schedule,required"`
	Proration          V1ContractGetResponseDataSubscriptionsProration          `json:"proration,required"`
	// List of quantity schedule items for the subscription. Only includes the current
	// quantity and future quantity changes.
	QuantitySchedule []V1ContractGetResponseDataSubscriptionsQuantitySchedule `json:"quantity_schedule,required"`
	StartingAt       time.Time                                                `json:"starting_at,required" format:"date-time"`
	SubscriptionRate V1ContractGetResponseDataSubscriptionsSubscriptionRate   `json:"subscription_rate,required"`
	ID               string                                                   `json:"id" format:"uuid"`
	CustomFields     map[string]string                                        `json:"custom_fields"`
	Description      string                                                   `json:"description"`
	EndingBefore     time.Time                                                `json:"ending_before" format:"date-time"`
	FiatCreditTypeID string                                                   `json:"fiat_credit_type_id" format:"uuid"`
	Name             string                                                   `json:"name"`
	JSON             v1ContractGetResponseDataSubscriptionJSON                `json:"-"`
}

// v1ContractGetResponseDataSubscriptionJSON contains the JSON metadata for the
// struct [V1ContractGetResponseDataSubscription]
type v1ContractGetResponseDataSubscriptionJSON struct {
	CollectionSchedule apijson.Field
	Proration          apijson.Field
	QuantitySchedule   apijson.Field
	StartingAt         apijson.Field
	SubscriptionRate   apijson.Field
	ID                 apijson.Field
	CustomFields       apijson.Field
	Description        apijson.Field
	EndingBefore       apijson.Field
	FiatCreditTypeID   apijson.Field
	Name               apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSubscription) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSubscriptionJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataSubscriptionsCollectionSchedule string

const (
	V1ContractGetResponseDataSubscriptionsCollectionScheduleAdvance V1ContractGetResponseDataSubscriptionsCollectionSchedule = "ADVANCE"
	V1ContractGetResponseDataSubscriptionsCollectionScheduleArrears V1ContractGetResponseDataSubscriptionsCollectionSchedule = "ARREARS"
)

func (r V1ContractGetResponseDataSubscriptionsCollectionSchedule) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataSubscriptionsCollectionScheduleAdvance, V1ContractGetResponseDataSubscriptionsCollectionScheduleArrears:
		return true
	}
	return false
}

type V1ContractGetResponseDataSubscriptionsProration struct {
	InvoiceBehavior V1ContractGetResponseDataSubscriptionsProrationInvoiceBehavior `json:"invoice_behavior,required"`
	IsProrated      bool                                                           `json:"is_prorated,required"`
	JSON            v1ContractGetResponseDataSubscriptionsProrationJSON            `json:"-"`
}

// v1ContractGetResponseDataSubscriptionsProrationJSON contains the JSON metadata
// for the struct [V1ContractGetResponseDataSubscriptionsProration]
type v1ContractGetResponseDataSubscriptionsProrationJSON struct {
	InvoiceBehavior apijson.Field
	IsProrated      apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSubscriptionsProration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSubscriptionsProrationJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataSubscriptionsProrationInvoiceBehavior string

const (
	V1ContractGetResponseDataSubscriptionsProrationInvoiceBehaviorBillImmediately          V1ContractGetResponseDataSubscriptionsProrationInvoiceBehavior = "BILL_IMMEDIATELY"
	V1ContractGetResponseDataSubscriptionsProrationInvoiceBehaviorBillOnNextCollectionDate V1ContractGetResponseDataSubscriptionsProrationInvoiceBehavior = "BILL_ON_NEXT_COLLECTION_DATE"
)

func (r V1ContractGetResponseDataSubscriptionsProrationInvoiceBehavior) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataSubscriptionsProrationInvoiceBehaviorBillImmediately, V1ContractGetResponseDataSubscriptionsProrationInvoiceBehaviorBillOnNextCollectionDate:
		return true
	}
	return false
}

type V1ContractGetResponseDataSubscriptionsQuantitySchedule struct {
	Quantity     float64                                                    `json:"quantity,required"`
	StartingAt   time.Time                                                  `json:"starting_at,required" format:"date-time"`
	EndingBefore time.Time                                                  `json:"ending_before" format:"date-time"`
	JSON         v1ContractGetResponseDataSubscriptionsQuantityScheduleJSON `json:"-"`
}

// v1ContractGetResponseDataSubscriptionsQuantityScheduleJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataSubscriptionsQuantitySchedule]
type v1ContractGetResponseDataSubscriptionsQuantityScheduleJSON struct {
	Quantity     apijson.Field
	StartingAt   apijson.Field
	EndingBefore apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSubscriptionsQuantitySchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSubscriptionsQuantityScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataSubscriptionsSubscriptionRate struct {
	BillingFrequency V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequency `json:"billing_frequency,required"`
	Product          V1ContractGetResponseDataSubscriptionsSubscriptionRateProduct          `json:"product,required"`
	JSON             v1ContractGetResponseDataSubscriptionsSubscriptionRateJSON             `json:"-"`
}

// v1ContractGetResponseDataSubscriptionsSubscriptionRateJSON contains the JSON
// metadata for the struct [V1ContractGetResponseDataSubscriptionsSubscriptionRate]
type v1ContractGetResponseDataSubscriptionsSubscriptionRateJSON struct {
	BillingFrequency apijson.Field
	Product          apijson.Field
	raw              string
	ExtraFields      map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSubscriptionsSubscriptionRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSubscriptionsSubscriptionRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequency string

const (
	V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyMonthly   V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequency = "MONTHLY"
	V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyQuarterly V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequency = "QUARTERLY"
	V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyAnnual    V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequency = "ANNUAL"
	V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyWeekly    V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequency = "WEEKLY"
)

func (r V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyMonthly, V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyQuarterly, V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyAnnual, V1ContractGetResponseDataSubscriptionsSubscriptionRateBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetResponseDataSubscriptionsSubscriptionRateProduct struct {
	ID   string                                                            `json:"id,required" format:"uuid"`
	Name string                                                            `json:"name,required"`
	JSON v1ContractGetResponseDataSubscriptionsSubscriptionRateProductJSON `json:"-"`
}

// v1ContractGetResponseDataSubscriptionsSubscriptionRateProductJSON contains the
// JSON metadata for the struct
// [V1ContractGetResponseDataSubscriptionsSubscriptionRateProduct]
type v1ContractGetResponseDataSubscriptionsSubscriptionRateProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetResponseDataSubscriptionsSubscriptionRateProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetResponseDataSubscriptionsSubscriptionRateProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponse struct {
	Data []V1ContractListResponseData `json:"data,required"`
	JSON v1ContractListResponseJSON   `json:"-"`
}

// v1ContractListResponseJSON contains the JSON metadata for the struct
// [V1ContractListResponse]
type v1ContractListResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseData struct {
	ID         string                                `json:"id,required" format:"uuid"`
	Amendments []V1ContractListResponseDataAmendment `json:"amendments,required"`
	Current    V1ContractListResponseDataCurrent     `json:"current,required"`
	CustomerID string                                `json:"customer_id,required" format:"uuid"`
	Initial    V1ContractListResponseDataInitial     `json:"initial,required"`
	// RFC 3339 timestamp indicating when the contract was archived. If not returned,
	// the contract is not archived.
	ArchivedAt   time.Time         `json:"archived_at" format:"date-time"`
	CustomFields map[string]string `json:"custom_fields"`
	// The billing provider configuration associated with a contract.
	CustomerBillingProviderConfiguration V1ContractListResponseDataCustomerBillingProviderConfiguration `json:"customer_billing_provider_configuration"`
	PrepaidBalanceThresholdConfiguration V1ContractListResponseDataPrepaidBalanceThresholdConfiguration `json:"prepaid_balance_threshold_configuration"`
	// Priority of the contract.
	Priority float64 `json:"priority"`
	// Determines which scheduled and commit charges to consolidate onto the Contract's
	// usage invoice. The charge's `timestamp` must match the usage invoice's
	// `ending_before` date for consolidation to occur. This field cannot be modified
	// after a Contract has been created. If this field is omitted, charges will appear
	// on a separate invoice from usage charges.
	ScheduledChargesOnUsageInvoices V1ContractListResponseDataScheduledChargesOnUsageInvoices `json:"scheduled_charges_on_usage_invoices"`
	SpendThresholdConfiguration     V1ContractListResponseDataSpendThresholdConfiguration     `json:"spend_threshold_configuration"`
	// List of subscriptions on the contract.
	Subscriptions []V1ContractListResponseDataSubscription `json:"subscriptions"`
	// Prevents the creation of duplicates. If a request to create a record is made
	// with a previously used uniqueness key, a new record will not be created and the
	// request will fail with a 409 error.
	UniquenessKey string                         `json:"uniqueness_key"`
	JSON          v1ContractListResponseDataJSON `json:"-"`
}

// v1ContractListResponseDataJSON contains the JSON metadata for the struct
// [V1ContractListResponseData]
type v1ContractListResponseDataJSON struct {
	ID                                   apijson.Field
	Amendments                           apijson.Field
	Current                              apijson.Field
	CustomerID                           apijson.Field
	Initial                              apijson.Field
	ArchivedAt                           apijson.Field
	CustomFields                         apijson.Field
	CustomerBillingProviderConfiguration apijson.Field
	PrepaidBalanceThresholdConfiguration apijson.Field
	Priority                             apijson.Field
	ScheduledChargesOnUsageInvoices      apijson.Field
	SpendThresholdConfiguration          apijson.Field
	Subscriptions                        apijson.Field
	UniquenessKey                        apijson.Field
	raw                                  string
	ExtraFields                          map[string]apijson.Field
}

func (r *V1ContractListResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendment struct {
	ID               string                                                `json:"id,required" format:"uuid"`
	Commits          []V1ContractListResponseDataAmendmentsCommit          `json:"commits,required"`
	CreatedAt        time.Time                                             `json:"created_at,required" format:"date-time"`
	CreatedBy        string                                                `json:"created_by,required"`
	Overrides        []V1ContractListResponseDataAmendmentsOverride        `json:"overrides,required"`
	ScheduledCharges []V1ContractListResponseDataAmendmentsScheduledCharge `json:"scheduled_charges,required"`
	StartingAt       time.Time                                             `json:"starting_at,required" format:"date-time"`
	Credits          []V1ContractListResponseDataAmendmentsCredit          `json:"credits"`
	// This field's availability is dependent on your client's configuration.
	Discounts []V1ContractListResponseDataAmendmentsDiscount `json:"discounts"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []V1ContractListResponseDataAmendmentsProfessionalService `json:"professional_services"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []V1ContractListResponseDataAmendmentsResellerRoyalty `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string                                  `json:"salesforce_opportunity_id"`
	JSON                    v1ContractListResponseDataAmendmentJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataAmendment]
type v1ContractListResponseDataAmendmentJSON struct {
	ID                      apijson.Field
	Commits                 apijson.Field
	CreatedAt               apijson.Field
	CreatedBy               apijson.Field
	Overrides               apijson.Field
	ScheduledCharges        apijson.Field
	StartingAt              apijson.Field
	Credits                 apijson.Field
	Discounts               apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	ProfessionalServices    apijson.Field
	ResellerRoyalties       apijson.Field
	SalesforceOpportunityID apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendment) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommit struct {
	ID      string                                             `json:"id,required" format:"uuid"`
	Product V1ContractListResponseDataAmendmentsCommitsProduct `json:"product,required"`
	Type    V1ContractListResponseDataAmendmentsCommitsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits purposed with
	// this commit.
	AccessSchedule V1ContractListResponseDataAmendmentsCommitsAccessSchedule `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount                float64  `json:"amount"`
	ApplicableContractIDs []string `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                             `json:"balance"`
	Contract     V1ContractListResponseDataAmendmentsCommitsContract `json:"contract"`
	CustomFields map[string]string                                   `json:"custom_fields"`
	Description  string                                              `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataAmendmentsCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The contract that this commit will be billed on.
	InvoiceContract V1ContractListResponseDataAmendmentsCommitsInvoiceContract `json:"invoice_contract"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule V1ContractListResponseDataAmendmentsCommitsInvoiceSchedule `json:"invoice_schedule"`
	// A list of ordered events that impact the balance of a commit. For example, an
	// invoice deduction or a rollover.
	Ledger []V1ContractListResponseDataAmendmentsCommitsLedger `json:"ledger"`
	Name   string                                              `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority         float64                                                   `json:"priority"`
	RateType         V1ContractListResponseDataAmendmentsCommitsRateType       `json:"rate_type"`
	RolledOverFrom   V1ContractListResponseDataAmendmentsCommitsRolledOverFrom `json:"rolled_over_from"`
	RolloverFraction float64                                                   `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataAmendmentsCommitsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                         `json:"uniqueness_key"`
	JSON          v1ContractListResponseDataAmendmentsCommitJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataAmendmentsCommit]
type v1ContractListResponseDataAmendmentsCommitJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsProduct struct {
	ID   string                                                 `json:"id,required" format:"uuid"`
	Name string                                                 `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsCommitsProductJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsProductJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsCommitsProduct]
type v1ContractListResponseDataAmendmentsCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsType string

const (
	V1ContractListResponseDataAmendmentsCommitsTypePrepaid  V1ContractListResponseDataAmendmentsCommitsType = "PREPAID"
	V1ContractListResponseDataAmendmentsCommitsTypePostpaid V1ContractListResponseDataAmendmentsCommitsType = "POSTPAID"
)

func (r V1ContractListResponseDataAmendmentsCommitsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCommitsTypePrepaid, V1ContractListResponseDataAmendmentsCommitsTypePostpaid:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits purposed with
// this commit.
type V1ContractListResponseDataAmendmentsCommitsAccessSchedule struct {
	ScheduleItems []V1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractListResponseDataAmendmentsCommitsAccessScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsAccessScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsAccessSchedule]
type v1ContractListResponseDataAmendmentsCommitsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItem struct {
	ID           string                                                                    `json:"id,required" format:"uuid"`
	Amount       float64                                                                   `json:"amount,required"`
	EndingBefore time.Time                                                                 `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                                 `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItem]
type v1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditType struct {
	ID   string                                                                  `json:"id,required" format:"uuid"`
	Name string                                                                  `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditType]
type v1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsContract struct {
	ID   string                                                  `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataAmendmentsCommitsContractJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsContractJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsCommitsContract]
type v1ContractListResponseDataAmendmentsCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for commit hierarchy access control
type V1ContractListResponseDataAmendmentsCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfiguration]
type v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                      `json:"contract_ids"`
	JSON        v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                               `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The contract that this commit will be billed on.
type V1ContractListResponseDataAmendmentsCommitsInvoiceContract struct {
	ID   string                                                         `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataAmendmentsCommitsInvoiceContractJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsInvoiceContractJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsInvoiceContract]
type v1ContractListResponseDataAmendmentsCommitsInvoiceContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsInvoiceContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsInvoiceContractJSON) RawJSON() string {
	return r.raw
}

// The schedule that the customer will be invoiced for this commit.
type V1ContractListResponseDataAmendmentsCommitsInvoiceSchedule struct {
	CreditType V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                     `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsInvoiceSchedule]
type v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsInvoiceSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditType struct {
	ID   string                                                                   `json:"id,required" format:"uuid"`
	Name string                                                                   `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditType]
type v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem struct {
	ID        string                                                                     `json:"id,required" format:"uuid"`
	Amount    float64                                                                    `json:"amount,required"`
	Quantity  float64                                                                    `json:"quantity,required"`
	Timestamp time.Time                                                                  `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                    `json:"unit_price,required"`
	InvoiceID string                                                                     `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem]
type v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsInvoiceScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsLedger struct {
	Amount        float64                                               `json:"amount,required"`
	Timestamp     time.Time                                             `json:"timestamp,required" format:"date-time"`
	Type          V1ContractListResponseDataAmendmentsCommitsLedgerType `json:"type,required"`
	ContractID    string                                                `json:"contract_id" format:"uuid"`
	InvoiceID     string                                                `json:"invoice_id" format:"uuid"`
	NewContractID string                                                `json:"new_contract_id" format:"uuid"`
	Reason        string                                                `json:"reason"`
	SegmentID     string                                                `json:"segment_id" format:"uuid"`
	JSON          v1ContractListResponseDataAmendmentsCommitsLedgerJSON `json:"-"`
	union         V1ContractListResponseDataAmendmentsCommitsLedgerUnion
}

// v1ContractListResponseDataAmendmentsCommitsLedgerJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataAmendmentsCommitsLedger]
type v1ContractListResponseDataAmendmentsCommitsLedgerJSON struct {
	Amount        apijson.Field
	Timestamp     apijson.Field
	Type          apijson.Field
	ContractID    apijson.Field
	InvoiceID     apijson.Field
	NewContractID apijson.Field
	Reason        apijson.Field
	SegmentID     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r v1ContractListResponseDataAmendmentsCommitsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataAmendmentsCommitsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataAmendmentsCommitsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataAmendmentsCommitsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject].
func (r V1ContractListResponseDataAmendmentsCommitsLedger) AsUnion() V1ContractListResponseDataAmendmentsCommitsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject],
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject] or
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject].
type V1ContractListResponseDataAmendmentsCommitsLedgerUnion interface {
	implementsV1ContractListResponseDataAmendmentsCommitsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataAmendmentsCommitsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCommitsLedgerObject{}),
		},
	)
}

type V1ContractListResponseDataAmendmentsCommitsLedgerObject struct {
	Amount    float64                                                     `json:"amount,required"`
	SegmentID string                                                      `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                   `json:"timestamp,required" format:"date-time"`
	Type      V1ContractListResponseDataAmendmentsCommitsLedgerObjectType `json:"type,required"`
	JSON      v1ContractListResponseDataAmendmentsCommitsLedgerObjectJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsLedgerObjectJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsLedgerObject]
type v1ContractListResponseDataAmendmentsCommitsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataAmendmentsCommitsLedgerObject) implementsV1ContractListResponseDataAmendmentsCommitsLedger() {
}

type V1ContractListResponseDataAmendmentsCommitsLedgerObjectType string

const (
	V1ContractListResponseDataAmendmentsCommitsLedgerObjectTypePrepaidCommitSegmentStart V1ContractListResponseDataAmendmentsCommitsLedgerObjectType = "PREPAID_COMMIT_SEGMENT_START"
)

func (r V1ContractListResponseDataAmendmentsCommitsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCommitsLedgerObjectTypePrepaidCommitSegmentStart:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCommitsLedgerType string

const (
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSegmentStart               V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_SEGMENT_START"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction  V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitRollover                   V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_ROLLOVER"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitExpiration                 V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_EXPIRATION"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCanceled                   V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_CANCELED"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCredited                   V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_CREDITED"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSeatBasedAdjustment        V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitInitialBalance            V1ContractListResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_INITIAL_BALANCE"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction V1ContractListResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitRollover                  V1ContractListResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_ROLLOVER"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitTrueup                    V1ContractListResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_TRUEUP"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitManual                     V1ContractListResponseDataAmendmentsCommitsLedgerType = "PREPAID_COMMIT_MANUAL"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitManual                    V1ContractListResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_MANUAL"
	V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitExpiration                V1ContractListResponseDataAmendmentsCommitsLedgerType = "POSTPAID_COMMIT_EXPIRATION"
)

func (r V1ContractListResponseDataAmendmentsCommitsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSegmentStart, V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction, V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitRollover, V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitExpiration, V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCanceled, V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitCredited, V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitSeatBasedAdjustment, V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitInitialBalance, V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction, V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitRollover, V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitTrueup, V1ContractListResponseDataAmendmentsCommitsLedgerTypePrepaidCommitManual, V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitManual, V1ContractListResponseDataAmendmentsCommitsLedgerTypePostpaidCommitExpiration:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCommitsRateType string

const (
	V1ContractListResponseDataAmendmentsCommitsRateTypeCommitRate V1ContractListResponseDataAmendmentsCommitsRateType = "COMMIT_RATE"
	V1ContractListResponseDataAmendmentsCommitsRateTypeListRate   V1ContractListResponseDataAmendmentsCommitsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataAmendmentsCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCommitsRateTypeCommitRate, V1ContractListResponseDataAmendmentsCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCommitsRolledOverFrom struct {
	CommitID   string                                                        `json:"commit_id,required" format:"uuid"`
	ContractID string                                                        `json:"contract_id,required" format:"uuid"`
	JSON       v1ContractListResponseDataAmendmentsCommitsRolledOverFromJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsRolledOverFromJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsCommitsRolledOverFrom]
type v1ContractListResponseDataAmendmentsCommitsRolledOverFromJSON struct {
	CommitID    apijson.Field
	ContractID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsRolledOverFrom) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsRolledOverFromJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                 `json:"product_tags"`
	JSON        v1ContractListResponseDataAmendmentsCommitsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCommitsSpecifierJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsCommitsSpecifier]
type v1ContractListResponseDataAmendmentsCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverride struct {
	ID                    string                                                  `json:"id,required" format:"uuid"`
	StartingAt            time.Time                                               `json:"starting_at,required" format:"date-time"`
	ApplicableProductTags []string                                                `json:"applicable_product_tags"`
	CreditType            V1ContractListResponseDataAmendmentsOverridesCreditType `json:"credit_type"`
	EndingBefore          time.Time                                               `json:"ending_before" format:"date-time"`
	Entitled              bool                                                    `json:"entitled"`
	IsCommitSpecific      bool                                                    `json:"is_commit_specific"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated         bool                                                             `json:"is_prorated"`
	Multiplier         float64                                                          `json:"multiplier"`
	OverrideSpecifiers []V1ContractListResponseDataAmendmentsOverridesOverrideSpecifier `json:"override_specifiers"`
	OverrideTiers      []V1ContractListResponseDataAmendmentsOverridesOverrideTier      `json:"override_tiers"`
	OverwriteRate      V1ContractListResponseDataAmendmentsOverridesOverwriteRate       `json:"overwrite_rate"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price    float64                                              `json:"price"`
	Priority float64                                              `json:"priority"`
	Product  V1ContractListResponseDataAmendmentsOverridesProduct `json:"product"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64                                               `json:"quantity"`
	RateType V1ContractListResponseDataAmendmentsOverridesRateType `json:"rate_type"`
	Target   V1ContractListResponseDataAmendmentsOverridesTarget   `json:"target"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractListResponseDataAmendmentsOverridesTier `json:"tiers"`
	Type  V1ContractListResponseDataAmendmentsOverridesType   `json:"type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	Value map[string]interface{}                           `json:"value"`
	JSON  v1ContractListResponseDataAmendmentsOverrideJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverrideJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataAmendmentsOverride]
type v1ContractListResponseDataAmendmentsOverrideJSON struct {
	ID                    apijson.Field
	StartingAt            apijson.Field
	ApplicableProductTags apijson.Field
	CreditType            apijson.Field
	EndingBefore          apijson.Field
	Entitled              apijson.Field
	IsCommitSpecific      apijson.Field
	IsProrated            apijson.Field
	Multiplier            apijson.Field
	OverrideSpecifiers    apijson.Field
	OverrideTiers         apijson.Field
	OverwriteRate         apijson.Field
	Price                 apijson.Field
	Priority              apijson.Field
	Product               apijson.Field
	Quantity              apijson.Field
	RateType              apijson.Field
	Target                apijson.Field
	Tiers                 apijson.Field
	Type                  apijson.Field
	Value                 apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverride) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverrideJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesCreditType struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsOverridesCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesCreditTypeJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsOverridesCreditType]
type v1ContractListResponseDataAmendmentsOverridesCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesOverrideSpecifier struct {
	BillingFrequency        V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency `json:"billing_frequency"`
	CommitIDs               []string                                                                        `json:"commit_ids"`
	PresentationGroupValues map[string]string                                                               `json:"presentation_group_values"`
	PricingGroupValues      map[string]string                                                               `json:"pricing_group_values"`
	ProductID               string                                                                          `json:"product_id" format:"uuid"`
	ProductTags             []string                                                                        `json:"product_tags"`
	RecurringCommitIDs      []string                                                                        `json:"recurring_commit_ids"`
	RecurringCreditIDs      []string                                                                        `json:"recurring_credit_ids"`
	JSON                    v1ContractListResponseDataAmendmentsOverridesOverrideSpecifierJSON              `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesOverrideSpecifierJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsOverridesOverrideSpecifier]
type v1ContractListResponseDataAmendmentsOverridesOverrideSpecifierJSON struct {
	BillingFrequency        apijson.Field
	CommitIDs               apijson.Field
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	RecurringCommitIDs      apijson.Field
	RecurringCreditIDs      apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesOverrideSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesOverrideSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractListResponseDataAmendmentsOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsOverridesOverrideTier struct {
	Multiplier float64                                                       `json:"multiplier,required"`
	Size       float64                                                       `json:"size"`
	JSON       v1ContractListResponseDataAmendmentsOverridesOverrideTierJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesOverrideTierJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsOverridesOverrideTier]
type v1ContractListResponseDataAmendmentsOverridesOverrideTierJSON struct {
	Multiplier  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesOverrideTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesOverrideTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesOverwriteRate struct {
	RateType   V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType   `json:"rate_type,required"`
	CreditType V1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractListResponseDataAmendmentsOverridesOverwriteRateTier `json:"tiers"`
	JSON  v1ContractListResponseDataAmendmentsOverridesOverwriteRateJSON   `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesOverwriteRateJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsOverridesOverwriteRate]
type v1ContractListResponseDataAmendmentsOverridesOverwriteRateJSON struct {
	RateType    apijson.Field
	CreditType  apijson.Field
	CustomRate  apijson.Field
	IsProrated  apijson.Field
	Price       apijson.Field
	Quantity    apijson.Field
	Tiers       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesOverwriteRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesOverwriteRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType string

const (
	V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeFlat         V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType = "FLAT"
	V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypePercentage   V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeSubscription V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeTiered       V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType = "TIERED"
	V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeCustom       V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeFlat, V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypePercentage, V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeSubscription, V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeTiered, V1ContractListResponseDataAmendmentsOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditType struct {
	ID   string                                                                   `json:"id,required" format:"uuid"`
	Name string                                                                   `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditType]
type v1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesOverwriteRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesOverwriteRateTier struct {
	Price float64                                                            `json:"price,required"`
	Size  float64                                                            `json:"size"`
	JSON  v1ContractListResponseDataAmendmentsOverridesOverwriteRateTierJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesOverwriteRateTierJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsOverridesOverwriteRateTier]
type v1ContractListResponseDataAmendmentsOverridesOverwriteRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesOverwriteRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesOverwriteRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesProduct struct {
	ID   string                                                   `json:"id,required" format:"uuid"`
	Name string                                                   `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsOverridesProductJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesProductJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsOverridesProduct]
type v1ContractListResponseDataAmendmentsOverridesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesRateType string

const (
	V1ContractListResponseDataAmendmentsOverridesRateTypeFlat         V1ContractListResponseDataAmendmentsOverridesRateType = "FLAT"
	V1ContractListResponseDataAmendmentsOverridesRateTypePercentage   V1ContractListResponseDataAmendmentsOverridesRateType = "PERCENTAGE"
	V1ContractListResponseDataAmendmentsOverridesRateTypeSubscription V1ContractListResponseDataAmendmentsOverridesRateType = "SUBSCRIPTION"
	V1ContractListResponseDataAmendmentsOverridesRateTypeTiered       V1ContractListResponseDataAmendmentsOverridesRateType = "TIERED"
	V1ContractListResponseDataAmendmentsOverridesRateTypeCustom       V1ContractListResponseDataAmendmentsOverridesRateType = "CUSTOM"
)

func (r V1ContractListResponseDataAmendmentsOverridesRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsOverridesRateTypeFlat, V1ContractListResponseDataAmendmentsOverridesRateTypePercentage, V1ContractListResponseDataAmendmentsOverridesRateTypeSubscription, V1ContractListResponseDataAmendmentsOverridesRateTypeTiered, V1ContractListResponseDataAmendmentsOverridesRateTypeCustom:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsOverridesTarget string

const (
	V1ContractListResponseDataAmendmentsOverridesTargetCommitRate V1ContractListResponseDataAmendmentsOverridesTarget = "COMMIT_RATE"
	V1ContractListResponseDataAmendmentsOverridesTargetListRate   V1ContractListResponseDataAmendmentsOverridesTarget = "LIST_RATE"
)

func (r V1ContractListResponseDataAmendmentsOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsOverridesTargetCommitRate, V1ContractListResponseDataAmendmentsOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsOverridesTier struct {
	Price float64                                               `json:"price,required"`
	Size  float64                                               `json:"size"`
	JSON  v1ContractListResponseDataAmendmentsOverridesTierJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsOverridesTierJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataAmendmentsOverridesTier]
type v1ContractListResponseDataAmendmentsOverridesTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsOverridesTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsOverridesTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsOverridesType string

const (
	V1ContractListResponseDataAmendmentsOverridesTypeOverwrite  V1ContractListResponseDataAmendmentsOverridesType = "OVERWRITE"
	V1ContractListResponseDataAmendmentsOverridesTypeMultiplier V1ContractListResponseDataAmendmentsOverridesType = "MULTIPLIER"
	V1ContractListResponseDataAmendmentsOverridesTypeTiered     V1ContractListResponseDataAmendmentsOverridesType = "TIERED"
)

func (r V1ContractListResponseDataAmendmentsOverridesType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsOverridesTypeOverwrite, V1ContractListResponseDataAmendmentsOverridesTypeMultiplier, V1ContractListResponseDataAmendmentsOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsScheduledCharge struct {
	ID           string                                                       `json:"id,required" format:"uuid"`
	Product      V1ContractListResponseDataAmendmentsScheduledChargesProduct  `json:"product,required"`
	Schedule     V1ContractListResponseDataAmendmentsScheduledChargesSchedule `json:"schedule,required"`
	ArchivedAt   time.Time                                                    `json:"archived_at" format:"date-time"`
	CustomFields map[string]string                                            `json:"custom_fields"`
	// displayed on invoices
	Name string `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                  `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataAmendmentsScheduledChargeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsScheduledChargeJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsScheduledCharge]
type v1ContractListResponseDataAmendmentsScheduledChargeJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	ArchivedAt           apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsScheduledCharge) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsScheduledChargeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsScheduledChargesProduct struct {
	ID   string                                                          `json:"id,required" format:"uuid"`
	Name string                                                          `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsScheduledChargesProductJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsScheduledChargesProductJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsScheduledChargesProduct]
type v1ContractListResponseDataAmendmentsScheduledChargesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsScheduledChargesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsScheduledChargesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsScheduledChargesSchedule struct {
	CreditType V1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                       `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataAmendmentsScheduledChargesScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataAmendmentsScheduledChargesScheduleJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsScheduledChargesSchedule]
type v1ContractListResponseDataAmendmentsScheduledChargesScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsScheduledChargesSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsScheduledChargesScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditType struct {
	ID   string                                                                     `json:"id,required" format:"uuid"`
	Name string                                                                     `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditType]
type v1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsScheduledChargesScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItem struct {
	ID        string                                                                       `json:"id,required" format:"uuid"`
	Amount    float64                                                                      `json:"amount,required"`
	Quantity  float64                                                                      `json:"quantity,required"`
	Timestamp time.Time                                                                    `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                      `json:"unit_price,required"`
	InvoiceID string                                                                       `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItem]
type v1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsScheduledChargesScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCredit struct {
	ID      string                                             `json:"id,required" format:"uuid"`
	Product V1ContractListResponseDataAmendmentsCreditsProduct `json:"product,required"`
	Type    V1ContractListResponseDataAmendmentsCreditsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        V1ContractListResponseDataAmendmentsCreditsAccessSchedule `json:"access_schedule"`
	ApplicableContractIDs []string                                                  `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string                                                  `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string                                                  `json:"applicable_product_tags"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                             `json:"balance"`
	Contract     V1ContractListResponseDataAmendmentsCreditsContract `json:"contract"`
	CustomFields map[string]string                                   `json:"custom_fields"`
	Description  string                                              `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataAmendmentsCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// A list of ordered events that impact the balance of a credit. For example, an
	// invoice deduction or an expiration.
	Ledger []V1ContractListResponseDataAmendmentsCreditsLedger `json:"ledger"`
	Name   string                                              `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority float64                                             `json:"priority"`
	RateType V1ContractListResponseDataAmendmentsCreditsRateType `json:"rate_type"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataAmendmentsCreditsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                         `json:"uniqueness_key"`
	JSON          v1ContractListResponseDataAmendmentsCreditJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataAmendmentsCredit]
type v1ContractListResponseDataAmendmentsCreditJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCreditsProduct struct {
	ID   string                                                 `json:"id,required" format:"uuid"`
	Name string                                                 `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsCreditsProductJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsProductJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsCreditsProduct]
type v1ContractListResponseDataAmendmentsCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCreditsType string

const (
	V1ContractListResponseDataAmendmentsCreditsTypeCredit V1ContractListResponseDataAmendmentsCreditsType = "CREDIT"
)

func (r V1ContractListResponseDataAmendmentsCreditsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCreditsTypeCredit:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits.
type V1ContractListResponseDataAmendmentsCreditsAccessSchedule struct {
	ScheduleItems []V1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractListResponseDataAmendmentsCreditsAccessScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsAccessScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsAccessSchedule]
type v1ContractListResponseDataAmendmentsCreditsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItem struct {
	ID           string                                                                    `json:"id,required" format:"uuid"`
	Amount       float64                                                                   `json:"amount,required"`
	EndingBefore time.Time                                                                 `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                                 `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItem]
type v1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditType struct {
	ID   string                                                                  `json:"id,required" format:"uuid"`
	Name string                                                                  `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditType]
type v1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCreditsContract struct {
	ID   string                                                  `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataAmendmentsCreditsContractJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsContractJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsCreditsContract]
type v1ContractListResponseDataAmendmentsCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for credit hierarchy access control
type V1ContractListResponseDataAmendmentsCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfiguration]
type v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                      `json:"contract_ids"`
	JSON        v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                               `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCreditsLedger struct {
	Amount     float64                                               `json:"amount,required"`
	Timestamp  time.Time                                             `json:"timestamp,required" format:"date-time"`
	Type       V1ContractListResponseDataAmendmentsCreditsLedgerType `json:"type,required"`
	ContractID string                                                `json:"contract_id" format:"uuid"`
	InvoiceID  string                                                `json:"invoice_id" format:"uuid"`
	Reason     string                                                `json:"reason"`
	SegmentID  string                                                `json:"segment_id" format:"uuid"`
	JSON       v1ContractListResponseDataAmendmentsCreditsLedgerJSON `json:"-"`
	union      V1ContractListResponseDataAmendmentsCreditsLedgerUnion
}

// v1ContractListResponseDataAmendmentsCreditsLedgerJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataAmendmentsCreditsLedger]
type v1ContractListResponseDataAmendmentsCreditsLedgerJSON struct {
	Amount      apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	ContractID  apijson.Field
	InvoiceID   apijson.Field
	Reason      apijson.Field
	SegmentID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataAmendmentsCreditsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataAmendmentsCreditsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataAmendmentsCreditsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataAmendmentsCreditsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject].
func (r V1ContractListResponseDataAmendmentsCreditsLedger) AsUnion() V1ContractListResponseDataAmendmentsCreditsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject],
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject] or
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject].
type V1ContractListResponseDataAmendmentsCreditsLedgerUnion interface {
	implementsV1ContractListResponseDataAmendmentsCreditsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataAmendmentsCreditsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataAmendmentsCreditsLedgerObject{}),
		},
	)
}

type V1ContractListResponseDataAmendmentsCreditsLedgerObject struct {
	Amount    float64                                                     `json:"amount,required"`
	SegmentID string                                                      `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                   `json:"timestamp,required" format:"date-time"`
	Type      V1ContractListResponseDataAmendmentsCreditsLedgerObjectType `json:"type,required"`
	JSON      v1ContractListResponseDataAmendmentsCreditsLedgerObjectJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsLedgerObjectJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsCreditsLedgerObject]
type v1ContractListResponseDataAmendmentsCreditsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataAmendmentsCreditsLedgerObject) implementsV1ContractListResponseDataAmendmentsCreditsLedger() {
}

type V1ContractListResponseDataAmendmentsCreditsLedgerObjectType string

const (
	V1ContractListResponseDataAmendmentsCreditsLedgerObjectTypeCreditSegmentStart V1ContractListResponseDataAmendmentsCreditsLedgerObjectType = "CREDIT_SEGMENT_START"
)

func (r V1ContractListResponseDataAmendmentsCreditsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCreditsLedgerObjectTypeCreditSegmentStart:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCreditsLedgerType string

const (
	V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditSegmentStart              V1ContractListResponseDataAmendmentsCreditsLedgerType = "CREDIT_SEGMENT_START"
	V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditAutomatedInvoiceDeduction V1ContractListResponseDataAmendmentsCreditsLedgerType = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditExpiration                V1ContractListResponseDataAmendmentsCreditsLedgerType = "CREDIT_EXPIRATION"
	V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditCanceled                  V1ContractListResponseDataAmendmentsCreditsLedgerType = "CREDIT_CANCELED"
	V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditCredited                  V1ContractListResponseDataAmendmentsCreditsLedgerType = "CREDIT_CREDITED"
	V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditManual                    V1ContractListResponseDataAmendmentsCreditsLedgerType = "CREDIT_MANUAL"
	V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditSeatBasedAdjustment       V1ContractListResponseDataAmendmentsCreditsLedgerType = "CREDIT_SEAT_BASED_ADJUSTMENT"
)

func (r V1ContractListResponseDataAmendmentsCreditsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditSegmentStart, V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditAutomatedInvoiceDeduction, V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditExpiration, V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditCanceled, V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditCredited, V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditManual, V1ContractListResponseDataAmendmentsCreditsLedgerTypeCreditSeatBasedAdjustment:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCreditsRateType string

const (
	V1ContractListResponseDataAmendmentsCreditsRateTypeCommitRate V1ContractListResponseDataAmendmentsCreditsRateType = "COMMIT_RATE"
	V1ContractListResponseDataAmendmentsCreditsRateTypeListRate   V1ContractListResponseDataAmendmentsCreditsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataAmendmentsCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsCreditsRateTypeCommitRate, V1ContractListResponseDataAmendmentsCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataAmendmentsCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                 `json:"product_tags"`
	JSON        v1ContractListResponseDataAmendmentsCreditsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsCreditsSpecifierJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsCreditsSpecifier]
type v1ContractListResponseDataAmendmentsCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsDiscount struct {
	ID           string                                                `json:"id,required" format:"uuid"`
	Product      V1ContractListResponseDataAmendmentsDiscountsProduct  `json:"product,required"`
	Schedule     V1ContractListResponseDataAmendmentsDiscountsSchedule `json:"schedule,required"`
	CustomFields map[string]string                                     `json:"custom_fields"`
	Name         string                                                `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                           `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataAmendmentsDiscountJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsDiscountJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataAmendmentsDiscount]
type v1ContractListResponseDataAmendmentsDiscountJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsDiscount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsDiscountJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsDiscountsProduct struct {
	ID   string                                                   `json:"id,required" format:"uuid"`
	Name string                                                   `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsDiscountsProductJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsDiscountsProductJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsDiscountsProduct]
type v1ContractListResponseDataAmendmentsDiscountsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsDiscountsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsDiscountsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsDiscountsSchedule struct {
	CreditType V1ContractListResponseDataAmendmentsDiscountsScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataAmendmentsDiscountsScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataAmendmentsDiscountsScheduleJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsDiscountsSchedule]
type v1ContractListResponseDataAmendmentsDiscountsScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsDiscountsSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsDiscountsScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsDiscountsScheduleCreditType struct {
	ID   string                                                              `json:"id,required" format:"uuid"`
	Name string                                                              `json:"name,required"`
	JSON v1ContractListResponseDataAmendmentsDiscountsScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsDiscountsScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsDiscountsScheduleCreditType]
type v1ContractListResponseDataAmendmentsDiscountsScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsDiscountsScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsDiscountsScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItem struct {
	ID        string                                                                `json:"id,required" format:"uuid"`
	Amount    float64                                                               `json:"amount,required"`
	Quantity  float64                                                               `json:"quantity,required"`
	Timestamp time.Time                                                             `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                               `json:"unit_price,required"`
	InvoiceID string                                                                `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItem]
type v1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsDiscountsScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsProfessionalService struct {
	ID string `json:"id,required" format:"uuid"`
	// Maximum amount for the term.
	MaxAmount float64 `json:"max_amount,required"`
	ProductID string  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity float64 `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    float64           `json:"unit_price,required"`
	CustomFields map[string]string `json:"custom_fields"`
	Description  string            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                      `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataAmendmentsProfessionalServiceJSON `json:"-"`
}

// v1ContractListResponseDataAmendmentsProfessionalServiceJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataAmendmentsProfessionalService]
type v1ContractListResponseDataAmendmentsProfessionalServiceJSON struct {
	ID                   apijson.Field
	MaxAmount            apijson.Field
	ProductID            apijson.Field
	Quantity             apijson.Field
	UnitPrice            apijson.Field
	CustomFields         apijson.Field
	Description          apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsProfessionalService) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsProfessionalServiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsResellerRoyalty struct {
	ResellerType          V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerType `json:"reseller_type,required"`
	AwsAccountNumber      string                                                            `json:"aws_account_number"`
	AwsOfferID            string                                                            `json:"aws_offer_id"`
	AwsPayerReferenceID   string                                                            `json:"aws_payer_reference_id"`
	EndingBefore          time.Time                                                         `json:"ending_before,nullable" format:"date-time"`
	Fraction              float64                                                           `json:"fraction"`
	GcpAccountID          string                                                            `json:"gcp_account_id"`
	GcpOfferID            string                                                            `json:"gcp_offer_id"`
	NetsuiteResellerID    string                                                            `json:"netsuite_reseller_id"`
	ResellerContractValue float64                                                           `json:"reseller_contract_value"`
	StartingAt            time.Time                                                         `json:"starting_at" format:"date-time"`
	JSON                  v1ContractListResponseDataAmendmentsResellerRoyaltyJSON           `json:"-"`
}

// v1ContractListResponseDataAmendmentsResellerRoyaltyJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataAmendmentsResellerRoyalty]
type v1ContractListResponseDataAmendmentsResellerRoyaltyJSON struct {
	ResellerType          apijson.Field
	AwsAccountNumber      apijson.Field
	AwsOfferID            apijson.Field
	AwsPayerReferenceID   apijson.Field
	EndingBefore          apijson.Field
	Fraction              apijson.Field
	GcpAccountID          apijson.Field
	GcpOfferID            apijson.Field
	NetsuiteResellerID    apijson.Field
	ResellerContractValue apijson.Field
	StartingAt            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataAmendmentsResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataAmendmentsResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerType string

const (
	V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeAws           V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerType = "AWS"
	V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeAwsProService V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeGcp           V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerType = "GCP"
	V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeGcpProService V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeAws, V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeAwsProService, V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeGcp, V1ContractListResponseDataAmendmentsResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrent struct {
	Commits                []V1ContractListResponseDataCurrentCommit               `json:"commits,required"`
	CreatedAt              time.Time                                               `json:"created_at,required" format:"date-time"`
	CreatedBy              string                                                  `json:"created_by,required"`
	Overrides              []V1ContractListResponseDataCurrentOverride             `json:"overrides,required"`
	ScheduledCharges       []V1ContractListResponseDataCurrentScheduledCharge      `json:"scheduled_charges,required"`
	StartingAt             time.Time                                               `json:"starting_at,required" format:"date-time"`
	Transitions            []V1ContractListResponseDataCurrentTransition           `json:"transitions,required"`
	UsageStatementSchedule V1ContractListResponseDataCurrentUsageStatementSchedule `json:"usage_statement_schedule,required"`
	Credits                []V1ContractListResponseDataCurrentCredit               `json:"credits"`
	// This field's availability is dependent on your client's configuration.
	Discounts    []V1ContractListResponseDataCurrentDiscount `json:"discounts"`
	EndingBefore time.Time                                   `json:"ending_before" format:"date-time"`
	// Either a **parent** configuration with a list of children or a **child**
	// configuration with a single parent.
	HierarchyConfiguration V1ContractListResponseDataCurrentHierarchyConfiguration `json:"hierarchy_configuration"`
	Name                   string                                                  `json:"name"`
	NetPaymentTermsDays    float64                                                 `json:"net_payment_terms_days"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID                 string                                                                `json:"netsuite_sales_order_id"`
	PrepaidBalanceThresholdConfiguration V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfiguration `json:"prepaid_balance_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []V1ContractListResponseDataCurrentProfessionalService `json:"professional_services"`
	RateCardID           string                                                 `json:"rate_card_id" format:"uuid"`
	RecurringCommits     []V1ContractListResponseDataCurrentRecurringCommit     `json:"recurring_commits"`
	RecurringCredits     []V1ContractListResponseDataCurrentRecurringCredit     `json:"recurring_credits"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []V1ContractListResponseDataCurrentResellerRoyalty `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// Determines which scheduled and commit charges to consolidate onto the Contract's
	// usage invoice. The charge's `timestamp` must match the usage invoice's
	// `ending_before` date for consolidation to occur. This field cannot be modified
	// after a Contract has been created. If this field is omitted, charges will appear
	// on a separate invoice from usage charges.
	ScheduledChargesOnUsageInvoices V1ContractListResponseDataCurrentScheduledChargesOnUsageInvoices `json:"scheduled_charges_on_usage_invoices"`
	SpendThresholdConfiguration     V1ContractListResponseDataCurrentSpendThresholdConfiguration     `json:"spend_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue float64                                      `json:"total_contract_value"`
	UsageFilter        V1ContractListResponseDataCurrentUsageFilter `json:"usage_filter"`
	JSON               v1ContractListResponseDataCurrentJSON        `json:"-"`
}

// v1ContractListResponseDataCurrentJSON contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrent]
type v1ContractListResponseDataCurrentJSON struct {
	Commits                              apijson.Field
	CreatedAt                            apijson.Field
	CreatedBy                            apijson.Field
	Overrides                            apijson.Field
	ScheduledCharges                     apijson.Field
	StartingAt                           apijson.Field
	Transitions                          apijson.Field
	UsageStatementSchedule               apijson.Field
	Credits                              apijson.Field
	Discounts                            apijson.Field
	EndingBefore                         apijson.Field
	HierarchyConfiguration               apijson.Field
	Name                                 apijson.Field
	NetPaymentTermsDays                  apijson.Field
	NetsuiteSalesOrderID                 apijson.Field
	PrepaidBalanceThresholdConfiguration apijson.Field
	ProfessionalServices                 apijson.Field
	RateCardID                           apijson.Field
	RecurringCommits                     apijson.Field
	RecurringCredits                     apijson.Field
	ResellerRoyalties                    apijson.Field
	SalesforceOpportunityID              apijson.Field
	ScheduledChargesOnUsageInvoices      apijson.Field
	SpendThresholdConfiguration          apijson.Field
	TotalContractValue                   apijson.Field
	UsageFilter                          apijson.Field
	raw                                  string
	ExtraFields                          map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommit struct {
	ID      string                                          `json:"id,required" format:"uuid"`
	Product V1ContractListResponseDataCurrentCommitsProduct `json:"product,required"`
	Type    V1ContractListResponseDataCurrentCommitsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits purposed with
	// this commit.
	AccessSchedule V1ContractListResponseDataCurrentCommitsAccessSchedule `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount                float64  `json:"amount"`
	ApplicableContractIDs []string `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                          `json:"balance"`
	Contract     V1ContractListResponseDataCurrentCommitsContract `json:"contract"`
	CustomFields map[string]string                                `json:"custom_fields"`
	Description  string                                           `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataCurrentCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The contract that this commit will be billed on.
	InvoiceContract V1ContractListResponseDataCurrentCommitsInvoiceContract `json:"invoice_contract"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule V1ContractListResponseDataCurrentCommitsInvoiceSchedule `json:"invoice_schedule"`
	// A list of ordered events that impact the balance of a commit. For example, an
	// invoice deduction or a rollover.
	Ledger []V1ContractListResponseDataCurrentCommitsLedger `json:"ledger"`
	Name   string                                           `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority         float64                                                `json:"priority"`
	RateType         V1ContractListResponseDataCurrentCommitsRateType       `json:"rate_type"`
	RolledOverFrom   V1ContractListResponseDataCurrentCommitsRolledOverFrom `json:"rolled_over_from"`
	RolloverFraction float64                                                `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataCurrentCommitsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                      `json:"uniqueness_key"`
	JSON          v1ContractListResponseDataCurrentCommitJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataCurrentCommit]
type v1ContractListResponseDataCurrentCommitJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsProduct struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	Name string                                              `json:"name,required"`
	JSON v1ContractListResponseDataCurrentCommitsProductJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCommitsProduct]
type v1ContractListResponseDataCurrentCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsType string

const (
	V1ContractListResponseDataCurrentCommitsTypePrepaid  V1ContractListResponseDataCurrentCommitsType = "PREPAID"
	V1ContractListResponseDataCurrentCommitsTypePostpaid V1ContractListResponseDataCurrentCommitsType = "POSTPAID"
)

func (r V1ContractListResponseDataCurrentCommitsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCommitsTypePrepaid, V1ContractListResponseDataCurrentCommitsTypePostpaid:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits purposed with
// this commit.
type V1ContractListResponseDataCurrentCommitsAccessSchedule struct {
	ScheduleItems []V1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractListResponseDataCurrentCommitsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractListResponseDataCurrentCommitsAccessScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentCommitsAccessSchedule]
type v1ContractListResponseDataCurrentCommitsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItem struct {
	ID           string                                                                 `json:"id,required" format:"uuid"`
	Amount       float64                                                                `json:"amount,required"`
	EndingBefore time.Time                                                              `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                              `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItem]
type v1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsAccessScheduleCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractListResponseDataCurrentCommitsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsAccessScheduleCreditType]
type v1ContractListResponseDataCurrentCommitsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsContract struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataCurrentCommitsContractJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsContractJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCommitsContract]
type v1ContractListResponseDataCurrentCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for commit hierarchy access control
type V1ContractListResponseDataCurrentCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataCurrentCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsHierarchyConfiguration]
type v1ContractListResponseDataCurrentCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                   `json:"contract_ids"`
	JSON        v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                            `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The contract that this commit will be billed on.
type V1ContractListResponseDataCurrentCommitsInvoiceContract struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataCurrentCommitsInvoiceContractJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsInvoiceContractJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentCommitsInvoiceContract]
type v1ContractListResponseDataCurrentCommitsInvoiceContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsInvoiceContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsInvoiceContractJSON) RawJSON() string {
	return r.raw
}

// The schedule that the customer will be invoiced for this commit.
type V1ContractListResponseDataCurrentCommitsInvoiceSchedule struct {
	CreditType V1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                  `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataCurrentCommitsInvoiceScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsInvoiceScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentCommitsInvoiceSchedule]
type v1ContractListResponseDataCurrentCommitsInvoiceScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsInvoiceSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsInvoiceScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditType struct {
	ID   string                                                                `json:"id,required" format:"uuid"`
	Name string                                                                `json:"name,required"`
	JSON v1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditType]
type v1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsInvoiceScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItem struct {
	ID        string                                                                  `json:"id,required" format:"uuid"`
	Amount    float64                                                                 `json:"amount,required"`
	Quantity  float64                                                                 `json:"quantity,required"`
	Timestamp time.Time                                                               `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                 `json:"unit_price,required"`
	InvoiceID string                                                                  `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItem]
type v1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsInvoiceScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsLedger struct {
	Amount        float64                                            `json:"amount,required"`
	Timestamp     time.Time                                          `json:"timestamp,required" format:"date-time"`
	Type          V1ContractListResponseDataCurrentCommitsLedgerType `json:"type,required"`
	ContractID    string                                             `json:"contract_id" format:"uuid"`
	InvoiceID     string                                             `json:"invoice_id" format:"uuid"`
	NewContractID string                                             `json:"new_contract_id" format:"uuid"`
	Reason        string                                             `json:"reason"`
	SegmentID     string                                             `json:"segment_id" format:"uuid"`
	JSON          v1ContractListResponseDataCurrentCommitsLedgerJSON `json:"-"`
	union         V1ContractListResponseDataCurrentCommitsLedgerUnion
}

// v1ContractListResponseDataCurrentCommitsLedgerJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCommitsLedger]
type v1ContractListResponseDataCurrentCommitsLedgerJSON struct {
	Amount        apijson.Field
	Timestamp     apijson.Field
	Type          apijson.Field
	ContractID    apijson.Field
	InvoiceID     apijson.Field
	NewContractID apijson.Field
	Reason        apijson.Field
	SegmentID     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r v1ContractListResponseDataCurrentCommitsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataCurrentCommitsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataCurrentCommitsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataCurrentCommitsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject].
func (r V1ContractListResponseDataCurrentCommitsLedger) AsUnion() V1ContractListResponseDataCurrentCommitsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject],
// [V1ContractListResponseDataCurrentCommitsLedgerObject] or
// [V1ContractListResponseDataCurrentCommitsLedgerObject].
type V1ContractListResponseDataCurrentCommitsLedgerUnion interface {
	implementsV1ContractListResponseDataCurrentCommitsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataCurrentCommitsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCommitsLedgerObject{}),
		},
	)
}

type V1ContractListResponseDataCurrentCommitsLedgerObject struct {
	Amount    float64                                                  `json:"amount,required"`
	SegmentID string                                                   `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                `json:"timestamp,required" format:"date-time"`
	Type      V1ContractListResponseDataCurrentCommitsLedgerObjectType `json:"type,required"`
	JSON      v1ContractListResponseDataCurrentCommitsLedgerObjectJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentCommitsLedgerObject]
type v1ContractListResponseDataCurrentCommitsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentCommitsLedgerObject) implementsV1ContractListResponseDataCurrentCommitsLedger() {
}

type V1ContractListResponseDataCurrentCommitsLedgerObjectType string

const (
	V1ContractListResponseDataCurrentCommitsLedgerObjectTypePrepaidCommitSegmentStart V1ContractListResponseDataCurrentCommitsLedgerObjectType = "PREPAID_COMMIT_SEGMENT_START"
)

func (r V1ContractListResponseDataCurrentCommitsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCommitsLedgerObjectTypePrepaidCommitSegmentStart:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCommitsLedgerType string

const (
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitSegmentStart               V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_SEGMENT_START"
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction  V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitRollover                   V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_ROLLOVER"
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitExpiration                 V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_EXPIRATION"
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitCanceled                   V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_CANCELED"
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitCredited                   V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_CREDITED"
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitSeatBasedAdjustment        V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"
	V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitInitialBalance            V1ContractListResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_INITIAL_BALANCE"
	V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction V1ContractListResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitRollover                  V1ContractListResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_ROLLOVER"
	V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitTrueup                    V1ContractListResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_TRUEUP"
	V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitManual                     V1ContractListResponseDataCurrentCommitsLedgerType = "PREPAID_COMMIT_MANUAL"
	V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitManual                    V1ContractListResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_MANUAL"
	V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitExpiration                V1ContractListResponseDataCurrentCommitsLedgerType = "POSTPAID_COMMIT_EXPIRATION"
)

func (r V1ContractListResponseDataCurrentCommitsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitSegmentStart, V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction, V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitRollover, V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitExpiration, V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitCanceled, V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitCredited, V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitSeatBasedAdjustment, V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitInitialBalance, V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction, V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitRollover, V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitTrueup, V1ContractListResponseDataCurrentCommitsLedgerTypePrepaidCommitManual, V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitManual, V1ContractListResponseDataCurrentCommitsLedgerTypePostpaidCommitExpiration:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCommitsRateType string

const (
	V1ContractListResponseDataCurrentCommitsRateTypeCommitRate V1ContractListResponseDataCurrentCommitsRateType = "COMMIT_RATE"
	V1ContractListResponseDataCurrentCommitsRateTypeListRate   V1ContractListResponseDataCurrentCommitsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataCurrentCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCommitsRateTypeCommitRate, V1ContractListResponseDataCurrentCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCommitsRolledOverFrom struct {
	CommitID   string                                                     `json:"commit_id,required" format:"uuid"`
	ContractID string                                                     `json:"contract_id,required" format:"uuid"`
	JSON       v1ContractListResponseDataCurrentCommitsRolledOverFromJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsRolledOverFromJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentCommitsRolledOverFrom]
type v1ContractListResponseDataCurrentCommitsRolledOverFromJSON struct {
	CommitID    apijson.Field
	ContractID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsRolledOverFrom) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsRolledOverFromJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                              `json:"product_tags"`
	JSON        v1ContractListResponseDataCurrentCommitsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCommitsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCommitsSpecifier]
type v1ContractListResponseDataCurrentCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverride struct {
	ID                    string                                               `json:"id,required" format:"uuid"`
	StartingAt            time.Time                                            `json:"starting_at,required" format:"date-time"`
	ApplicableProductTags []string                                             `json:"applicable_product_tags"`
	CreditType            V1ContractListResponseDataCurrentOverridesCreditType `json:"credit_type"`
	EndingBefore          time.Time                                            `json:"ending_before" format:"date-time"`
	Entitled              bool                                                 `json:"entitled"`
	IsCommitSpecific      bool                                                 `json:"is_commit_specific"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated         bool                                                          `json:"is_prorated"`
	Multiplier         float64                                                       `json:"multiplier"`
	OverrideSpecifiers []V1ContractListResponseDataCurrentOverridesOverrideSpecifier `json:"override_specifiers"`
	OverrideTiers      []V1ContractListResponseDataCurrentOverridesOverrideTier      `json:"override_tiers"`
	OverwriteRate      V1ContractListResponseDataCurrentOverridesOverwriteRate       `json:"overwrite_rate"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price    float64                                           `json:"price"`
	Priority float64                                           `json:"priority"`
	Product  V1ContractListResponseDataCurrentOverridesProduct `json:"product"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64                                            `json:"quantity"`
	RateType V1ContractListResponseDataCurrentOverridesRateType `json:"rate_type"`
	Target   V1ContractListResponseDataCurrentOverridesTarget   `json:"target"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractListResponseDataCurrentOverridesTier `json:"tiers"`
	Type  V1ContractListResponseDataCurrentOverridesType   `json:"type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	Value map[string]interface{}                        `json:"value"`
	JSON  v1ContractListResponseDataCurrentOverrideJSON `json:"-"`
}

// v1ContractListResponseDataCurrentOverrideJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataCurrentOverride]
type v1ContractListResponseDataCurrentOverrideJSON struct {
	ID                    apijson.Field
	StartingAt            apijson.Field
	ApplicableProductTags apijson.Field
	CreditType            apijson.Field
	EndingBefore          apijson.Field
	Entitled              apijson.Field
	IsCommitSpecific      apijson.Field
	IsProrated            apijson.Field
	Multiplier            apijson.Field
	OverrideSpecifiers    apijson.Field
	OverrideTiers         apijson.Field
	OverwriteRate         apijson.Field
	Price                 apijson.Field
	Priority              apijson.Field
	Product               apijson.Field
	Quantity              apijson.Field
	RateType              apijson.Field
	Target                apijson.Field
	Tiers                 apijson.Field
	Type                  apijson.Field
	Value                 apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverride) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverrideJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesCreditType struct {
	ID   string                                                   `json:"id,required" format:"uuid"`
	Name string                                                   `json:"name,required"`
	JSON v1ContractListResponseDataCurrentOverridesCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesCreditTypeJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentOverridesCreditType]
type v1ContractListResponseDataCurrentOverridesCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesOverrideSpecifier struct {
	BillingFrequency        V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency `json:"billing_frequency"`
	CommitIDs               []string                                                                     `json:"commit_ids"`
	PresentationGroupValues map[string]string                                                            `json:"presentation_group_values"`
	PricingGroupValues      map[string]string                                                            `json:"pricing_group_values"`
	ProductID               string                                                                       `json:"product_id" format:"uuid"`
	ProductTags             []string                                                                     `json:"product_tags"`
	RecurringCommitIDs      []string                                                                     `json:"recurring_commit_ids"`
	RecurringCreditIDs      []string                                                                     `json:"recurring_credit_ids"`
	JSON                    v1ContractListResponseDataCurrentOverridesOverrideSpecifierJSON              `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesOverrideSpecifierJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentOverridesOverrideSpecifier]
type v1ContractListResponseDataCurrentOverridesOverrideSpecifierJSON struct {
	BillingFrequency        apijson.Field
	CommitIDs               apijson.Field
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	RecurringCommitIDs      apijson.Field
	RecurringCreditIDs      apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesOverrideSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesOverrideSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractListResponseDataCurrentOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentOverridesOverrideTier struct {
	Multiplier float64                                                    `json:"multiplier,required"`
	Size       float64                                                    `json:"size"`
	JSON       v1ContractListResponseDataCurrentOverridesOverrideTierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesOverrideTierJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentOverridesOverrideTier]
type v1ContractListResponseDataCurrentOverridesOverrideTierJSON struct {
	Multiplier  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesOverrideTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesOverrideTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesOverwriteRate struct {
	RateType   V1ContractListResponseDataCurrentOverridesOverwriteRateRateType   `json:"rate_type,required"`
	CreditType V1ContractListResponseDataCurrentOverridesOverwriteRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractListResponseDataCurrentOverridesOverwriteRateTier `json:"tiers"`
	JSON  v1ContractListResponseDataCurrentOverridesOverwriteRateJSON   `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesOverwriteRateJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentOverridesOverwriteRate]
type v1ContractListResponseDataCurrentOverridesOverwriteRateJSON struct {
	RateType    apijson.Field
	CreditType  apijson.Field
	CustomRate  apijson.Field
	IsProrated  apijson.Field
	Price       apijson.Field
	Quantity    apijson.Field
	Tiers       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesOverwriteRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesOverwriteRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesOverwriteRateRateType string

const (
	V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeFlat         V1ContractListResponseDataCurrentOverridesOverwriteRateRateType = "FLAT"
	V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypePercentage   V1ContractListResponseDataCurrentOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeSubscription V1ContractListResponseDataCurrentOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeTiered       V1ContractListResponseDataCurrentOverridesOverwriteRateRateType = "TIERED"
	V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeCustom       V1ContractListResponseDataCurrentOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractListResponseDataCurrentOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeFlat, V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypePercentage, V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeSubscription, V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeTiered, V1ContractListResponseDataCurrentOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentOverridesOverwriteRateCreditType struct {
	ID   string                                                                `json:"id,required" format:"uuid"`
	Name string                                                                `json:"name,required"`
	JSON v1ContractListResponseDataCurrentOverridesOverwriteRateCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesOverwriteRateCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentOverridesOverwriteRateCreditType]
type v1ContractListResponseDataCurrentOverridesOverwriteRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesOverwriteRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesOverwriteRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesOverwriteRateTier struct {
	Price float64                                                         `json:"price,required"`
	Size  float64                                                         `json:"size"`
	JSON  v1ContractListResponseDataCurrentOverridesOverwriteRateTierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesOverwriteRateTierJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentOverridesOverwriteRateTier]
type v1ContractListResponseDataCurrentOverridesOverwriteRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesOverwriteRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesOverwriteRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesProduct struct {
	ID   string                                                `json:"id,required" format:"uuid"`
	Name string                                                `json:"name,required"`
	JSON v1ContractListResponseDataCurrentOverridesProductJSON `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentOverridesProduct]
type v1ContractListResponseDataCurrentOverridesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesRateType string

const (
	V1ContractListResponseDataCurrentOverridesRateTypeFlat         V1ContractListResponseDataCurrentOverridesRateType = "FLAT"
	V1ContractListResponseDataCurrentOverridesRateTypePercentage   V1ContractListResponseDataCurrentOverridesRateType = "PERCENTAGE"
	V1ContractListResponseDataCurrentOverridesRateTypeSubscription V1ContractListResponseDataCurrentOverridesRateType = "SUBSCRIPTION"
	V1ContractListResponseDataCurrentOverridesRateTypeTiered       V1ContractListResponseDataCurrentOverridesRateType = "TIERED"
	V1ContractListResponseDataCurrentOverridesRateTypeCustom       V1ContractListResponseDataCurrentOverridesRateType = "CUSTOM"
)

func (r V1ContractListResponseDataCurrentOverridesRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentOverridesRateTypeFlat, V1ContractListResponseDataCurrentOverridesRateTypePercentage, V1ContractListResponseDataCurrentOverridesRateTypeSubscription, V1ContractListResponseDataCurrentOverridesRateTypeTiered, V1ContractListResponseDataCurrentOverridesRateTypeCustom:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentOverridesTarget string

const (
	V1ContractListResponseDataCurrentOverridesTargetCommitRate V1ContractListResponseDataCurrentOverridesTarget = "COMMIT_RATE"
	V1ContractListResponseDataCurrentOverridesTargetListRate   V1ContractListResponseDataCurrentOverridesTarget = "LIST_RATE"
)

func (r V1ContractListResponseDataCurrentOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentOverridesTargetCommitRate, V1ContractListResponseDataCurrentOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentOverridesTier struct {
	Price float64                                            `json:"price,required"`
	Size  float64                                            `json:"size"`
	JSON  v1ContractListResponseDataCurrentOverridesTierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentOverridesTierJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentOverridesTier]
type v1ContractListResponseDataCurrentOverridesTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentOverridesTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentOverridesTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentOverridesType string

const (
	V1ContractListResponseDataCurrentOverridesTypeOverwrite  V1ContractListResponseDataCurrentOverridesType = "OVERWRITE"
	V1ContractListResponseDataCurrentOverridesTypeMultiplier V1ContractListResponseDataCurrentOverridesType = "MULTIPLIER"
	V1ContractListResponseDataCurrentOverridesTypeTiered     V1ContractListResponseDataCurrentOverridesType = "TIERED"
)

func (r V1ContractListResponseDataCurrentOverridesType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentOverridesTypeOverwrite, V1ContractListResponseDataCurrentOverridesTypeMultiplier, V1ContractListResponseDataCurrentOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentScheduledCharge struct {
	ID           string                                                    `json:"id,required" format:"uuid"`
	Product      V1ContractListResponseDataCurrentScheduledChargesProduct  `json:"product,required"`
	Schedule     V1ContractListResponseDataCurrentScheduledChargesSchedule `json:"schedule,required"`
	ArchivedAt   time.Time                                                 `json:"archived_at" format:"date-time"`
	CustomFields map[string]string                                         `json:"custom_fields"`
	// displayed on invoices
	Name string `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                               `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataCurrentScheduledChargeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentScheduledChargeJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentScheduledCharge]
type v1ContractListResponseDataCurrentScheduledChargeJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	ArchivedAt           apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentScheduledCharge) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentScheduledChargeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentScheduledChargesProduct struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	Name string                                                       `json:"name,required"`
	JSON v1ContractListResponseDataCurrentScheduledChargesProductJSON `json:"-"`
}

// v1ContractListResponseDataCurrentScheduledChargesProductJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentScheduledChargesProduct]
type v1ContractListResponseDataCurrentScheduledChargesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentScheduledChargesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentScheduledChargesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentScheduledChargesSchedule struct {
	CreditType V1ContractListResponseDataCurrentScheduledChargesScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                    `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataCurrentScheduledChargesScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataCurrentScheduledChargesScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentScheduledChargesSchedule]
type v1ContractListResponseDataCurrentScheduledChargesScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentScheduledChargesSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentScheduledChargesScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentScheduledChargesScheduleCreditType struct {
	ID   string                                                                  `json:"id,required" format:"uuid"`
	Name string                                                                  `json:"name,required"`
	JSON v1ContractListResponseDataCurrentScheduledChargesScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentScheduledChargesScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentScheduledChargesScheduleCreditType]
type v1ContractListResponseDataCurrentScheduledChargesScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentScheduledChargesScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentScheduledChargesScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItem struct {
	ID        string                                                                    `json:"id,required" format:"uuid"`
	Amount    float64                                                                   `json:"amount,required"`
	Quantity  float64                                                                   `json:"quantity,required"`
	Timestamp time.Time                                                                 `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                   `json:"unit_price,required"`
	InvoiceID string                                                                    `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItem]
type v1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentScheduledChargesScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentTransition struct {
	FromContractID string                                           `json:"from_contract_id,required" format:"uuid"`
	ToContractID   string                                           `json:"to_contract_id,required" format:"uuid"`
	Type           V1ContractListResponseDataCurrentTransitionsType `json:"type,required"`
	JSON           v1ContractListResponseDataCurrentTransitionJSON  `json:"-"`
}

// v1ContractListResponseDataCurrentTransitionJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataCurrentTransition]
type v1ContractListResponseDataCurrentTransitionJSON struct {
	FromContractID apijson.Field
	ToContractID   apijson.Field
	Type           apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentTransition) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentTransitionJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentTransitionsType string

const (
	V1ContractListResponseDataCurrentTransitionsTypeSupersede V1ContractListResponseDataCurrentTransitionsType = "SUPERSEDE"
	V1ContractListResponseDataCurrentTransitionsTypeRenewal   V1ContractListResponseDataCurrentTransitionsType = "RENEWAL"
)

func (r V1ContractListResponseDataCurrentTransitionsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentTransitionsTypeSupersede, V1ContractListResponseDataCurrentTransitionsTypeRenewal:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentUsageStatementSchedule struct {
	// Contract usage statements follow a selected cadence based on this date.
	BillingAnchorDate time.Time                                                        `json:"billing_anchor_date,required" format:"date-time"`
	Frequency         V1ContractListResponseDataCurrentUsageStatementScheduleFrequency `json:"frequency,required"`
	JSON              v1ContractListResponseDataCurrentUsageStatementScheduleJSON      `json:"-"`
}

// v1ContractListResponseDataCurrentUsageStatementScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentUsageStatementSchedule]
type v1ContractListResponseDataCurrentUsageStatementScheduleJSON struct {
	BillingAnchorDate apijson.Field
	Frequency         apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentUsageStatementSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentUsageStatementScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentUsageStatementScheduleFrequency string

const (
	V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyMonthly   V1ContractListResponseDataCurrentUsageStatementScheduleFrequency = "MONTHLY"
	V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyQuarterly V1ContractListResponseDataCurrentUsageStatementScheduleFrequency = "QUARTERLY"
	V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyAnnual    V1ContractListResponseDataCurrentUsageStatementScheduleFrequency = "ANNUAL"
	V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyWeekly    V1ContractListResponseDataCurrentUsageStatementScheduleFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataCurrentUsageStatementScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyMonthly, V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyQuarterly, V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyAnnual, V1ContractListResponseDataCurrentUsageStatementScheduleFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCredit struct {
	ID      string                                          `json:"id,required" format:"uuid"`
	Product V1ContractListResponseDataCurrentCreditsProduct `json:"product,required"`
	Type    V1ContractListResponseDataCurrentCreditsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        V1ContractListResponseDataCurrentCreditsAccessSchedule `json:"access_schedule"`
	ApplicableContractIDs []string                                               `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string                                               `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string                                               `json:"applicable_product_tags"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                          `json:"balance"`
	Contract     V1ContractListResponseDataCurrentCreditsContract `json:"contract"`
	CustomFields map[string]string                                `json:"custom_fields"`
	Description  string                                           `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataCurrentCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// A list of ordered events that impact the balance of a credit. For example, an
	// invoice deduction or an expiration.
	Ledger []V1ContractListResponseDataCurrentCreditsLedger `json:"ledger"`
	Name   string                                           `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority float64                                          `json:"priority"`
	RateType V1ContractListResponseDataCurrentCreditsRateType `json:"rate_type"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataCurrentCreditsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                      `json:"uniqueness_key"`
	JSON          v1ContractListResponseDataCurrentCreditJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataCurrentCredit]
type v1ContractListResponseDataCurrentCreditJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCreditsProduct struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	Name string                                              `json:"name,required"`
	JSON v1ContractListResponseDataCurrentCreditsProductJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCreditsProduct]
type v1ContractListResponseDataCurrentCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCreditsType string

const (
	V1ContractListResponseDataCurrentCreditsTypeCredit V1ContractListResponseDataCurrentCreditsType = "CREDIT"
)

func (r V1ContractListResponseDataCurrentCreditsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCreditsTypeCredit:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits.
type V1ContractListResponseDataCurrentCreditsAccessSchedule struct {
	ScheduleItems []V1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractListResponseDataCurrentCreditsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractListResponseDataCurrentCreditsAccessScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentCreditsAccessSchedule]
type v1ContractListResponseDataCurrentCreditsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItem struct {
	ID           string                                                                 `json:"id,required" format:"uuid"`
	Amount       float64                                                                `json:"amount,required"`
	EndingBefore time.Time                                                              `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                              `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItem]
type v1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCreditsAccessScheduleCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractListResponseDataCurrentCreditsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCreditsAccessScheduleCreditType]
type v1ContractListResponseDataCurrentCreditsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCreditsContract struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataCurrentCreditsContractJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsContractJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCreditsContract]
type v1ContractListResponseDataCurrentCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for credit hierarchy access control
type V1ContractListResponseDataCurrentCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataCurrentCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentCreditsHierarchyConfiguration]
type v1ContractListResponseDataCurrentCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                   `json:"contract_ids"`
	JSON        v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                            `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCreditsLedger struct {
	Amount     float64                                            `json:"amount,required"`
	Timestamp  time.Time                                          `json:"timestamp,required" format:"date-time"`
	Type       V1ContractListResponseDataCurrentCreditsLedgerType `json:"type,required"`
	ContractID string                                             `json:"contract_id" format:"uuid"`
	InvoiceID  string                                             `json:"invoice_id" format:"uuid"`
	Reason     string                                             `json:"reason"`
	SegmentID  string                                             `json:"segment_id" format:"uuid"`
	JSON       v1ContractListResponseDataCurrentCreditsLedgerJSON `json:"-"`
	union      V1ContractListResponseDataCurrentCreditsLedgerUnion
}

// v1ContractListResponseDataCurrentCreditsLedgerJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCreditsLedger]
type v1ContractListResponseDataCurrentCreditsLedgerJSON struct {
	Amount      apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	ContractID  apijson.Field
	InvoiceID   apijson.Field
	Reason      apijson.Field
	SegmentID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataCurrentCreditsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataCurrentCreditsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataCurrentCreditsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataCurrentCreditsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject].
func (r V1ContractListResponseDataCurrentCreditsLedger) AsUnion() V1ContractListResponseDataCurrentCreditsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject],
// [V1ContractListResponseDataCurrentCreditsLedgerObject] or
// [V1ContractListResponseDataCurrentCreditsLedgerObject].
type V1ContractListResponseDataCurrentCreditsLedgerUnion interface {
	implementsV1ContractListResponseDataCurrentCreditsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataCurrentCreditsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentCreditsLedgerObject{}),
		},
	)
}

type V1ContractListResponseDataCurrentCreditsLedgerObject struct {
	Amount    float64                                                  `json:"amount,required"`
	SegmentID string                                                   `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                `json:"timestamp,required" format:"date-time"`
	Type      V1ContractListResponseDataCurrentCreditsLedgerObjectType `json:"type,required"`
	JSON      v1ContractListResponseDataCurrentCreditsLedgerObjectJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentCreditsLedgerObject]
type v1ContractListResponseDataCurrentCreditsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentCreditsLedgerObject) implementsV1ContractListResponseDataCurrentCreditsLedger() {
}

type V1ContractListResponseDataCurrentCreditsLedgerObjectType string

const (
	V1ContractListResponseDataCurrentCreditsLedgerObjectTypeCreditSegmentStart V1ContractListResponseDataCurrentCreditsLedgerObjectType = "CREDIT_SEGMENT_START"
)

func (r V1ContractListResponseDataCurrentCreditsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCreditsLedgerObjectTypeCreditSegmentStart:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCreditsLedgerType string

const (
	V1ContractListResponseDataCurrentCreditsLedgerTypeCreditSegmentStart              V1ContractListResponseDataCurrentCreditsLedgerType = "CREDIT_SEGMENT_START"
	V1ContractListResponseDataCurrentCreditsLedgerTypeCreditAutomatedInvoiceDeduction V1ContractListResponseDataCurrentCreditsLedgerType = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataCurrentCreditsLedgerTypeCreditExpiration                V1ContractListResponseDataCurrentCreditsLedgerType = "CREDIT_EXPIRATION"
	V1ContractListResponseDataCurrentCreditsLedgerTypeCreditCanceled                  V1ContractListResponseDataCurrentCreditsLedgerType = "CREDIT_CANCELED"
	V1ContractListResponseDataCurrentCreditsLedgerTypeCreditCredited                  V1ContractListResponseDataCurrentCreditsLedgerType = "CREDIT_CREDITED"
	V1ContractListResponseDataCurrentCreditsLedgerTypeCreditManual                    V1ContractListResponseDataCurrentCreditsLedgerType = "CREDIT_MANUAL"
	V1ContractListResponseDataCurrentCreditsLedgerTypeCreditSeatBasedAdjustment       V1ContractListResponseDataCurrentCreditsLedgerType = "CREDIT_SEAT_BASED_ADJUSTMENT"
)

func (r V1ContractListResponseDataCurrentCreditsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCreditsLedgerTypeCreditSegmentStart, V1ContractListResponseDataCurrentCreditsLedgerTypeCreditAutomatedInvoiceDeduction, V1ContractListResponseDataCurrentCreditsLedgerTypeCreditExpiration, V1ContractListResponseDataCurrentCreditsLedgerTypeCreditCanceled, V1ContractListResponseDataCurrentCreditsLedgerTypeCreditCredited, V1ContractListResponseDataCurrentCreditsLedgerTypeCreditManual, V1ContractListResponseDataCurrentCreditsLedgerTypeCreditSeatBasedAdjustment:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCreditsRateType string

const (
	V1ContractListResponseDataCurrentCreditsRateTypeCommitRate V1ContractListResponseDataCurrentCreditsRateType = "COMMIT_RATE"
	V1ContractListResponseDataCurrentCreditsRateTypeListRate   V1ContractListResponseDataCurrentCreditsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataCurrentCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentCreditsRateTypeCommitRate, V1ContractListResponseDataCurrentCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                              `json:"product_tags"`
	JSON        v1ContractListResponseDataCurrentCreditsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentCreditsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentCreditsSpecifier]
type v1ContractListResponseDataCurrentCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentDiscount struct {
	ID           string                                             `json:"id,required" format:"uuid"`
	Product      V1ContractListResponseDataCurrentDiscountsProduct  `json:"product,required"`
	Schedule     V1ContractListResponseDataCurrentDiscountsSchedule `json:"schedule,required"`
	CustomFields map[string]string                                  `json:"custom_fields"`
	Name         string                                             `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                        `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataCurrentDiscountJSON `json:"-"`
}

// v1ContractListResponseDataCurrentDiscountJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataCurrentDiscount]
type v1ContractListResponseDataCurrentDiscountJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentDiscount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentDiscountJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentDiscountsProduct struct {
	ID   string                                                `json:"id,required" format:"uuid"`
	Name string                                                `json:"name,required"`
	JSON v1ContractListResponseDataCurrentDiscountsProductJSON `json:"-"`
}

// v1ContractListResponseDataCurrentDiscountsProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentDiscountsProduct]
type v1ContractListResponseDataCurrentDiscountsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentDiscountsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentDiscountsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentDiscountsSchedule struct {
	CreditType V1ContractListResponseDataCurrentDiscountsScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                             `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataCurrentDiscountsScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataCurrentDiscountsScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataCurrentDiscountsScheduleJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentDiscountsSchedule]
type v1ContractListResponseDataCurrentDiscountsScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentDiscountsSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentDiscountsScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentDiscountsScheduleCreditType struct {
	ID   string                                                           `json:"id,required" format:"uuid"`
	Name string                                                           `json:"name,required"`
	JSON v1ContractListResponseDataCurrentDiscountsScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentDiscountsScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentDiscountsScheduleCreditType]
type v1ContractListResponseDataCurrentDiscountsScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentDiscountsScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentDiscountsScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentDiscountsScheduleScheduleItem struct {
	ID        string                                                             `json:"id,required" format:"uuid"`
	Amount    float64                                                            `json:"amount,required"`
	Quantity  float64                                                            `json:"quantity,required"`
	Timestamp time.Time                                                          `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                            `json:"unit_price,required"`
	InvoiceID string                                                             `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataCurrentDiscountsScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataCurrentDiscountsScheduleScheduleItemJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentDiscountsScheduleScheduleItem]
type v1ContractListResponseDataCurrentDiscountsScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentDiscountsScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentDiscountsScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
type V1ContractListResponseDataCurrentHierarchyConfiguration struct {
	// This field can have the runtime type of
	// [[]V1ContractListResponseDataCurrentHierarchyConfigurationChildrenChild].
	Children interface{} `json:"children"`
	// This field can have the runtime type of
	// [V1ContractListResponseDataCurrentHierarchyConfigurationParentParent].
	Parent interface{}                                                 `json:"parent"`
	JSON   v1ContractListResponseDataCurrentHierarchyConfigurationJSON `json:"-"`
	union  V1ContractListResponseDataCurrentHierarchyConfigurationUnion
}

// v1ContractListResponseDataCurrentHierarchyConfigurationJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentHierarchyConfiguration]
type v1ContractListResponseDataCurrentHierarchyConfigurationJSON struct {
	Children    apijson.Field
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataCurrentHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataCurrentHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataCurrentHierarchyConfiguration{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataCurrentHierarchyConfigurationUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataCurrentHierarchyConfigurationChildren],
// [V1ContractListResponseDataCurrentHierarchyConfigurationParent].
func (r V1ContractListResponseDataCurrentHierarchyConfiguration) AsUnion() V1ContractListResponseDataCurrentHierarchyConfigurationUnion {
	return r.union
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
//
// Union satisfied by
// [V1ContractListResponseDataCurrentHierarchyConfigurationChildren] or
// [V1ContractListResponseDataCurrentHierarchyConfigurationParent].
type V1ContractListResponseDataCurrentHierarchyConfigurationUnion interface {
	implementsV1ContractListResponseDataCurrentHierarchyConfiguration()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataCurrentHierarchyConfigurationUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentHierarchyConfigurationChildren{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentHierarchyConfigurationParent{}),
		},
	)
}

type V1ContractListResponseDataCurrentHierarchyConfigurationChildren struct {
	// List of contracts that belong to this parent.
	Children []V1ContractListResponseDataCurrentHierarchyConfigurationChildrenChild `json:"children,required"`
	JSON     v1ContractListResponseDataCurrentHierarchyConfigurationChildrenJSON    `json:"-"`
}

// v1ContractListResponseDataCurrentHierarchyConfigurationChildrenJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentHierarchyConfigurationChildren]
type v1ContractListResponseDataCurrentHierarchyConfigurationChildrenJSON struct {
	Children    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentHierarchyConfigurationChildren) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentHierarchyConfigurationChildrenJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentHierarchyConfigurationChildren) implementsV1ContractListResponseDataCurrentHierarchyConfiguration() {
}

type V1ContractListResponseDataCurrentHierarchyConfigurationChildrenChild struct {
	ContractID string                                                                   `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                   `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractListResponseDataCurrentHierarchyConfigurationChildrenChildJSON `json:"-"`
}

// v1ContractListResponseDataCurrentHierarchyConfigurationChildrenChildJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentHierarchyConfigurationChildrenChild]
type v1ContractListResponseDataCurrentHierarchyConfigurationChildrenChildJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentHierarchyConfigurationChildrenChild) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentHierarchyConfigurationChildrenChildJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentHierarchyConfigurationParent struct {
	// The single parent contract/customer for this child.
	Parent V1ContractListResponseDataCurrentHierarchyConfigurationParentParent `json:"parent,required"`
	JSON   v1ContractListResponseDataCurrentHierarchyConfigurationParentJSON   `json:"-"`
}

// v1ContractListResponseDataCurrentHierarchyConfigurationParentJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentHierarchyConfigurationParent]
type v1ContractListResponseDataCurrentHierarchyConfigurationParentJSON struct {
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentHierarchyConfigurationParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentHierarchyConfigurationParentJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentHierarchyConfigurationParent) implementsV1ContractListResponseDataCurrentHierarchyConfiguration() {
}

// The single parent contract/customer for this child.
type V1ContractListResponseDataCurrentHierarchyConfigurationParentParent struct {
	ContractID string                                                                  `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                  `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractListResponseDataCurrentHierarchyConfigurationParentParentJSON `json:"-"`
}

// v1ContractListResponseDataCurrentHierarchyConfigurationParentParentJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentHierarchyConfigurationParentParent]
type v1ContractListResponseDataCurrentHierarchyConfigurationParentParentJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentHierarchyConfigurationParentParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentHierarchyConfigurationParentParentJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfiguration struct {
	Commit V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                                   `json:"is_enabled,required"`
	PaymentGateConfig V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the amount the balance should be recharged to.
	RechargeToAmount float64 `json:"recharge_to_amount,required"`
	// Specify the threshold amount for the contract. Each time the contract's prepaid
	// balance lowers to this amount, a threshold charge will be initiated.
	ThresholdAmount float64 `json:"threshold_amount,required"`
	// If provided, the threshold, recharge-to amount, and the resulting threshold
	// commit amount will be in terms of this credit type instead of the fiat currency.
	CustomCreditTypeID string                                                                    `json:"custom_credit_type_id" format:"uuid"`
	JSON               v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON `json:"-"`
}

// v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfiguration]
type v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON struct {
	Commit             apijson.Field
	IsEnabled          apijson.Field
	PaymentGateConfig  apijson.Field
	RechargeToAmount   apijson.Field
	ThresholdAmount    apijson.Field
	CustomCreditTypeID apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID string `json:"product_id,required"`
	// Which products the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Which tags the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags []string `json:"applicable_product_tags"`
	Description           string   `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string `json:"name"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers []V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier `json:"specifiers"`
	JSON       v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON        `json:"-"`
}

// v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit]
type v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON struct {
	ProductID             apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	Description           apijson.Field
	Name                  apijson.Field
	Specifiers            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                                                 `json:"product_tags"`
	JSON        v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier]
type v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationCommitSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig]
type v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                           `json:"tax_name"`
	JSON    v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                                      `json:"invoice_metadata"`
	JSON            v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractListResponseDataCurrentPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentProfessionalService struct {
	ID string `json:"id,required" format:"uuid"`
	// Maximum amount for the term.
	MaxAmount float64 `json:"max_amount,required"`
	ProductID string  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity float64 `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    float64           `json:"unit_price,required"`
	CustomFields map[string]string `json:"custom_fields"`
	Description  string            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                   `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataCurrentProfessionalServiceJSON `json:"-"`
}

// v1ContractListResponseDataCurrentProfessionalServiceJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentProfessionalService]
type v1ContractListResponseDataCurrentProfessionalServiceJSON struct {
	ID                   apijson.Field
	MaxAmount            apijson.Field
	ProductID            apijson.Field
	Quantity             apijson.Field
	UnitPrice            apijson.Field
	CustomFields         apijson.Field
	Description          apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentProfessionalService) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentProfessionalServiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCommit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractListResponseDataCurrentRecurringCommitsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractListResponseDataCurrentRecurringCommitsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                  `json:"priority,required"`
	Product  V1ContractListResponseDataCurrentRecurringCommitsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractListResponseDataCurrentRecurringCommitsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                  `json:"applicable_product_tags"`
	Contract              V1ContractListResponseDataCurrentRecurringCommitsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The amount the customer should be billed for the commit. Not required.
	InvoiceAmount V1ContractListResponseDataCurrentRecurringCommitsInvoiceAmount `json:"invoice_amount"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractListResponseDataCurrentRecurringCommitsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataCurrentRecurringCommitsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractListResponseDataCurrentRecurringCommitJSON                `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentRecurringCommit]
type v1ContractListResponseDataCurrentRecurringCommitJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	InvoiceAmount          apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractListResponseDataCurrentRecurringCommitsAccessAmount struct {
	CreditTypeID string                                                            `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                           `json:"unit_price,required"`
	Quantity     float64                                                           `json:"quantity"`
	JSON         v1ContractListResponseDataCurrentRecurringCommitsAccessAmountJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsAccessAmount]
type v1ContractListResponseDataCurrentRecurringCommitsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractListResponseDataCurrentRecurringCommitsCommitDuration struct {
	Value float64                                                             `json:"value,required"`
	Unit  V1ContractListResponseDataCurrentRecurringCommitsCommitDurationUnit `json:"unit"`
	JSON  v1ContractListResponseDataCurrentRecurringCommitsCommitDurationJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsCommitDuration]
type v1ContractListResponseDataCurrentRecurringCommitsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCommitsCommitDurationUnit string

const (
	V1ContractListResponseDataCurrentRecurringCommitsCommitDurationUnitPeriods V1ContractListResponseDataCurrentRecurringCommitsCommitDurationUnit = "PERIODS"
)

func (r V1ContractListResponseDataCurrentRecurringCommitsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCommitsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCommitsProduct struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	Name string                                                       `json:"name,required"`
	JSON v1ContractListResponseDataCurrentRecurringCommitsProductJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsProductJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsProduct]
type v1ContractListResponseDataCurrentRecurringCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractListResponseDataCurrentRecurringCommitsRateType string

const (
	V1ContractListResponseDataCurrentRecurringCommitsRateTypeCommitRate V1ContractListResponseDataCurrentRecurringCommitsRateType = "COMMIT_RATE"
	V1ContractListResponseDataCurrentRecurringCommitsRateTypeListRate   V1ContractListResponseDataCurrentRecurringCommitsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataCurrentRecurringCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCommitsRateTypeCommitRate, V1ContractListResponseDataCurrentRecurringCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCommitsContract struct {
	ID   string                                                        `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataCurrentRecurringCommitsContractJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsContractJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsContract]
type v1ContractListResponseDataCurrentRecurringCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfiguration]
type v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                            `json:"contract_ids"`
	JSON        v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                     `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The amount the customer should be billed for the commit. Not required.
type V1ContractListResponseDataCurrentRecurringCommitsInvoiceAmount struct {
	CreditTypeID string                                                             `json:"credit_type_id,required" format:"uuid"`
	Quantity     float64                                                            `json:"quantity,required"`
	UnitPrice    float64                                                            `json:"unit_price,required"`
	JSON         v1ContractListResponseDataCurrentRecurringCommitsInvoiceAmountJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsInvoiceAmountJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsInvoiceAmount]
type v1ContractListResponseDataCurrentRecurringCommitsInvoiceAmountJSON struct {
	CreditTypeID apijson.Field
	Quantity     apijson.Field
	UnitPrice    apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsInvoiceAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsInvoiceAmountJSON) RawJSON() string {
	return r.raw
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractListResponseDataCurrentRecurringCommitsProration string

const (
	V1ContractListResponseDataCurrentRecurringCommitsProrationNone         V1ContractListResponseDataCurrentRecurringCommitsProration = "NONE"
	V1ContractListResponseDataCurrentRecurringCommitsProrationFirst        V1ContractListResponseDataCurrentRecurringCommitsProration = "FIRST"
	V1ContractListResponseDataCurrentRecurringCommitsProrationLast         V1ContractListResponseDataCurrentRecurringCommitsProration = "LAST"
	V1ContractListResponseDataCurrentRecurringCommitsProrationFirstAndLast V1ContractListResponseDataCurrentRecurringCommitsProration = "FIRST_AND_LAST"
)

func (r V1ContractListResponseDataCurrentRecurringCommitsProration) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCommitsProrationNone, V1ContractListResponseDataCurrentRecurringCommitsProrationFirst, V1ContractListResponseDataCurrentRecurringCommitsProrationLast, V1ContractListResponseDataCurrentRecurringCommitsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequency string

const (
	V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyMonthly   V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequency = "MONTHLY"
	V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyQuarterly V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequency = "QUARTERLY"
	V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyAnnual    V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequency = "ANNUAL"
	V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyWeekly    V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyMonthly, V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyQuarterly, V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyAnnual, V1ContractListResponseDataCurrentRecurringCommitsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                       `json:"product_tags"`
	JSON        v1ContractListResponseDataCurrentRecurringCommitsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsSpecifier]
type v1ContractListResponseDataCurrentRecurringCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfig struct {
	Allocation              V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                     `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfig]
type v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation string

const (
	V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationIndividual V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationPooled     V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationIndividual, V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                           `json:"is_prorated,required"`
	JSON       v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCredit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractListResponseDataCurrentRecurringCreditsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractListResponseDataCurrentRecurringCreditsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                  `json:"priority,required"`
	Product  V1ContractListResponseDataCurrentRecurringCreditsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractListResponseDataCurrentRecurringCreditsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                  `json:"applicable_product_tags"`
	Contract              V1ContractListResponseDataCurrentRecurringCreditsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractListResponseDataCurrentRecurringCreditsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataCurrentRecurringCreditsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractListResponseDataCurrentRecurringCreditJSON                `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentRecurringCredit]
type v1ContractListResponseDataCurrentRecurringCreditJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractListResponseDataCurrentRecurringCreditsAccessAmount struct {
	CreditTypeID string                                                            `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                           `json:"unit_price,required"`
	Quantity     float64                                                           `json:"quantity"`
	JSON         v1ContractListResponseDataCurrentRecurringCreditsAccessAmountJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsAccessAmount]
type v1ContractListResponseDataCurrentRecurringCreditsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractListResponseDataCurrentRecurringCreditsCommitDuration struct {
	Value float64                                                             `json:"value,required"`
	Unit  V1ContractListResponseDataCurrentRecurringCreditsCommitDurationUnit `json:"unit"`
	JSON  v1ContractListResponseDataCurrentRecurringCreditsCommitDurationJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsCommitDuration]
type v1ContractListResponseDataCurrentRecurringCreditsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCreditsCommitDurationUnit string

const (
	V1ContractListResponseDataCurrentRecurringCreditsCommitDurationUnitPeriods V1ContractListResponseDataCurrentRecurringCreditsCommitDurationUnit = "PERIODS"
)

func (r V1ContractListResponseDataCurrentRecurringCreditsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCreditsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCreditsProduct struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	Name string                                                       `json:"name,required"`
	JSON v1ContractListResponseDataCurrentRecurringCreditsProductJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsProductJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsProduct]
type v1ContractListResponseDataCurrentRecurringCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractListResponseDataCurrentRecurringCreditsRateType string

const (
	V1ContractListResponseDataCurrentRecurringCreditsRateTypeCommitRate V1ContractListResponseDataCurrentRecurringCreditsRateType = "COMMIT_RATE"
	V1ContractListResponseDataCurrentRecurringCreditsRateTypeListRate   V1ContractListResponseDataCurrentRecurringCreditsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataCurrentRecurringCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCreditsRateTypeCommitRate, V1ContractListResponseDataCurrentRecurringCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCreditsContract struct {
	ID   string                                                        `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataCurrentRecurringCreditsContractJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsContractJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsContract]
type v1ContractListResponseDataCurrentRecurringCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfiguration]
type v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                            `json:"contract_ids"`
	JSON        v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                     `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractListResponseDataCurrentRecurringCreditsProration string

const (
	V1ContractListResponseDataCurrentRecurringCreditsProrationNone         V1ContractListResponseDataCurrentRecurringCreditsProration = "NONE"
	V1ContractListResponseDataCurrentRecurringCreditsProrationFirst        V1ContractListResponseDataCurrentRecurringCreditsProration = "FIRST"
	V1ContractListResponseDataCurrentRecurringCreditsProrationLast         V1ContractListResponseDataCurrentRecurringCreditsProration = "LAST"
	V1ContractListResponseDataCurrentRecurringCreditsProrationFirstAndLast V1ContractListResponseDataCurrentRecurringCreditsProration = "FIRST_AND_LAST"
)

func (r V1ContractListResponseDataCurrentRecurringCreditsProration) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCreditsProrationNone, V1ContractListResponseDataCurrentRecurringCreditsProrationFirst, V1ContractListResponseDataCurrentRecurringCreditsProrationLast, V1ContractListResponseDataCurrentRecurringCreditsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequency string

const (
	V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyMonthly   V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequency = "MONTHLY"
	V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyQuarterly V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequency = "QUARTERLY"
	V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyAnnual    V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequency = "ANNUAL"
	V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyWeekly    V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyMonthly, V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyQuarterly, V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyAnnual, V1ContractListResponseDataCurrentRecurringCreditsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                       `json:"product_tags"`
	JSON        v1ContractListResponseDataCurrentRecurringCreditsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsSpecifier]
type v1ContractListResponseDataCurrentRecurringCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfig struct {
	Allocation              V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                     `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfig]
type v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation string

const (
	V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationIndividual V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationPooled     V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationIndividual, V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                           `json:"is_prorated,required"`
	JSON       v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentResellerRoyalty struct {
	Fraction              float64                                                        `json:"fraction,required"`
	NetsuiteResellerID    string                                                         `json:"netsuite_reseller_id,required"`
	ResellerType          V1ContractListResponseDataCurrentResellerRoyaltiesResellerType `json:"reseller_type,required"`
	StartingAt            time.Time                                                      `json:"starting_at,required" format:"date-time"`
	ApplicableProductIDs  []string                                                       `json:"applicable_product_ids"`
	ApplicableProductTags []string                                                       `json:"applicable_product_tags"`
	AwsAccountNumber      string                                                         `json:"aws_account_number"`
	AwsOfferID            string                                                         `json:"aws_offer_id"`
	AwsPayerReferenceID   string                                                         `json:"aws_payer_reference_id"`
	EndingBefore          time.Time                                                      `json:"ending_before" format:"date-time"`
	GcpAccountID          string                                                         `json:"gcp_account_id"`
	GcpOfferID            string                                                         `json:"gcp_offer_id"`
	ResellerContractValue float64                                                        `json:"reseller_contract_value"`
	JSON                  v1ContractListResponseDataCurrentResellerRoyaltyJSON           `json:"-"`
}

// v1ContractListResponseDataCurrentResellerRoyaltyJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataCurrentResellerRoyalty]
type v1ContractListResponseDataCurrentResellerRoyaltyJSON struct {
	Fraction              apijson.Field
	NetsuiteResellerID    apijson.Field
	ResellerType          apijson.Field
	StartingAt            apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	AwsAccountNumber      apijson.Field
	AwsOfferID            apijson.Field
	AwsPayerReferenceID   apijson.Field
	EndingBefore          apijson.Field
	GcpAccountID          apijson.Field
	GcpOfferID            apijson.Field
	ResellerContractValue apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentResellerRoyaltiesResellerType string

const (
	V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeAws           V1ContractListResponseDataCurrentResellerRoyaltiesResellerType = "AWS"
	V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeAwsProService V1ContractListResponseDataCurrentResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeGcp           V1ContractListResponseDataCurrentResellerRoyaltiesResellerType = "GCP"
	V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeGcpProService V1ContractListResponseDataCurrentResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractListResponseDataCurrentResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeAws, V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeAwsProService, V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeGcp, V1ContractListResponseDataCurrentResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

// Determines which scheduled and commit charges to consolidate onto the Contract's
// usage invoice. The charge's `timestamp` must match the usage invoice's
// `ending_before` date for consolidation to occur. This field cannot be modified
// after a Contract has been created. If this field is omitted, charges will appear
// on a separate invoice from usage charges.
type V1ContractListResponseDataCurrentScheduledChargesOnUsageInvoices string

const (
	V1ContractListResponseDataCurrentScheduledChargesOnUsageInvoicesAll V1ContractListResponseDataCurrentScheduledChargesOnUsageInvoices = "ALL"
)

func (r V1ContractListResponseDataCurrentScheduledChargesOnUsageInvoices) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentScheduledChargesOnUsageInvoicesAll:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentSpendThresholdConfiguration struct {
	Commit V1ContractListResponseDataCurrentSpendThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                          `json:"is_enabled,required"`
	PaymentGateConfig V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the threshold amount for the contract. Each time the contract's usage
	// hits this amount, a threshold charge will be initiated.
	ThresholdAmount float64                                                          `json:"threshold_amount,required"`
	JSON            v1ContractListResponseDataCurrentSpendThresholdConfigurationJSON `json:"-"`
}

// v1ContractListResponseDataCurrentSpendThresholdConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCurrentSpendThresholdConfiguration]
type v1ContractListResponseDataCurrentSpendThresholdConfigurationJSON struct {
	Commit            apijson.Field
	IsEnabled         apijson.Field
	PaymentGateConfig apijson.Field
	ThresholdAmount   apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentSpendThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentSpendThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentSpendThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID   string `json:"product_id,required"`
	Description string `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string                                                                 `json:"name"`
	JSON v1ContractListResponseDataCurrentSpendThresholdConfigurationCommitJSON `json:"-"`
}

// v1ContractListResponseDataCurrentSpendThresholdConfigurationCommitJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataCurrentSpendThresholdConfigurationCommit]
type v1ContractListResponseDataCurrentSpendThresholdConfigurationCommitJSON struct {
	ProductID   apijson.Field
	Description apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentSpendThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentSpendThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig]
type v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                  `json:"tax_name"`
	JSON    v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                             `json:"invoice_metadata"`
	JSON            v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractListResponseDataCurrentSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractListResponseDataCurrentUsageFilter struct {
	Current V1ContractListResponseDataCurrentUsageFilterCurrent  `json:"current,required,nullable"`
	Initial V1ContractListResponseDataCurrentUsageFilterInitial  `json:"initial,required"`
	Updates []V1ContractListResponseDataCurrentUsageFilterUpdate `json:"updates,required"`
	JSON    v1ContractListResponseDataCurrentUsageFilterJSON     `json:"-"`
}

// v1ContractListResponseDataCurrentUsageFilterJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataCurrentUsageFilter]
type v1ContractListResponseDataCurrentUsageFilterJSON struct {
	Current     apijson.Field
	Initial     apijson.Field
	Updates     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentUsageFilter) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentUsageFilterJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentUsageFilterCurrent struct {
	GroupKey    string                                                  `json:"group_key,required"`
	GroupValues []string                                                `json:"group_values,required"`
	StartingAt  time.Time                                               `json:"starting_at" format:"date-time"`
	JSON        v1ContractListResponseDataCurrentUsageFilterCurrentJSON `json:"-"`
}

// v1ContractListResponseDataCurrentUsageFilterCurrentJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentUsageFilterCurrent]
type v1ContractListResponseDataCurrentUsageFilterCurrentJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentUsageFilterCurrent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentUsageFilterCurrentJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentUsageFilterInitial struct {
	GroupKey    string                                                  `json:"group_key,required"`
	GroupValues []string                                                `json:"group_values,required"`
	StartingAt  time.Time                                               `json:"starting_at" format:"date-time"`
	JSON        v1ContractListResponseDataCurrentUsageFilterInitialJSON `json:"-"`
}

// v1ContractListResponseDataCurrentUsageFilterInitialJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentUsageFilterInitial]
type v1ContractListResponseDataCurrentUsageFilterInitialJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentUsageFilterInitial) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentUsageFilterInitialJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCurrentUsageFilterUpdate struct {
	GroupKey    string                                                 `json:"group_key,required"`
	GroupValues []string                                               `json:"group_values,required"`
	StartingAt  time.Time                                              `json:"starting_at,required" format:"date-time"`
	JSON        v1ContractListResponseDataCurrentUsageFilterUpdateJSON `json:"-"`
}

// v1ContractListResponseDataCurrentUsageFilterUpdateJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataCurrentUsageFilterUpdate]
type v1ContractListResponseDataCurrentUsageFilterUpdateJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataCurrentUsageFilterUpdate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCurrentUsageFilterUpdateJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitial struct {
	Commits                []V1ContractListResponseDataInitialCommit               `json:"commits,required"`
	CreatedAt              time.Time                                               `json:"created_at,required" format:"date-time"`
	CreatedBy              string                                                  `json:"created_by,required"`
	Overrides              []V1ContractListResponseDataInitialOverride             `json:"overrides,required"`
	ScheduledCharges       []V1ContractListResponseDataInitialScheduledCharge      `json:"scheduled_charges,required"`
	StartingAt             time.Time                                               `json:"starting_at,required" format:"date-time"`
	Transitions            []V1ContractListResponseDataInitialTransition           `json:"transitions,required"`
	UsageStatementSchedule V1ContractListResponseDataInitialUsageStatementSchedule `json:"usage_statement_schedule,required"`
	Credits                []V1ContractListResponseDataInitialCredit               `json:"credits"`
	// This field's availability is dependent on your client's configuration.
	Discounts    []V1ContractListResponseDataInitialDiscount `json:"discounts"`
	EndingBefore time.Time                                   `json:"ending_before" format:"date-time"`
	// Either a **parent** configuration with a list of children or a **child**
	// configuration with a single parent.
	HierarchyConfiguration V1ContractListResponseDataInitialHierarchyConfiguration `json:"hierarchy_configuration"`
	Name                   string                                                  `json:"name"`
	NetPaymentTermsDays    float64                                                 `json:"net_payment_terms_days"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID                 string                                                                `json:"netsuite_sales_order_id"`
	PrepaidBalanceThresholdConfiguration V1ContractListResponseDataInitialPrepaidBalanceThresholdConfiguration `json:"prepaid_balance_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []V1ContractListResponseDataInitialProfessionalService `json:"professional_services"`
	RateCardID           string                                                 `json:"rate_card_id" format:"uuid"`
	RecurringCommits     []V1ContractListResponseDataInitialRecurringCommit     `json:"recurring_commits"`
	RecurringCredits     []V1ContractListResponseDataInitialRecurringCredit     `json:"recurring_credits"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []V1ContractListResponseDataInitialResellerRoyalty `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// Determines which scheduled and commit charges to consolidate onto the Contract's
	// usage invoice. The charge's `timestamp` must match the usage invoice's
	// `ending_before` date for consolidation to occur. This field cannot be modified
	// after a Contract has been created. If this field is omitted, charges will appear
	// on a separate invoice from usage charges.
	ScheduledChargesOnUsageInvoices V1ContractListResponseDataInitialScheduledChargesOnUsageInvoices `json:"scheduled_charges_on_usage_invoices"`
	SpendThresholdConfiguration     V1ContractListResponseDataInitialSpendThresholdConfiguration     `json:"spend_threshold_configuration"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue float64                                      `json:"total_contract_value"`
	UsageFilter        V1ContractListResponseDataInitialUsageFilter `json:"usage_filter"`
	JSON               v1ContractListResponseDataInitialJSON        `json:"-"`
}

// v1ContractListResponseDataInitialJSON contains the JSON metadata for the struct
// [V1ContractListResponseDataInitial]
type v1ContractListResponseDataInitialJSON struct {
	Commits                              apijson.Field
	CreatedAt                            apijson.Field
	CreatedBy                            apijson.Field
	Overrides                            apijson.Field
	ScheduledCharges                     apijson.Field
	StartingAt                           apijson.Field
	Transitions                          apijson.Field
	UsageStatementSchedule               apijson.Field
	Credits                              apijson.Field
	Discounts                            apijson.Field
	EndingBefore                         apijson.Field
	HierarchyConfiguration               apijson.Field
	Name                                 apijson.Field
	NetPaymentTermsDays                  apijson.Field
	NetsuiteSalesOrderID                 apijson.Field
	PrepaidBalanceThresholdConfiguration apijson.Field
	ProfessionalServices                 apijson.Field
	RateCardID                           apijson.Field
	RecurringCommits                     apijson.Field
	RecurringCredits                     apijson.Field
	ResellerRoyalties                    apijson.Field
	SalesforceOpportunityID              apijson.Field
	ScheduledChargesOnUsageInvoices      apijson.Field
	SpendThresholdConfiguration          apijson.Field
	TotalContractValue                   apijson.Field
	UsageFilter                          apijson.Field
	raw                                  string
	ExtraFields                          map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitial) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommit struct {
	ID      string                                          `json:"id,required" format:"uuid"`
	Product V1ContractListResponseDataInitialCommitsProduct `json:"product,required"`
	Type    V1ContractListResponseDataInitialCommitsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits purposed with
	// this commit.
	AccessSchedule V1ContractListResponseDataInitialCommitsAccessSchedule `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount                float64  `json:"amount"`
	ApplicableContractIDs []string `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                          `json:"balance"`
	Contract     V1ContractListResponseDataInitialCommitsContract `json:"contract"`
	CustomFields map[string]string                                `json:"custom_fields"`
	Description  string                                           `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataInitialCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The contract that this commit will be billed on.
	InvoiceContract V1ContractListResponseDataInitialCommitsInvoiceContract `json:"invoice_contract"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule V1ContractListResponseDataInitialCommitsInvoiceSchedule `json:"invoice_schedule"`
	// A list of ordered events that impact the balance of a commit. For example, an
	// invoice deduction or a rollover.
	Ledger []V1ContractListResponseDataInitialCommitsLedger `json:"ledger"`
	Name   string                                           `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority         float64                                                `json:"priority"`
	RateType         V1ContractListResponseDataInitialCommitsRateType       `json:"rate_type"`
	RolledOverFrom   V1ContractListResponseDataInitialCommitsRolledOverFrom `json:"rolled_over_from"`
	RolloverFraction float64                                                `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataInitialCommitsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                      `json:"uniqueness_key"`
	JSON          v1ContractListResponseDataInitialCommitJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataInitialCommit]
type v1ContractListResponseDataInitialCommitJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsProduct struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	Name string                                              `json:"name,required"`
	JSON v1ContractListResponseDataInitialCommitsProductJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCommitsProduct]
type v1ContractListResponseDataInitialCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsType string

const (
	V1ContractListResponseDataInitialCommitsTypePrepaid  V1ContractListResponseDataInitialCommitsType = "PREPAID"
	V1ContractListResponseDataInitialCommitsTypePostpaid V1ContractListResponseDataInitialCommitsType = "POSTPAID"
)

func (r V1ContractListResponseDataInitialCommitsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCommitsTypePrepaid, V1ContractListResponseDataInitialCommitsTypePostpaid:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits purposed with
// this commit.
type V1ContractListResponseDataInitialCommitsAccessSchedule struct {
	ScheduleItems []V1ContractListResponseDataInitialCommitsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractListResponseDataInitialCommitsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractListResponseDataInitialCommitsAccessScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataInitialCommitsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialCommitsAccessSchedule]
type v1ContractListResponseDataInitialCommitsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsAccessScheduleScheduleItem struct {
	ID           string                                                                 `json:"id,required" format:"uuid"`
	Amount       float64                                                                `json:"amount,required"`
	EndingBefore time.Time                                                              `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                              `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractListResponseDataInitialCommitsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsAccessScheduleScheduleItem]
type v1ContractListResponseDataInitialCommitsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsAccessScheduleCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractListResponseDataInitialCommitsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsAccessScheduleCreditType]
type v1ContractListResponseDataInitialCommitsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsContract struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataInitialCommitsContractJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsContractJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCommitsContract]
type v1ContractListResponseDataInitialCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for commit hierarchy access control
type V1ContractListResponseDataInitialCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataInitialCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataInitialCommitsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsHierarchyConfiguration]
type v1ContractListResponseDataInitialCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                   `json:"contract_ids"`
	JSON        v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                            `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The contract that this commit will be billed on.
type V1ContractListResponseDataInitialCommitsInvoiceContract struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataInitialCommitsInvoiceContractJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsInvoiceContractJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialCommitsInvoiceContract]
type v1ContractListResponseDataInitialCommitsInvoiceContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsInvoiceContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsInvoiceContractJSON) RawJSON() string {
	return r.raw
}

// The schedule that the customer will be invoiced for this commit.
type V1ContractListResponseDataInitialCommitsInvoiceSchedule struct {
	CreditType V1ContractListResponseDataInitialCommitsInvoiceScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                  `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataInitialCommitsInvoiceScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataInitialCommitsInvoiceScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialCommitsInvoiceSchedule]
type v1ContractListResponseDataInitialCommitsInvoiceScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsInvoiceSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsInvoiceScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsInvoiceScheduleCreditType struct {
	ID   string                                                                `json:"id,required" format:"uuid"`
	Name string                                                                `json:"name,required"`
	JSON v1ContractListResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsInvoiceScheduleCreditType]
type v1ContractListResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsInvoiceScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsInvoiceScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItem struct {
	ID        string                                                                  `json:"id,required" format:"uuid"`
	Amount    float64                                                                 `json:"amount,required"`
	Quantity  float64                                                                 `json:"quantity,required"`
	Timestamp time.Time                                                               `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                 `json:"unit_price,required"`
	InvoiceID string                                                                  `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItem]
type v1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsInvoiceScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsLedger struct {
	Amount        float64                                            `json:"amount,required"`
	Timestamp     time.Time                                          `json:"timestamp,required" format:"date-time"`
	Type          V1ContractListResponseDataInitialCommitsLedgerType `json:"type,required"`
	ContractID    string                                             `json:"contract_id" format:"uuid"`
	InvoiceID     string                                             `json:"invoice_id" format:"uuid"`
	NewContractID string                                             `json:"new_contract_id" format:"uuid"`
	Reason        string                                             `json:"reason"`
	SegmentID     string                                             `json:"segment_id" format:"uuid"`
	JSON          v1ContractListResponseDataInitialCommitsLedgerJSON `json:"-"`
	union         V1ContractListResponseDataInitialCommitsLedgerUnion
}

// v1ContractListResponseDataInitialCommitsLedgerJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCommitsLedger]
type v1ContractListResponseDataInitialCommitsLedgerJSON struct {
	Amount        apijson.Field
	Timestamp     apijson.Field
	Type          apijson.Field
	ContractID    apijson.Field
	InvoiceID     apijson.Field
	NewContractID apijson.Field
	Reason        apijson.Field
	SegmentID     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r v1ContractListResponseDataInitialCommitsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataInitialCommitsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataInitialCommitsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataInitialCommitsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject].
func (r V1ContractListResponseDataInitialCommitsLedger) AsUnion() V1ContractListResponseDataInitialCommitsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject],
// [V1ContractListResponseDataInitialCommitsLedgerObject] or
// [V1ContractListResponseDataInitialCommitsLedgerObject].
type V1ContractListResponseDataInitialCommitsLedgerUnion interface {
	implementsV1ContractListResponseDataInitialCommitsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataInitialCommitsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCommitsLedgerObject{}),
		},
	)
}

type V1ContractListResponseDataInitialCommitsLedgerObject struct {
	Amount    float64                                                  `json:"amount,required"`
	SegmentID string                                                   `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                `json:"timestamp,required" format:"date-time"`
	Type      V1ContractListResponseDataInitialCommitsLedgerObjectType `json:"type,required"`
	JSON      v1ContractListResponseDataInitialCommitsLedgerObjectJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialCommitsLedgerObject]
type v1ContractListResponseDataInitialCommitsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialCommitsLedgerObject) implementsV1ContractListResponseDataInitialCommitsLedger() {
}

type V1ContractListResponseDataInitialCommitsLedgerObjectType string

const (
	V1ContractListResponseDataInitialCommitsLedgerObjectTypePrepaidCommitSegmentStart V1ContractListResponseDataInitialCommitsLedgerObjectType = "PREPAID_COMMIT_SEGMENT_START"
)

func (r V1ContractListResponseDataInitialCommitsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCommitsLedgerObjectTypePrepaidCommitSegmentStart:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCommitsLedgerType string

const (
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitSegmentStart               V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_SEGMENT_START"
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction  V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitRollover                   V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_ROLLOVER"
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitExpiration                 V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_EXPIRATION"
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitCanceled                   V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_CANCELED"
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitCredited                   V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_CREDITED"
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitSeatBasedAdjustment        V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"
	V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitInitialBalance            V1ContractListResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_INITIAL_BALANCE"
	V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction V1ContractListResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitRollover                  V1ContractListResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_ROLLOVER"
	V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitTrueup                    V1ContractListResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_TRUEUP"
	V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitManual                     V1ContractListResponseDataInitialCommitsLedgerType = "PREPAID_COMMIT_MANUAL"
	V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitManual                    V1ContractListResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_MANUAL"
	V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitExpiration                V1ContractListResponseDataInitialCommitsLedgerType = "POSTPAID_COMMIT_EXPIRATION"
)

func (r V1ContractListResponseDataInitialCommitsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitSegmentStart, V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction, V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitRollover, V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitExpiration, V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitCanceled, V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitCredited, V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitSeatBasedAdjustment, V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitInitialBalance, V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitAutomatedInvoiceDeduction, V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitRollover, V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitTrueup, V1ContractListResponseDataInitialCommitsLedgerTypePrepaidCommitManual, V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitManual, V1ContractListResponseDataInitialCommitsLedgerTypePostpaidCommitExpiration:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCommitsRateType string

const (
	V1ContractListResponseDataInitialCommitsRateTypeCommitRate V1ContractListResponseDataInitialCommitsRateType = "COMMIT_RATE"
	V1ContractListResponseDataInitialCommitsRateTypeListRate   V1ContractListResponseDataInitialCommitsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataInitialCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCommitsRateTypeCommitRate, V1ContractListResponseDataInitialCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCommitsRolledOverFrom struct {
	CommitID   string                                                     `json:"commit_id,required" format:"uuid"`
	ContractID string                                                     `json:"contract_id,required" format:"uuid"`
	JSON       v1ContractListResponseDataInitialCommitsRolledOverFromJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsRolledOverFromJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialCommitsRolledOverFrom]
type v1ContractListResponseDataInitialCommitsRolledOverFromJSON struct {
	CommitID    apijson.Field
	ContractID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsRolledOverFrom) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsRolledOverFromJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                              `json:"product_tags"`
	JSON        v1ContractListResponseDataInitialCommitsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataInitialCommitsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCommitsSpecifier]
type v1ContractListResponseDataInitialCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverride struct {
	ID                    string                                               `json:"id,required" format:"uuid"`
	StartingAt            time.Time                                            `json:"starting_at,required" format:"date-time"`
	ApplicableProductTags []string                                             `json:"applicable_product_tags"`
	CreditType            V1ContractListResponseDataInitialOverridesCreditType `json:"credit_type"`
	EndingBefore          time.Time                                            `json:"ending_before" format:"date-time"`
	Entitled              bool                                                 `json:"entitled"`
	IsCommitSpecific      bool                                                 `json:"is_commit_specific"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated         bool                                                          `json:"is_prorated"`
	Multiplier         float64                                                       `json:"multiplier"`
	OverrideSpecifiers []V1ContractListResponseDataInitialOverridesOverrideSpecifier `json:"override_specifiers"`
	OverrideTiers      []V1ContractListResponseDataInitialOverridesOverrideTier      `json:"override_tiers"`
	OverwriteRate      V1ContractListResponseDataInitialOverridesOverwriteRate       `json:"overwrite_rate"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price    float64                                           `json:"price"`
	Priority float64                                           `json:"priority"`
	Product  V1ContractListResponseDataInitialOverridesProduct `json:"product"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64                                            `json:"quantity"`
	RateType V1ContractListResponseDataInitialOverridesRateType `json:"rate_type"`
	Target   V1ContractListResponseDataInitialOverridesTarget   `json:"target"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractListResponseDataInitialOverridesTier `json:"tiers"`
	Type  V1ContractListResponseDataInitialOverridesType   `json:"type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	Value map[string]interface{}                        `json:"value"`
	JSON  v1ContractListResponseDataInitialOverrideJSON `json:"-"`
}

// v1ContractListResponseDataInitialOverrideJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataInitialOverride]
type v1ContractListResponseDataInitialOverrideJSON struct {
	ID                    apijson.Field
	StartingAt            apijson.Field
	ApplicableProductTags apijson.Field
	CreditType            apijson.Field
	EndingBefore          apijson.Field
	Entitled              apijson.Field
	IsCommitSpecific      apijson.Field
	IsProrated            apijson.Field
	Multiplier            apijson.Field
	OverrideSpecifiers    apijson.Field
	OverrideTiers         apijson.Field
	OverwriteRate         apijson.Field
	Price                 apijson.Field
	Priority              apijson.Field
	Product               apijson.Field
	Quantity              apijson.Field
	RateType              apijson.Field
	Target                apijson.Field
	Tiers                 apijson.Field
	Type                  apijson.Field
	Value                 apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverride) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverrideJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesCreditType struct {
	ID   string                                                   `json:"id,required" format:"uuid"`
	Name string                                                   `json:"name,required"`
	JSON v1ContractListResponseDataInitialOverridesCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialOverridesCreditTypeJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialOverridesCreditType]
type v1ContractListResponseDataInitialOverridesCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesOverrideSpecifier struct {
	BillingFrequency        V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequency `json:"billing_frequency"`
	CommitIDs               []string                                                                     `json:"commit_ids"`
	PresentationGroupValues map[string]string                                                            `json:"presentation_group_values"`
	PricingGroupValues      map[string]string                                                            `json:"pricing_group_values"`
	ProductID               string                                                                       `json:"product_id" format:"uuid"`
	ProductTags             []string                                                                     `json:"product_tags"`
	RecurringCommitIDs      []string                                                                     `json:"recurring_commit_ids"`
	RecurringCreditIDs      []string                                                                     `json:"recurring_credit_ids"`
	JSON                    v1ContractListResponseDataInitialOverridesOverrideSpecifierJSON              `json:"-"`
}

// v1ContractListResponseDataInitialOverridesOverrideSpecifierJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialOverridesOverrideSpecifier]
type v1ContractListResponseDataInitialOverridesOverrideSpecifierJSON struct {
	BillingFrequency        apijson.Field
	CommitIDs               apijson.Field
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	RecurringCommitIDs      apijson.Field
	RecurringCreditIDs      apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesOverrideSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesOverrideSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractListResponseDataInitialOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialOverridesOverrideTier struct {
	Multiplier float64                                                    `json:"multiplier,required"`
	Size       float64                                                    `json:"size"`
	JSON       v1ContractListResponseDataInitialOverridesOverrideTierJSON `json:"-"`
}

// v1ContractListResponseDataInitialOverridesOverrideTierJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialOverridesOverrideTier]
type v1ContractListResponseDataInitialOverridesOverrideTierJSON struct {
	Multiplier  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesOverrideTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesOverrideTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesOverwriteRate struct {
	RateType   V1ContractListResponseDataInitialOverridesOverwriteRateRateType   `json:"rate_type,required"`
	CreditType V1ContractListResponseDataInitialOverridesOverwriteRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractListResponseDataInitialOverridesOverwriteRateTier `json:"tiers"`
	JSON  v1ContractListResponseDataInitialOverridesOverwriteRateJSON   `json:"-"`
}

// v1ContractListResponseDataInitialOverridesOverwriteRateJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialOverridesOverwriteRate]
type v1ContractListResponseDataInitialOverridesOverwriteRateJSON struct {
	RateType    apijson.Field
	CreditType  apijson.Field
	CustomRate  apijson.Field
	IsProrated  apijson.Field
	Price       apijson.Field
	Quantity    apijson.Field
	Tiers       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesOverwriteRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesOverwriteRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesOverwriteRateRateType string

const (
	V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeFlat         V1ContractListResponseDataInitialOverridesOverwriteRateRateType = "FLAT"
	V1ContractListResponseDataInitialOverridesOverwriteRateRateTypePercentage   V1ContractListResponseDataInitialOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeSubscription V1ContractListResponseDataInitialOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeTiered       V1ContractListResponseDataInitialOverridesOverwriteRateRateType = "TIERED"
	V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeCustom       V1ContractListResponseDataInitialOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractListResponseDataInitialOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeFlat, V1ContractListResponseDataInitialOverridesOverwriteRateRateTypePercentage, V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeSubscription, V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeTiered, V1ContractListResponseDataInitialOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialOverridesOverwriteRateCreditType struct {
	ID   string                                                                `json:"id,required" format:"uuid"`
	Name string                                                                `json:"name,required"`
	JSON v1ContractListResponseDataInitialOverridesOverwriteRateCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialOverridesOverwriteRateCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialOverridesOverwriteRateCreditType]
type v1ContractListResponseDataInitialOverridesOverwriteRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesOverwriteRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesOverwriteRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesOverwriteRateTier struct {
	Price float64                                                         `json:"price,required"`
	Size  float64                                                         `json:"size"`
	JSON  v1ContractListResponseDataInitialOverridesOverwriteRateTierJSON `json:"-"`
}

// v1ContractListResponseDataInitialOverridesOverwriteRateTierJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialOverridesOverwriteRateTier]
type v1ContractListResponseDataInitialOverridesOverwriteRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesOverwriteRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesOverwriteRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesProduct struct {
	ID   string                                                `json:"id,required" format:"uuid"`
	Name string                                                `json:"name,required"`
	JSON v1ContractListResponseDataInitialOverridesProductJSON `json:"-"`
}

// v1ContractListResponseDataInitialOverridesProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialOverridesProduct]
type v1ContractListResponseDataInitialOverridesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesRateType string

const (
	V1ContractListResponseDataInitialOverridesRateTypeFlat         V1ContractListResponseDataInitialOverridesRateType = "FLAT"
	V1ContractListResponseDataInitialOverridesRateTypePercentage   V1ContractListResponseDataInitialOverridesRateType = "PERCENTAGE"
	V1ContractListResponseDataInitialOverridesRateTypeSubscription V1ContractListResponseDataInitialOverridesRateType = "SUBSCRIPTION"
	V1ContractListResponseDataInitialOverridesRateTypeTiered       V1ContractListResponseDataInitialOverridesRateType = "TIERED"
	V1ContractListResponseDataInitialOverridesRateTypeCustom       V1ContractListResponseDataInitialOverridesRateType = "CUSTOM"
)

func (r V1ContractListResponseDataInitialOverridesRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialOverridesRateTypeFlat, V1ContractListResponseDataInitialOverridesRateTypePercentage, V1ContractListResponseDataInitialOverridesRateTypeSubscription, V1ContractListResponseDataInitialOverridesRateTypeTiered, V1ContractListResponseDataInitialOverridesRateTypeCustom:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialOverridesTarget string

const (
	V1ContractListResponseDataInitialOverridesTargetCommitRate V1ContractListResponseDataInitialOverridesTarget = "COMMIT_RATE"
	V1ContractListResponseDataInitialOverridesTargetListRate   V1ContractListResponseDataInitialOverridesTarget = "LIST_RATE"
)

func (r V1ContractListResponseDataInitialOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialOverridesTargetCommitRate, V1ContractListResponseDataInitialOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialOverridesTier struct {
	Price float64                                            `json:"price,required"`
	Size  float64                                            `json:"size"`
	JSON  v1ContractListResponseDataInitialOverridesTierJSON `json:"-"`
}

// v1ContractListResponseDataInitialOverridesTierJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialOverridesTier]
type v1ContractListResponseDataInitialOverridesTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialOverridesTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialOverridesTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialOverridesType string

const (
	V1ContractListResponseDataInitialOverridesTypeOverwrite  V1ContractListResponseDataInitialOverridesType = "OVERWRITE"
	V1ContractListResponseDataInitialOverridesTypeMultiplier V1ContractListResponseDataInitialOverridesType = "MULTIPLIER"
	V1ContractListResponseDataInitialOverridesTypeTiered     V1ContractListResponseDataInitialOverridesType = "TIERED"
)

func (r V1ContractListResponseDataInitialOverridesType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialOverridesTypeOverwrite, V1ContractListResponseDataInitialOverridesTypeMultiplier, V1ContractListResponseDataInitialOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialScheduledCharge struct {
	ID           string                                                    `json:"id,required" format:"uuid"`
	Product      V1ContractListResponseDataInitialScheduledChargesProduct  `json:"product,required"`
	Schedule     V1ContractListResponseDataInitialScheduledChargesSchedule `json:"schedule,required"`
	ArchivedAt   time.Time                                                 `json:"archived_at" format:"date-time"`
	CustomFields map[string]string                                         `json:"custom_fields"`
	// displayed on invoices
	Name string `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                               `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataInitialScheduledChargeJSON `json:"-"`
}

// v1ContractListResponseDataInitialScheduledChargeJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialScheduledCharge]
type v1ContractListResponseDataInitialScheduledChargeJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	ArchivedAt           apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialScheduledCharge) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialScheduledChargeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialScheduledChargesProduct struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	Name string                                                       `json:"name,required"`
	JSON v1ContractListResponseDataInitialScheduledChargesProductJSON `json:"-"`
}

// v1ContractListResponseDataInitialScheduledChargesProductJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialScheduledChargesProduct]
type v1ContractListResponseDataInitialScheduledChargesProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialScheduledChargesProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialScheduledChargesProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialScheduledChargesSchedule struct {
	CreditType V1ContractListResponseDataInitialScheduledChargesScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                    `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataInitialScheduledChargesScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataInitialScheduledChargesScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataInitialScheduledChargesScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialScheduledChargesSchedule]
type v1ContractListResponseDataInitialScheduledChargesScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialScheduledChargesSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialScheduledChargesScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialScheduledChargesScheduleCreditType struct {
	ID   string                                                                  `json:"id,required" format:"uuid"`
	Name string                                                                  `json:"name,required"`
	JSON v1ContractListResponseDataInitialScheduledChargesScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialScheduledChargesScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialScheduledChargesScheduleCreditType]
type v1ContractListResponseDataInitialScheduledChargesScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialScheduledChargesScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialScheduledChargesScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialScheduledChargesScheduleScheduleItem struct {
	ID        string                                                                    `json:"id,required" format:"uuid"`
	Amount    float64                                                                   `json:"amount,required"`
	Quantity  float64                                                                   `json:"quantity,required"`
	Timestamp time.Time                                                                 `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                   `json:"unit_price,required"`
	InvoiceID string                                                                    `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataInitialScheduledChargesScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataInitialScheduledChargesScheduleScheduleItemJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialScheduledChargesScheduleScheduleItem]
type v1ContractListResponseDataInitialScheduledChargesScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialScheduledChargesScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialScheduledChargesScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialTransition struct {
	FromContractID string                                           `json:"from_contract_id,required" format:"uuid"`
	ToContractID   string                                           `json:"to_contract_id,required" format:"uuid"`
	Type           V1ContractListResponseDataInitialTransitionsType `json:"type,required"`
	JSON           v1ContractListResponseDataInitialTransitionJSON  `json:"-"`
}

// v1ContractListResponseDataInitialTransitionJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataInitialTransition]
type v1ContractListResponseDataInitialTransitionJSON struct {
	FromContractID apijson.Field
	ToContractID   apijson.Field
	Type           apijson.Field
	raw            string
	ExtraFields    map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialTransition) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialTransitionJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialTransitionsType string

const (
	V1ContractListResponseDataInitialTransitionsTypeSupersede V1ContractListResponseDataInitialTransitionsType = "SUPERSEDE"
	V1ContractListResponseDataInitialTransitionsTypeRenewal   V1ContractListResponseDataInitialTransitionsType = "RENEWAL"
)

func (r V1ContractListResponseDataInitialTransitionsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialTransitionsTypeSupersede, V1ContractListResponseDataInitialTransitionsTypeRenewal:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialUsageStatementSchedule struct {
	// Contract usage statements follow a selected cadence based on this date.
	BillingAnchorDate time.Time                                                        `json:"billing_anchor_date,required" format:"date-time"`
	Frequency         V1ContractListResponseDataInitialUsageStatementScheduleFrequency `json:"frequency,required"`
	JSON              v1ContractListResponseDataInitialUsageStatementScheduleJSON      `json:"-"`
}

// v1ContractListResponseDataInitialUsageStatementScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialUsageStatementSchedule]
type v1ContractListResponseDataInitialUsageStatementScheduleJSON struct {
	BillingAnchorDate apijson.Field
	Frequency         apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialUsageStatementSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialUsageStatementScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialUsageStatementScheduleFrequency string

const (
	V1ContractListResponseDataInitialUsageStatementScheduleFrequencyMonthly   V1ContractListResponseDataInitialUsageStatementScheduleFrequency = "MONTHLY"
	V1ContractListResponseDataInitialUsageStatementScheduleFrequencyQuarterly V1ContractListResponseDataInitialUsageStatementScheduleFrequency = "QUARTERLY"
	V1ContractListResponseDataInitialUsageStatementScheduleFrequencyAnnual    V1ContractListResponseDataInitialUsageStatementScheduleFrequency = "ANNUAL"
	V1ContractListResponseDataInitialUsageStatementScheduleFrequencyWeekly    V1ContractListResponseDataInitialUsageStatementScheduleFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataInitialUsageStatementScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialUsageStatementScheduleFrequencyMonthly, V1ContractListResponseDataInitialUsageStatementScheduleFrequencyQuarterly, V1ContractListResponseDataInitialUsageStatementScheduleFrequencyAnnual, V1ContractListResponseDataInitialUsageStatementScheduleFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCredit struct {
	ID      string                                          `json:"id,required" format:"uuid"`
	Product V1ContractListResponseDataInitialCreditsProduct `json:"product,required"`
	Type    V1ContractListResponseDataInitialCreditsType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        V1ContractListResponseDataInitialCreditsAccessSchedule `json:"access_schedule"`
	ApplicableContractIDs []string                                               `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string                                               `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string                                               `json:"applicable_product_tags"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                          `json:"balance"`
	Contract     V1ContractListResponseDataInitialCreditsContract `json:"contract"`
	CustomFields map[string]string                                `json:"custom_fields"`
	Description  string                                           `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataInitialCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// A list of ordered events that impact the balance of a credit. For example, an
	// invoice deduction or an expiration.
	Ledger []V1ContractListResponseDataInitialCreditsLedger `json:"ledger"`
	Name   string                                           `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority float64                                          `json:"priority"`
	RateType V1ContractListResponseDataInitialCreditsRateType `json:"rate_type"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataInitialCreditsSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                      `json:"uniqueness_key"`
	JSON          v1ContractListResponseDataInitialCreditJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataInitialCredit]
type v1ContractListResponseDataInitialCreditJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCreditsProduct struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	Name string                                              `json:"name,required"`
	JSON v1ContractListResponseDataInitialCreditsProductJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCreditsProduct]
type v1ContractListResponseDataInitialCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCreditsType string

const (
	V1ContractListResponseDataInitialCreditsTypeCredit V1ContractListResponseDataInitialCreditsType = "CREDIT"
)

func (r V1ContractListResponseDataInitialCreditsType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCreditsTypeCredit:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits.
type V1ContractListResponseDataInitialCreditsAccessSchedule struct {
	ScheduleItems []V1ContractListResponseDataInitialCreditsAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractListResponseDataInitialCreditsAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractListResponseDataInitialCreditsAccessScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataInitialCreditsAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialCreditsAccessSchedule]
type v1ContractListResponseDataInitialCreditsAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCreditsAccessScheduleScheduleItem struct {
	ID           string                                                                 `json:"id,required" format:"uuid"`
	Amount       float64                                                                `json:"amount,required"`
	EndingBefore time.Time                                                              `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                              `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractListResponseDataInitialCreditsAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialCreditsAccessScheduleScheduleItem]
type v1ContractListResponseDataInitialCreditsAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCreditsAccessScheduleCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractListResponseDataInitialCreditsAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialCreditsAccessScheduleCreditType]
type v1ContractListResponseDataInitialCreditsAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCreditsContract struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataInitialCreditsContractJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsContractJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCreditsContract]
type v1ContractListResponseDataInitialCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for credit hierarchy access control
type V1ContractListResponseDataInitialCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataInitialCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataInitialCreditsHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialCreditsHierarchyConfiguration]
type v1ContractListResponseDataInitialCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                   `json:"contract_ids"`
	JSON        v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                            `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCreditsLedger struct {
	Amount     float64                                            `json:"amount,required"`
	Timestamp  time.Time                                          `json:"timestamp,required" format:"date-time"`
	Type       V1ContractListResponseDataInitialCreditsLedgerType `json:"type,required"`
	ContractID string                                             `json:"contract_id" format:"uuid"`
	InvoiceID  string                                             `json:"invoice_id" format:"uuid"`
	Reason     string                                             `json:"reason"`
	SegmentID  string                                             `json:"segment_id" format:"uuid"`
	JSON       v1ContractListResponseDataInitialCreditsLedgerJSON `json:"-"`
	union      V1ContractListResponseDataInitialCreditsLedgerUnion
}

// v1ContractListResponseDataInitialCreditsLedgerJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCreditsLedger]
type v1ContractListResponseDataInitialCreditsLedgerJSON struct {
	Amount      apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	ContractID  apijson.Field
	InvoiceID   apijson.Field
	Reason      apijson.Field
	SegmentID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataInitialCreditsLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataInitialCreditsLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataInitialCreditsLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataInitialCreditsLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject].
func (r V1ContractListResponseDataInitialCreditsLedger) AsUnion() V1ContractListResponseDataInitialCreditsLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject],
// [V1ContractListResponseDataInitialCreditsLedgerObject] or
// [V1ContractListResponseDataInitialCreditsLedgerObject].
type V1ContractListResponseDataInitialCreditsLedgerUnion interface {
	implementsV1ContractListResponseDataInitialCreditsLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataInitialCreditsLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialCreditsLedgerObject{}),
		},
	)
}

type V1ContractListResponseDataInitialCreditsLedgerObject struct {
	Amount    float64                                                  `json:"amount,required"`
	SegmentID string                                                   `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                `json:"timestamp,required" format:"date-time"`
	Type      V1ContractListResponseDataInitialCreditsLedgerObjectType `json:"type,required"`
	JSON      v1ContractListResponseDataInitialCreditsLedgerObjectJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialCreditsLedgerObject]
type v1ContractListResponseDataInitialCreditsLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialCreditsLedgerObject) implementsV1ContractListResponseDataInitialCreditsLedger() {
}

type V1ContractListResponseDataInitialCreditsLedgerObjectType string

const (
	V1ContractListResponseDataInitialCreditsLedgerObjectTypeCreditSegmentStart V1ContractListResponseDataInitialCreditsLedgerObjectType = "CREDIT_SEGMENT_START"
)

func (r V1ContractListResponseDataInitialCreditsLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCreditsLedgerObjectTypeCreditSegmentStart:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCreditsLedgerType string

const (
	V1ContractListResponseDataInitialCreditsLedgerTypeCreditSegmentStart              V1ContractListResponseDataInitialCreditsLedgerType = "CREDIT_SEGMENT_START"
	V1ContractListResponseDataInitialCreditsLedgerTypeCreditAutomatedInvoiceDeduction V1ContractListResponseDataInitialCreditsLedgerType = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListResponseDataInitialCreditsLedgerTypeCreditExpiration                V1ContractListResponseDataInitialCreditsLedgerType = "CREDIT_EXPIRATION"
	V1ContractListResponseDataInitialCreditsLedgerTypeCreditCanceled                  V1ContractListResponseDataInitialCreditsLedgerType = "CREDIT_CANCELED"
	V1ContractListResponseDataInitialCreditsLedgerTypeCreditCredited                  V1ContractListResponseDataInitialCreditsLedgerType = "CREDIT_CREDITED"
	V1ContractListResponseDataInitialCreditsLedgerTypeCreditManual                    V1ContractListResponseDataInitialCreditsLedgerType = "CREDIT_MANUAL"
	V1ContractListResponseDataInitialCreditsLedgerTypeCreditSeatBasedAdjustment       V1ContractListResponseDataInitialCreditsLedgerType = "CREDIT_SEAT_BASED_ADJUSTMENT"
)

func (r V1ContractListResponseDataInitialCreditsLedgerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCreditsLedgerTypeCreditSegmentStart, V1ContractListResponseDataInitialCreditsLedgerTypeCreditAutomatedInvoiceDeduction, V1ContractListResponseDataInitialCreditsLedgerTypeCreditExpiration, V1ContractListResponseDataInitialCreditsLedgerTypeCreditCanceled, V1ContractListResponseDataInitialCreditsLedgerTypeCreditCredited, V1ContractListResponseDataInitialCreditsLedgerTypeCreditManual, V1ContractListResponseDataInitialCreditsLedgerTypeCreditSeatBasedAdjustment:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCreditsRateType string

const (
	V1ContractListResponseDataInitialCreditsRateTypeCommitRate V1ContractListResponseDataInitialCreditsRateType = "COMMIT_RATE"
	V1ContractListResponseDataInitialCreditsRateTypeListRate   V1ContractListResponseDataInitialCreditsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataInitialCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialCreditsRateTypeCommitRate, V1ContractListResponseDataInitialCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                              `json:"product_tags"`
	JSON        v1ContractListResponseDataInitialCreditsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataInitialCreditsSpecifierJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialCreditsSpecifier]
type v1ContractListResponseDataInitialCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialDiscount struct {
	ID           string                                             `json:"id,required" format:"uuid"`
	Product      V1ContractListResponseDataInitialDiscountsProduct  `json:"product,required"`
	Schedule     V1ContractListResponseDataInitialDiscountsSchedule `json:"schedule,required"`
	CustomFields map[string]string                                  `json:"custom_fields"`
	Name         string                                             `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                        `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataInitialDiscountJSON `json:"-"`
}

// v1ContractListResponseDataInitialDiscountJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataInitialDiscount]
type v1ContractListResponseDataInitialDiscountJSON struct {
	ID                   apijson.Field
	Product              apijson.Field
	Schedule             apijson.Field
	CustomFields         apijson.Field
	Name                 apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialDiscount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialDiscountJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialDiscountsProduct struct {
	ID   string                                                `json:"id,required" format:"uuid"`
	Name string                                                `json:"name,required"`
	JSON v1ContractListResponseDataInitialDiscountsProductJSON `json:"-"`
}

// v1ContractListResponseDataInitialDiscountsProductJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialDiscountsProduct]
type v1ContractListResponseDataInitialDiscountsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialDiscountsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialDiscountsProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialDiscountsSchedule struct {
	CreditType V1ContractListResponseDataInitialDiscountsScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                             `json:"do_not_invoice"`
	ScheduleItems []V1ContractListResponseDataInitialDiscountsScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListResponseDataInitialDiscountsScheduleJSON           `json:"-"`
}

// v1ContractListResponseDataInitialDiscountsScheduleJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialDiscountsSchedule]
type v1ContractListResponseDataInitialDiscountsScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialDiscountsSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialDiscountsScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialDiscountsScheduleCreditType struct {
	ID   string                                                           `json:"id,required" format:"uuid"`
	Name string                                                           `json:"name,required"`
	JSON v1ContractListResponseDataInitialDiscountsScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialDiscountsScheduleCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialDiscountsScheduleCreditType]
type v1ContractListResponseDataInitialDiscountsScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialDiscountsScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialDiscountsScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialDiscountsScheduleScheduleItem struct {
	ID        string                                                             `json:"id,required" format:"uuid"`
	Amount    float64                                                            `json:"amount,required"`
	Quantity  float64                                                            `json:"quantity,required"`
	Timestamp time.Time                                                          `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                            `json:"unit_price,required"`
	InvoiceID string                                                             `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListResponseDataInitialDiscountsScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListResponseDataInitialDiscountsScheduleScheduleItemJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialDiscountsScheduleScheduleItem]
type v1ContractListResponseDataInitialDiscountsScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialDiscountsScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialDiscountsScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
type V1ContractListResponseDataInitialHierarchyConfiguration struct {
	// This field can have the runtime type of
	// [[]V1ContractListResponseDataInitialHierarchyConfigurationChildrenChild].
	Children interface{} `json:"children"`
	// This field can have the runtime type of
	// [V1ContractListResponseDataInitialHierarchyConfigurationParentParent].
	Parent interface{}                                                 `json:"parent"`
	JSON   v1ContractListResponseDataInitialHierarchyConfigurationJSON `json:"-"`
	union  V1ContractListResponseDataInitialHierarchyConfigurationUnion
}

// v1ContractListResponseDataInitialHierarchyConfigurationJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialHierarchyConfiguration]
type v1ContractListResponseDataInitialHierarchyConfigurationJSON struct {
	Children    apijson.Field
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataInitialHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataInitialHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataInitialHierarchyConfiguration{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListResponseDataInitialHierarchyConfigurationUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataInitialHierarchyConfigurationChildren],
// [V1ContractListResponseDataInitialHierarchyConfigurationParent].
func (r V1ContractListResponseDataInitialHierarchyConfiguration) AsUnion() V1ContractListResponseDataInitialHierarchyConfigurationUnion {
	return r.union
}

// Either a **parent** configuration with a list of children or a **child**
// configuration with a single parent.
//
// Union satisfied by
// [V1ContractListResponseDataInitialHierarchyConfigurationChildren] or
// [V1ContractListResponseDataInitialHierarchyConfigurationParent].
type V1ContractListResponseDataInitialHierarchyConfigurationUnion interface {
	implementsV1ContractListResponseDataInitialHierarchyConfiguration()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataInitialHierarchyConfigurationUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialHierarchyConfigurationChildren{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialHierarchyConfigurationParent{}),
		},
	)
}

type V1ContractListResponseDataInitialHierarchyConfigurationChildren struct {
	// List of contracts that belong to this parent.
	Children []V1ContractListResponseDataInitialHierarchyConfigurationChildrenChild `json:"children,required"`
	JSON     v1ContractListResponseDataInitialHierarchyConfigurationChildrenJSON    `json:"-"`
}

// v1ContractListResponseDataInitialHierarchyConfigurationChildrenJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialHierarchyConfigurationChildren]
type v1ContractListResponseDataInitialHierarchyConfigurationChildrenJSON struct {
	Children    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialHierarchyConfigurationChildren) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialHierarchyConfigurationChildrenJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialHierarchyConfigurationChildren) implementsV1ContractListResponseDataInitialHierarchyConfiguration() {
}

type V1ContractListResponseDataInitialHierarchyConfigurationChildrenChild struct {
	ContractID string                                                                   `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                   `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractListResponseDataInitialHierarchyConfigurationChildrenChildJSON `json:"-"`
}

// v1ContractListResponseDataInitialHierarchyConfigurationChildrenChildJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialHierarchyConfigurationChildrenChild]
type v1ContractListResponseDataInitialHierarchyConfigurationChildrenChildJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialHierarchyConfigurationChildrenChild) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialHierarchyConfigurationChildrenChildJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialHierarchyConfigurationParent struct {
	// The single parent contract/customer for this child.
	Parent V1ContractListResponseDataInitialHierarchyConfigurationParentParent `json:"parent,required"`
	JSON   v1ContractListResponseDataInitialHierarchyConfigurationParentJSON   `json:"-"`
}

// v1ContractListResponseDataInitialHierarchyConfigurationParentJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialHierarchyConfigurationParent]
type v1ContractListResponseDataInitialHierarchyConfigurationParentJSON struct {
	Parent      apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialHierarchyConfigurationParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialHierarchyConfigurationParentJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialHierarchyConfigurationParent) implementsV1ContractListResponseDataInitialHierarchyConfiguration() {
}

// The single parent contract/customer for this child.
type V1ContractListResponseDataInitialHierarchyConfigurationParentParent struct {
	ContractID string                                                                  `json:"contract_id,required" format:"uuid"`
	CustomerID string                                                                  `json:"customer_id,required" format:"uuid"`
	JSON       v1ContractListResponseDataInitialHierarchyConfigurationParentParentJSON `json:"-"`
}

// v1ContractListResponseDataInitialHierarchyConfigurationParentParentJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialHierarchyConfigurationParentParent]
type v1ContractListResponseDataInitialHierarchyConfigurationParentParentJSON struct {
	ContractID  apijson.Field
	CustomerID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialHierarchyConfigurationParentParent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialHierarchyConfigurationParentParentJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfiguration struct {
	Commit V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                                   `json:"is_enabled,required"`
	PaymentGateConfig V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the amount the balance should be recharged to.
	RechargeToAmount float64 `json:"recharge_to_amount,required"`
	// Specify the threshold amount for the contract. Each time the contract's prepaid
	// balance lowers to this amount, a threshold charge will be initiated.
	ThresholdAmount float64 `json:"threshold_amount,required"`
	// If provided, the threshold, recharge-to amount, and the resulting threshold
	// commit amount will be in terms of this credit type instead of the fiat currency.
	CustomCreditTypeID string                                                                    `json:"custom_credit_type_id" format:"uuid"`
	JSON               v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationJSON `json:"-"`
}

// v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialPrepaidBalanceThresholdConfiguration]
type v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationJSON struct {
	Commit             apijson.Field
	IsEnabled          apijson.Field
	PaymentGateConfig  apijson.Field
	RechargeToAmount   apijson.Field
	ThresholdAmount    apijson.Field
	CustomCreditTypeID apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialPrepaidBalanceThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID string `json:"product_id,required"`
	// Which products the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Which tags the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags []string `json:"applicable_product_tags"`
	Description           string   `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string `json:"name"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers []V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier `json:"specifiers"`
	JSON       v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON        `json:"-"`
}

// v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommit]
type v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON struct {
	ProductID             apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	Description           apijson.Field
	Name                  apijson.Field
	Specifiers            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                                                 `json:"product_tags"`
	JSON        v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier]
type v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationCommitSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig]
type v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                           `json:"tax_name"`
	JSON    v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                                      `json:"invoice_metadata"`
	JSON            v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractListResponseDataInitialPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialProfessionalService struct {
	ID string `json:"id,required" format:"uuid"`
	// Maximum amount for the term.
	MaxAmount float64 `json:"max_amount,required"`
	ProductID string  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity float64 `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    float64           `json:"unit_price,required"`
	CustomFields map[string]string `json:"custom_fields"`
	Description  string            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string                                                   `json:"netsuite_sales_order_id"`
	JSON                 v1ContractListResponseDataInitialProfessionalServiceJSON `json:"-"`
}

// v1ContractListResponseDataInitialProfessionalServiceJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialProfessionalService]
type v1ContractListResponseDataInitialProfessionalServiceJSON struct {
	ID                   apijson.Field
	MaxAmount            apijson.Field
	ProductID            apijson.Field
	Quantity             apijson.Field
	UnitPrice            apijson.Field
	CustomFields         apijson.Field
	Description          apijson.Field
	NetsuiteSalesOrderID apijson.Field
	raw                  string
	ExtraFields          map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialProfessionalService) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialProfessionalServiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCommit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractListResponseDataInitialRecurringCommitsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractListResponseDataInitialRecurringCommitsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                  `json:"priority,required"`
	Product  V1ContractListResponseDataInitialRecurringCommitsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractListResponseDataInitialRecurringCommitsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                  `json:"applicable_product_tags"`
	Contract              V1ContractListResponseDataInitialRecurringCommitsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataInitialRecurringCommitsHierarchyConfiguration `json:"hierarchy_configuration"`
	// The amount the customer should be billed for the commit. Not required.
	InvoiceAmount V1ContractListResponseDataInitialRecurringCommitsInvoiceAmount `json:"invoice_amount"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractListResponseDataInitialRecurringCommitsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataInitialRecurringCommitsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractListResponseDataInitialRecurringCommitJSON                `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialRecurringCommit]
type v1ContractListResponseDataInitialRecurringCommitJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	InvoiceAmount          apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractListResponseDataInitialRecurringCommitsAccessAmount struct {
	CreditTypeID string                                                            `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                           `json:"unit_price,required"`
	Quantity     float64                                                           `json:"quantity"`
	JSON         v1ContractListResponseDataInitialRecurringCommitsAccessAmountJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsAccessAmount]
type v1ContractListResponseDataInitialRecurringCommitsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractListResponseDataInitialRecurringCommitsCommitDuration struct {
	Value float64                                                             `json:"value,required"`
	Unit  V1ContractListResponseDataInitialRecurringCommitsCommitDurationUnit `json:"unit"`
	JSON  v1ContractListResponseDataInitialRecurringCommitsCommitDurationJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsCommitDuration]
type v1ContractListResponseDataInitialRecurringCommitsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCommitsCommitDurationUnit string

const (
	V1ContractListResponseDataInitialRecurringCommitsCommitDurationUnitPeriods V1ContractListResponseDataInitialRecurringCommitsCommitDurationUnit = "PERIODS"
)

func (r V1ContractListResponseDataInitialRecurringCommitsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCommitsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCommitsProduct struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	Name string                                                       `json:"name,required"`
	JSON v1ContractListResponseDataInitialRecurringCommitsProductJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsProductJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsProduct]
type v1ContractListResponseDataInitialRecurringCommitsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractListResponseDataInitialRecurringCommitsRateType string

const (
	V1ContractListResponseDataInitialRecurringCommitsRateTypeCommitRate V1ContractListResponseDataInitialRecurringCommitsRateType = "COMMIT_RATE"
	V1ContractListResponseDataInitialRecurringCommitsRateTypeListRate   V1ContractListResponseDataInitialRecurringCommitsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataInitialRecurringCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCommitsRateTypeCommitRate, V1ContractListResponseDataInitialRecurringCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCommitsContract struct {
	ID   string                                                        `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataInitialRecurringCommitsContractJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsContractJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsContract]
type v1ContractListResponseDataInitialRecurringCommitsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfiguration]
type v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                            `json:"contract_ids"`
	JSON        v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                     `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The amount the customer should be billed for the commit. Not required.
type V1ContractListResponseDataInitialRecurringCommitsInvoiceAmount struct {
	CreditTypeID string                                                             `json:"credit_type_id,required" format:"uuid"`
	Quantity     float64                                                            `json:"quantity,required"`
	UnitPrice    float64                                                            `json:"unit_price,required"`
	JSON         v1ContractListResponseDataInitialRecurringCommitsInvoiceAmountJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsInvoiceAmountJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsInvoiceAmount]
type v1ContractListResponseDataInitialRecurringCommitsInvoiceAmountJSON struct {
	CreditTypeID apijson.Field
	Quantity     apijson.Field
	UnitPrice    apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsInvoiceAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsInvoiceAmountJSON) RawJSON() string {
	return r.raw
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractListResponseDataInitialRecurringCommitsProration string

const (
	V1ContractListResponseDataInitialRecurringCommitsProrationNone         V1ContractListResponseDataInitialRecurringCommitsProration = "NONE"
	V1ContractListResponseDataInitialRecurringCommitsProrationFirst        V1ContractListResponseDataInitialRecurringCommitsProration = "FIRST"
	V1ContractListResponseDataInitialRecurringCommitsProrationLast         V1ContractListResponseDataInitialRecurringCommitsProration = "LAST"
	V1ContractListResponseDataInitialRecurringCommitsProrationFirstAndLast V1ContractListResponseDataInitialRecurringCommitsProration = "FIRST_AND_LAST"
)

func (r V1ContractListResponseDataInitialRecurringCommitsProration) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCommitsProrationNone, V1ContractListResponseDataInitialRecurringCommitsProrationFirst, V1ContractListResponseDataInitialRecurringCommitsProrationLast, V1ContractListResponseDataInitialRecurringCommitsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequency string

const (
	V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyMonthly   V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequency = "MONTHLY"
	V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyQuarterly V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequency = "QUARTERLY"
	V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyAnnual    V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequency = "ANNUAL"
	V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyWeekly    V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyMonthly, V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyQuarterly, V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyAnnual, V1ContractListResponseDataInitialRecurringCommitsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCommitsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                       `json:"product_tags"`
	JSON        v1ContractListResponseDataInitialRecurringCommitsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsSpecifier]
type v1ContractListResponseDataInitialRecurringCommitsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfig struct {
	Allocation              V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                     `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfig]
type v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocation string

const (
	V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocationIndividual V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocationPooled     V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocationIndividual, V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                           `json:"is_prorated,required"`
	JSON       v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCommitsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCredit struct {
	ID string `json:"id,required" format:"uuid"`
	// The amount of commit to grant.
	AccessAmount V1ContractListResponseDataInitialRecurringCreditsAccessAmount `json:"access_amount,required"`
	// The amount of time the created commits will be valid for
	CommitDuration V1ContractListResponseDataInitialRecurringCreditsCommitDuration `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority float64                                                  `json:"priority,required"`
	Product  V1ContractListResponseDataInitialRecurringCreditsProduct `json:"product,required"`
	// Whether the created commits will use the commit rate or list rate
	RateType V1ContractListResponseDataInitialRecurringCreditsRateType `json:"rate_type,required"`
	// Determines the start time for the first commit
	StartingAt time.Time `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags []string                                                  `json:"applicable_product_tags"`
	Contract              V1ContractListResponseDataInitialRecurringCreditsContract `json:"contract"`
	// Will be passed down to the individual commits
	Description string `json:"description"`
	// Determines when the contract will stop creating recurring commits. Optional
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration V1ContractListResponseDataInitialRecurringCreditsHierarchyConfiguration `json:"hierarchy_configuration"`
	// Displayed on invoices. Will be passed through to the individual commits
	Name string `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration V1ContractListResponseDataInitialRecurringCreditsProration `json:"proration"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequency `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction float64 `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListResponseDataInitialRecurringCreditsSpecifier `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfig `json:"subscription_config"`
	JSON               v1ContractListResponseDataInitialRecurringCreditJSON                `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialRecurringCredit]
type v1ContractListResponseDataInitialRecurringCreditJSON struct {
	ID                     apijson.Field
	AccessAmount           apijson.Field
	CommitDuration         apijson.Field
	Priority               apijson.Field
	Product                apijson.Field
	RateType               apijson.Field
	StartingAt             apijson.Field
	ApplicableProductIDs   apijson.Field
	ApplicableProductTags  apijson.Field
	Contract               apijson.Field
	Description            apijson.Field
	EndingBefore           apijson.Field
	HierarchyConfiguration apijson.Field
	Name                   apijson.Field
	NetsuiteSalesOrderID   apijson.Field
	Proration              apijson.Field
	RecurrenceFrequency    apijson.Field
	RolloverFraction       apijson.Field
	Specifiers             apijson.Field
	SubscriptionConfig     apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditJSON) RawJSON() string {
	return r.raw
}

// The amount of commit to grant.
type V1ContractListResponseDataInitialRecurringCreditsAccessAmount struct {
	CreditTypeID string                                                            `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    float64                                                           `json:"unit_price,required"`
	Quantity     float64                                                           `json:"quantity"`
	JSON         v1ContractListResponseDataInitialRecurringCreditsAccessAmountJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsAccessAmountJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsAccessAmount]
type v1ContractListResponseDataInitialRecurringCreditsAccessAmountJSON struct {
	CreditTypeID apijson.Field
	UnitPrice    apijson.Field
	Quantity     apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsAccessAmount) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsAccessAmountJSON) RawJSON() string {
	return r.raw
}

// The amount of time the created commits will be valid for
type V1ContractListResponseDataInitialRecurringCreditsCommitDuration struct {
	Value float64                                                             `json:"value,required"`
	Unit  V1ContractListResponseDataInitialRecurringCreditsCommitDurationUnit `json:"unit"`
	JSON  v1ContractListResponseDataInitialRecurringCreditsCommitDurationJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsCommitDurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsCommitDuration]
type v1ContractListResponseDataInitialRecurringCreditsCommitDurationJSON struct {
	Value       apijson.Field
	Unit        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsCommitDuration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsCommitDurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCreditsCommitDurationUnit string

const (
	V1ContractListResponseDataInitialRecurringCreditsCommitDurationUnitPeriods V1ContractListResponseDataInitialRecurringCreditsCommitDurationUnit = "PERIODS"
)

func (r V1ContractListResponseDataInitialRecurringCreditsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCreditsCommitDurationUnitPeriods:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCreditsProduct struct {
	ID   string                                                       `json:"id,required" format:"uuid"`
	Name string                                                       `json:"name,required"`
	JSON v1ContractListResponseDataInitialRecurringCreditsProductJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsProductJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsProduct]
type v1ContractListResponseDataInitialRecurringCreditsProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsProductJSON) RawJSON() string {
	return r.raw
}

// Whether the created commits will use the commit rate or list rate
type V1ContractListResponseDataInitialRecurringCreditsRateType string

const (
	V1ContractListResponseDataInitialRecurringCreditsRateTypeCommitRate V1ContractListResponseDataInitialRecurringCreditsRateType = "COMMIT_RATE"
	V1ContractListResponseDataInitialRecurringCreditsRateTypeListRate   V1ContractListResponseDataInitialRecurringCreditsRateType = "LIST_RATE"
)

func (r V1ContractListResponseDataInitialRecurringCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCreditsRateTypeCommitRate, V1ContractListResponseDataInitialRecurringCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCreditsContract struct {
	ID   string                                                        `json:"id,required" format:"uuid"`
	JSON v1ContractListResponseDataInitialRecurringCreditsContractJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsContractJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsContract]
type v1ContractListResponseDataInitialRecurringCreditsContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfiguration struct {
	ChildAccess V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfiguration]
type v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess struct {
	Type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                            `json:"contract_ids"`
	JSON        v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion
}

// v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess]
type v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject].
func (r V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess) AsUnion() V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType]
// or
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject].
type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType struct {
	Type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType]
type v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessType) implementsV1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                                     `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject]
type v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccess() {
}

type V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractListResponseDataInitialRecurringCreditsProration string

const (
	V1ContractListResponseDataInitialRecurringCreditsProrationNone         V1ContractListResponseDataInitialRecurringCreditsProration = "NONE"
	V1ContractListResponseDataInitialRecurringCreditsProrationFirst        V1ContractListResponseDataInitialRecurringCreditsProration = "FIRST"
	V1ContractListResponseDataInitialRecurringCreditsProrationLast         V1ContractListResponseDataInitialRecurringCreditsProration = "LAST"
	V1ContractListResponseDataInitialRecurringCreditsProrationFirstAndLast V1ContractListResponseDataInitialRecurringCreditsProration = "FIRST_AND_LAST"
)

func (r V1ContractListResponseDataInitialRecurringCreditsProration) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCreditsProrationNone, V1ContractListResponseDataInitialRecurringCreditsProrationFirst, V1ContractListResponseDataInitialRecurringCreditsProrationLast, V1ContractListResponseDataInitialRecurringCreditsProrationFirstAndLast:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequency string

const (
	V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyMonthly   V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequency = "MONTHLY"
	V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyQuarterly V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequency = "QUARTERLY"
	V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyAnnual    V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequency = "ANNUAL"
	V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyWeekly    V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyMonthly, V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyQuarterly, V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyAnnual, V1ContractListResponseDataInitialRecurringCreditsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCreditsSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                       `json:"product_tags"`
	JSON        v1ContractListResponseDataInitialRecurringCreditsSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsSpecifierJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsSpecifier]
type v1ContractListResponseDataInitialRecurringCreditsSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsSpecifierJSON) RawJSON() string {
	return r.raw
}

// Attach a subscription to the recurring commit/credit.
type V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfig struct {
	Allocation              V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocation              `json:"allocation,required"`
	ApplySeatIncreaseConfig V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig `json:"apply_seat_increase_config,required"`
	SubscriptionID          string                                                                                     `json:"subscription_id,required" format:"uuid"`
	JSON                    v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigJSON                    `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfig]
type v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigJSON struct {
	Allocation              apijson.Field
	ApplySeatIncreaseConfig apijson.Field
	SubscriptionID          apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocation string

const (
	V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocationIndividual V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocation = "INDIVIDUAL"
	V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocationPooled     V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocationIndividual, V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated bool                                                                                           `json:"is_prorated,required"`
	JSON       v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON `json:"-"`
}

// v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig]
type v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON struct {
	IsProrated  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialRecurringCreditsSubscriptionConfigApplySeatIncreaseConfigJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialResellerRoyalty struct {
	Fraction              float64                                                        `json:"fraction,required"`
	NetsuiteResellerID    string                                                         `json:"netsuite_reseller_id,required"`
	ResellerType          V1ContractListResponseDataInitialResellerRoyaltiesResellerType `json:"reseller_type,required"`
	StartingAt            time.Time                                                      `json:"starting_at,required" format:"date-time"`
	ApplicableProductIDs  []string                                                       `json:"applicable_product_ids"`
	ApplicableProductTags []string                                                       `json:"applicable_product_tags"`
	AwsAccountNumber      string                                                         `json:"aws_account_number"`
	AwsOfferID            string                                                         `json:"aws_offer_id"`
	AwsPayerReferenceID   string                                                         `json:"aws_payer_reference_id"`
	EndingBefore          time.Time                                                      `json:"ending_before" format:"date-time"`
	GcpAccountID          string                                                         `json:"gcp_account_id"`
	GcpOfferID            string                                                         `json:"gcp_offer_id"`
	ResellerContractValue float64                                                        `json:"reseller_contract_value"`
	JSON                  v1ContractListResponseDataInitialResellerRoyaltyJSON           `json:"-"`
}

// v1ContractListResponseDataInitialResellerRoyaltyJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataInitialResellerRoyalty]
type v1ContractListResponseDataInitialResellerRoyaltyJSON struct {
	Fraction              apijson.Field
	NetsuiteResellerID    apijson.Field
	ResellerType          apijson.Field
	StartingAt            apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	AwsAccountNumber      apijson.Field
	AwsOfferID            apijson.Field
	AwsPayerReferenceID   apijson.Field
	EndingBefore          apijson.Field
	GcpAccountID          apijson.Field
	GcpOfferID            apijson.Field
	ResellerContractValue apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialResellerRoyaltiesResellerType string

const (
	V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeAws           V1ContractListResponseDataInitialResellerRoyaltiesResellerType = "AWS"
	V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeAwsProService V1ContractListResponseDataInitialResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeGcp           V1ContractListResponseDataInitialResellerRoyaltiesResellerType = "GCP"
	V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeGcpProService V1ContractListResponseDataInitialResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractListResponseDataInitialResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeAws, V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeAwsProService, V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeGcp, V1ContractListResponseDataInitialResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

// Determines which scheduled and commit charges to consolidate onto the Contract's
// usage invoice. The charge's `timestamp` must match the usage invoice's
// `ending_before` date for consolidation to occur. This field cannot be modified
// after a Contract has been created. If this field is omitted, charges will appear
// on a separate invoice from usage charges.
type V1ContractListResponseDataInitialScheduledChargesOnUsageInvoices string

const (
	V1ContractListResponseDataInitialScheduledChargesOnUsageInvoicesAll V1ContractListResponseDataInitialScheduledChargesOnUsageInvoices = "ALL"
)

func (r V1ContractListResponseDataInitialScheduledChargesOnUsageInvoices) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialScheduledChargesOnUsageInvoicesAll:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialSpendThresholdConfiguration struct {
	Commit V1ContractListResponseDataInitialSpendThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                          `json:"is_enabled,required"`
	PaymentGateConfig V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the threshold amount for the contract. Each time the contract's usage
	// hits this amount, a threshold charge will be initiated.
	ThresholdAmount float64                                                          `json:"threshold_amount,required"`
	JSON            v1ContractListResponseDataInitialSpendThresholdConfigurationJSON `json:"-"`
}

// v1ContractListResponseDataInitialSpendThresholdConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataInitialSpendThresholdConfiguration]
type v1ContractListResponseDataInitialSpendThresholdConfigurationJSON struct {
	Commit            apijson.Field
	IsEnabled         apijson.Field
	PaymentGateConfig apijson.Field
	ThresholdAmount   apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialSpendThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialSpendThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialSpendThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID   string `json:"product_id,required"`
	Description string `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string                                                                 `json:"name"`
	JSON v1ContractListResponseDataInitialSpendThresholdConfigurationCommitJSON `json:"-"`
}

// v1ContractListResponseDataInitialSpendThresholdConfigurationCommitJSON contains
// the JSON metadata for the struct
// [V1ContractListResponseDataInitialSpendThresholdConfigurationCommit]
type v1ContractListResponseDataInitialSpendThresholdConfigurationCommitJSON struct {
	ProductID   apijson.Field
	Description apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialSpendThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialSpendThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfig]
type v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                  `json:"tax_name"`
	JSON    v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                             `json:"invoice_metadata"`
	JSON            v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractListResponseDataInitialSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractListResponseDataInitialUsageFilter struct {
	Current V1ContractListResponseDataInitialUsageFilterCurrent  `json:"current,required,nullable"`
	Initial V1ContractListResponseDataInitialUsageFilterInitial  `json:"initial,required"`
	Updates []V1ContractListResponseDataInitialUsageFilterUpdate `json:"updates,required"`
	JSON    v1ContractListResponseDataInitialUsageFilterJSON     `json:"-"`
}

// v1ContractListResponseDataInitialUsageFilterJSON contains the JSON metadata for
// the struct [V1ContractListResponseDataInitialUsageFilter]
type v1ContractListResponseDataInitialUsageFilterJSON struct {
	Current     apijson.Field
	Initial     apijson.Field
	Updates     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialUsageFilter) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialUsageFilterJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialUsageFilterCurrent struct {
	GroupKey    string                                                  `json:"group_key,required"`
	GroupValues []string                                                `json:"group_values,required"`
	StartingAt  time.Time                                               `json:"starting_at" format:"date-time"`
	JSON        v1ContractListResponseDataInitialUsageFilterCurrentJSON `json:"-"`
}

// v1ContractListResponseDataInitialUsageFilterCurrentJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialUsageFilterCurrent]
type v1ContractListResponseDataInitialUsageFilterCurrentJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialUsageFilterCurrent) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialUsageFilterCurrentJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialUsageFilterInitial struct {
	GroupKey    string                                                  `json:"group_key,required"`
	GroupValues []string                                                `json:"group_values,required"`
	StartingAt  time.Time                                               `json:"starting_at" format:"date-time"`
	JSON        v1ContractListResponseDataInitialUsageFilterInitialJSON `json:"-"`
}

// v1ContractListResponseDataInitialUsageFilterInitialJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialUsageFilterInitial]
type v1ContractListResponseDataInitialUsageFilterInitialJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialUsageFilterInitial) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialUsageFilterInitialJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataInitialUsageFilterUpdate struct {
	GroupKey    string                                                 `json:"group_key,required"`
	GroupValues []string                                               `json:"group_values,required"`
	StartingAt  time.Time                                              `json:"starting_at,required" format:"date-time"`
	JSON        v1ContractListResponseDataInitialUsageFilterUpdateJSON `json:"-"`
}

// v1ContractListResponseDataInitialUsageFilterUpdateJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataInitialUsageFilterUpdate]
type v1ContractListResponseDataInitialUsageFilterUpdateJSON struct {
	GroupKey    apijson.Field
	GroupValues apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataInitialUsageFilterUpdate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataInitialUsageFilterUpdateJSON) RawJSON() string {
	return r.raw
}

// The billing provider configuration associated with a contract.
type V1ContractListResponseDataCustomerBillingProviderConfiguration struct {
	BillingProvider V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider `json:"billing_provider,required"`
	DeliveryMethod  V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethod  `json:"delivery_method,required"`
	ID              string                                                                        `json:"id" format:"uuid"`
	// Configuration for the billing provider. The structure of this object is specific
	// to the billing provider.
	Configuration map[string]interface{}                                             `json:"configuration"`
	JSON          v1ContractListResponseDataCustomerBillingProviderConfigurationJSON `json:"-"`
}

// v1ContractListResponseDataCustomerBillingProviderConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataCustomerBillingProviderConfiguration]
type v1ContractListResponseDataCustomerBillingProviderConfigurationJSON struct {
	BillingProvider apijson.Field
	DeliveryMethod  apijson.Field
	ID              apijson.Field
	Configuration   apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataCustomerBillingProviderConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataCustomerBillingProviderConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider string

const (
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderAwsMarketplace   V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "aws_marketplace"
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderStripe           V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "stripe"
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderNetsuite         V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "netsuite"
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderCustom           V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "custom"
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderAzureMarketplace V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "azure_marketplace"
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderQuickbooksOnline V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "quickbooks_online"
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderWorkday          V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "workday"
	V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderGcpMarketplace   V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider = "gcp_marketplace"
)

func (r V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProvider) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderAwsMarketplace, V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderStripe, V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderNetsuite, V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderCustom, V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderAzureMarketplace, V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderQuickbooksOnline, V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderWorkday, V1ContractListResponseDataCustomerBillingProviderConfigurationBillingProviderGcpMarketplace:
		return true
	}
	return false
}

type V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethod string

const (
	V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodDirectToBillingProvider V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "direct_to_billing_provider"
	V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSqs                  V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "aws_sqs"
	V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodTackle                  V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "tackle"
	V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSns                  V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethod = "aws_sns"
)

func (r V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethod) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodDirectToBillingProvider, V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSqs, V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodTackle, V1ContractListResponseDataCustomerBillingProviderConfigurationDeliveryMethodAwsSns:
		return true
	}
	return false
}

type V1ContractListResponseDataPrepaidBalanceThresholdConfiguration struct {
	Commit V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                            `json:"is_enabled,required"`
	PaymentGateConfig V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the amount the balance should be recharged to.
	RechargeToAmount float64 `json:"recharge_to_amount,required"`
	// Specify the threshold amount for the contract. Each time the contract's prepaid
	// balance lowers to this amount, a threshold charge will be initiated.
	ThresholdAmount float64 `json:"threshold_amount,required"`
	// If provided, the threshold, recharge-to amount, and the resulting threshold
	// commit amount will be in terms of this credit type instead of the fiat currency.
	CustomCreditTypeID string                                                             `json:"custom_credit_type_id" format:"uuid"`
	JSON               v1ContractListResponseDataPrepaidBalanceThresholdConfigurationJSON `json:"-"`
}

// v1ContractListResponseDataPrepaidBalanceThresholdConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataPrepaidBalanceThresholdConfiguration]
type v1ContractListResponseDataPrepaidBalanceThresholdConfigurationJSON struct {
	Commit             apijson.Field
	IsEnabled          apijson.Field
	PaymentGateConfig  apijson.Field
	RechargeToAmount   apijson.Field
	ThresholdAmount    apijson.Field
	CustomCreditTypeID apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractListResponseDataPrepaidBalanceThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataPrepaidBalanceThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID string `json:"product_id,required"`
	// Which products the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs []string `json:"applicable_product_ids" format:"uuid"`
	// Which tags the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags []string `json:"applicable_product_tags"`
	Description           string   `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string `json:"name"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers []V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier `json:"specifiers"`
	JSON       v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitJSON        `json:"-"`
}

// v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommit]
type v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitJSON struct {
	ProductID             apijson.Field
	ApplicableProductIDs  apijson.Field
	ApplicableProductTags apijson.Field
	Description           apijson.Field
	Name                  apijson.Field
	Specifiers            apijson.Field
	raw                   string
	ExtraFields           map[string]apijson.Field
}

func (r *V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                                                          `json:"product_tags"`
	JSON        v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON `json:"-"`
}

// v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier]
type v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataPrepaidBalanceThresholdConfigurationCommitSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig]
type v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                                    `json:"tax_name"`
	JSON    v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                               `json:"invoice_metadata"`
	JSON            v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractListResponseDataPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

// Determines which scheduled and commit charges to consolidate onto the Contract's
// usage invoice. The charge's `timestamp` must match the usage invoice's
// `ending_before` date for consolidation to occur. This field cannot be modified
// after a Contract has been created. If this field is omitted, charges will appear
// on a separate invoice from usage charges.
type V1ContractListResponseDataScheduledChargesOnUsageInvoices string

const (
	V1ContractListResponseDataScheduledChargesOnUsageInvoicesAll V1ContractListResponseDataScheduledChargesOnUsageInvoices = "ALL"
)

func (r V1ContractListResponseDataScheduledChargesOnUsageInvoices) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataScheduledChargesOnUsageInvoicesAll:
		return true
	}
	return false
}

type V1ContractListResponseDataSpendThresholdConfiguration struct {
	Commit V1ContractListResponseDataSpendThresholdConfigurationCommit `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         bool                                                                   `json:"is_enabled,required"`
	PaymentGateConfig V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfig `json:"payment_gate_config,required"`
	// Specify the threshold amount for the contract. Each time the contract's usage
	// hits this amount, a threshold charge will be initiated.
	ThresholdAmount float64                                                   `json:"threshold_amount,required"`
	JSON            v1ContractListResponseDataSpendThresholdConfigurationJSON `json:"-"`
}

// v1ContractListResponseDataSpendThresholdConfigurationJSON contains the JSON
// metadata for the struct [V1ContractListResponseDataSpendThresholdConfiguration]
type v1ContractListResponseDataSpendThresholdConfigurationJSON struct {
	Commit            apijson.Field
	IsEnabled         apijson.Field
	PaymentGateConfig apijson.Field
	ThresholdAmount   apijson.Field
	raw               string
	ExtraFields       map[string]apijson.Field
}

func (r *V1ContractListResponseDataSpendThresholdConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSpendThresholdConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataSpendThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID   string `json:"product_id,required"`
	Description string `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name string                                                          `json:"name"`
	JSON v1ContractListResponseDataSpendThresholdConfigurationCommitJSON `json:"-"`
}

// v1ContractListResponseDataSpendThresholdConfigurationCommitJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataSpendThresholdConfigurationCommit]
type v1ContractListResponseDataSpendThresholdConfigurationCommitJSON struct {
	ProductID   apijson.Field
	Description apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataSpendThresholdConfigurationCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSpendThresholdConfigurationCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType `json:"tax_type"`
	JSON    v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigJSON    `json:"-"`
}

// v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfig]
type v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigJSON struct {
	PaymentGateType        apijson.Field
	PrecalculatedTaxConfig apijson.Field
	StripeConfig           apijson.Field
	TaxType                apijson.Field
	raw                    string
	ExtraFields            map[string]apijson.Field
}

func (r *V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigJSON) RawJSON() string {
	return r.raw
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount float64 `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName string                                                                                           `json:"tax_name"`
	JSON    v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON `json:"-"`
}

// v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig]
type v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON struct {
	TaxAmount   apijson.Field
	TaxName     apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfigJSON) RawJSON() string {
	return r.raw
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata map[string]string                                                                      `json:"invoice_metadata"`
	JSON            v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON `json:"-"`
}

// v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON
// contains the JSON metadata for the struct
// [V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig]
type v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON struct {
	PaymentType     apijson.Field
	InvoiceMetadata apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfig) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigJSON) RawJSON() string {
	return r.raw
}

// If left blank, will default to INVOICE
type V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractListResponseDataSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractListResponseDataSubscription struct {
	CollectionSchedule V1ContractListResponseDataSubscriptionsCollectionSchedule `json:"collection_schedule,required"`
	Proration          V1ContractListResponseDataSubscriptionsProration          `json:"proration,required"`
	// List of quantity schedule items for the subscription. Only includes the current
	// quantity and future quantity changes.
	QuantitySchedule []V1ContractListResponseDataSubscriptionsQuantitySchedule `json:"quantity_schedule,required"`
	StartingAt       time.Time                                                 `json:"starting_at,required" format:"date-time"`
	SubscriptionRate V1ContractListResponseDataSubscriptionsSubscriptionRate   `json:"subscription_rate,required"`
	ID               string                                                    `json:"id" format:"uuid"`
	CustomFields     map[string]string                                         `json:"custom_fields"`
	Description      string                                                    `json:"description"`
	EndingBefore     time.Time                                                 `json:"ending_before" format:"date-time"`
	FiatCreditTypeID string                                                    `json:"fiat_credit_type_id" format:"uuid"`
	Name             string                                                    `json:"name"`
	JSON             v1ContractListResponseDataSubscriptionJSON                `json:"-"`
}

// v1ContractListResponseDataSubscriptionJSON contains the JSON metadata for the
// struct [V1ContractListResponseDataSubscription]
type v1ContractListResponseDataSubscriptionJSON struct {
	CollectionSchedule apijson.Field
	Proration          apijson.Field
	QuantitySchedule   apijson.Field
	StartingAt         apijson.Field
	SubscriptionRate   apijson.Field
	ID                 apijson.Field
	CustomFields       apijson.Field
	Description        apijson.Field
	EndingBefore       apijson.Field
	FiatCreditTypeID   apijson.Field
	Name               apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractListResponseDataSubscription) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSubscriptionJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataSubscriptionsCollectionSchedule string

const (
	V1ContractListResponseDataSubscriptionsCollectionScheduleAdvance V1ContractListResponseDataSubscriptionsCollectionSchedule = "ADVANCE"
	V1ContractListResponseDataSubscriptionsCollectionScheduleArrears V1ContractListResponseDataSubscriptionsCollectionSchedule = "ARREARS"
)

func (r V1ContractListResponseDataSubscriptionsCollectionSchedule) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataSubscriptionsCollectionScheduleAdvance, V1ContractListResponseDataSubscriptionsCollectionScheduleArrears:
		return true
	}
	return false
}

type V1ContractListResponseDataSubscriptionsProration struct {
	InvoiceBehavior V1ContractListResponseDataSubscriptionsProrationInvoiceBehavior `json:"invoice_behavior,required"`
	IsProrated      bool                                                            `json:"is_prorated,required"`
	JSON            v1ContractListResponseDataSubscriptionsProrationJSON            `json:"-"`
}

// v1ContractListResponseDataSubscriptionsProrationJSON contains the JSON metadata
// for the struct [V1ContractListResponseDataSubscriptionsProration]
type v1ContractListResponseDataSubscriptionsProrationJSON struct {
	InvoiceBehavior apijson.Field
	IsProrated      apijson.Field
	raw             string
	ExtraFields     map[string]apijson.Field
}

func (r *V1ContractListResponseDataSubscriptionsProration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSubscriptionsProrationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataSubscriptionsProrationInvoiceBehavior string

const (
	V1ContractListResponseDataSubscriptionsProrationInvoiceBehaviorBillImmediately          V1ContractListResponseDataSubscriptionsProrationInvoiceBehavior = "BILL_IMMEDIATELY"
	V1ContractListResponseDataSubscriptionsProrationInvoiceBehaviorBillOnNextCollectionDate V1ContractListResponseDataSubscriptionsProrationInvoiceBehavior = "BILL_ON_NEXT_COLLECTION_DATE"
)

func (r V1ContractListResponseDataSubscriptionsProrationInvoiceBehavior) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataSubscriptionsProrationInvoiceBehaviorBillImmediately, V1ContractListResponseDataSubscriptionsProrationInvoiceBehaviorBillOnNextCollectionDate:
		return true
	}
	return false
}

type V1ContractListResponseDataSubscriptionsQuantitySchedule struct {
	Quantity     float64                                                     `json:"quantity,required"`
	StartingAt   time.Time                                                   `json:"starting_at,required" format:"date-time"`
	EndingBefore time.Time                                                   `json:"ending_before" format:"date-time"`
	JSON         v1ContractListResponseDataSubscriptionsQuantityScheduleJSON `json:"-"`
}

// v1ContractListResponseDataSubscriptionsQuantityScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataSubscriptionsQuantitySchedule]
type v1ContractListResponseDataSubscriptionsQuantityScheduleJSON struct {
	Quantity     apijson.Field
	StartingAt   apijson.Field
	EndingBefore apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListResponseDataSubscriptionsQuantitySchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSubscriptionsQuantityScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataSubscriptionsSubscriptionRate struct {
	BillingFrequency V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequency `json:"billing_frequency,required"`
	Product          V1ContractListResponseDataSubscriptionsSubscriptionRateProduct          `json:"product,required"`
	JSON             v1ContractListResponseDataSubscriptionsSubscriptionRateJSON             `json:"-"`
}

// v1ContractListResponseDataSubscriptionsSubscriptionRateJSON contains the JSON
// metadata for the struct
// [V1ContractListResponseDataSubscriptionsSubscriptionRate]
type v1ContractListResponseDataSubscriptionsSubscriptionRateJSON struct {
	BillingFrequency apijson.Field
	Product          apijson.Field
	raw              string
	ExtraFields      map[string]apijson.Field
}

func (r *V1ContractListResponseDataSubscriptionsSubscriptionRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSubscriptionsSubscriptionRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequency string

const (
	V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyMonthly   V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequency = "MONTHLY"
	V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyQuarterly V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequency = "QUARTERLY"
	V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyAnnual    V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequency = "ANNUAL"
	V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyWeekly    V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequency = "WEEKLY"
)

func (r V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyMonthly, V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyQuarterly, V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyAnnual, V1ContractListResponseDataSubscriptionsSubscriptionRateBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractListResponseDataSubscriptionsSubscriptionRateProduct struct {
	ID   string                                                             `json:"id,required" format:"uuid"`
	Name string                                                             `json:"name,required"`
	JSON v1ContractListResponseDataSubscriptionsSubscriptionRateProductJSON `json:"-"`
}

// v1ContractListResponseDataSubscriptionsSubscriptionRateProductJSON contains the
// JSON metadata for the struct
// [V1ContractListResponseDataSubscriptionsSubscriptionRateProduct]
type v1ContractListResponseDataSubscriptionsSubscriptionRateProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListResponseDataSubscriptionsSubscriptionRateProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListResponseDataSubscriptionsSubscriptionRateProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractAmendResponse struct {
	Data V1ContractAmendResponseData `json:"data,required"`
	JSON v1ContractAmendResponseJSON `json:"-"`
}

// v1ContractAmendResponseJSON contains the JSON metadata for the struct
// [V1ContractAmendResponse]
type v1ContractAmendResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractAmendResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractAmendResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractAmendResponseData struct {
	ID   string                          `json:"id,required" format:"uuid"`
	JSON v1ContractAmendResponseDataJSON `json:"-"`
}

// v1ContractAmendResponseDataJSON contains the JSON metadata for the struct
// [V1ContractAmendResponseData]
type v1ContractAmendResponseDataJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractAmendResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractAmendResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractArchiveResponse struct {
	Data V1ContractArchiveResponseData `json:"data,required"`
	JSON v1ContractArchiveResponseJSON `json:"-"`
}

// v1ContractArchiveResponseJSON contains the JSON metadata for the struct
// [V1ContractArchiveResponse]
type v1ContractArchiveResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractArchiveResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractArchiveResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractArchiveResponseData struct {
	ID   string                            `json:"id,required" format:"uuid"`
	JSON v1ContractArchiveResponseDataJSON `json:"-"`
}

// v1ContractArchiveResponseDataJSON contains the JSON metadata for the struct
// [V1ContractArchiveResponseData]
type v1ContractArchiveResponseDataJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractArchiveResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractArchiveResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponse struct {
	Data []V1ContractNewHistoricalInvoicesResponseData `json:"data,required"`
	JSON v1ContractNewHistoricalInvoicesResponseJSON   `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseJSON contains the JSON metadata for the
// struct [V1ContractNewHistoricalInvoicesResponse]
type v1ContractNewHistoricalInvoicesResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseData struct {
	ID          string                                                `json:"id,required" format:"uuid"`
	CreditType  V1ContractNewHistoricalInvoicesResponseDataCreditType `json:"credit_type,required"`
	CustomerID  string                                                `json:"customer_id,required" format:"uuid"`
	LineItems   []V1ContractNewHistoricalInvoicesResponseDataLineItem `json:"line_items,required"`
	Status      string                                                `json:"status,required"`
	Total       float64                                               `json:"total,required"`
	Type        string                                                `json:"type,required"`
	AmendmentID string                                                `json:"amendment_id" format:"uuid"`
	// This field's availability is dependent on your client's configuration.
	BillableStatus       V1ContractNewHistoricalInvoicesResponseDataBillableStatus   `json:"billable_status"`
	ContractCustomFields map[string]string                                           `json:"contract_custom_fields"`
	ContractID           string                                                      `json:"contract_id" format:"uuid"`
	CorrectionRecord     V1ContractNewHistoricalInvoicesResponseDataCorrectionRecord `json:"correction_record"`
	// When the invoice was created (UTC). This field is present for correction
	// invoices only.
	CreatedAt            time.Time              `json:"created_at" format:"date-time"`
	CustomFields         map[string]interface{} `json:"custom_fields"`
	CustomerCustomFields map[string]string      `json:"customer_custom_fields"`
	// End of the usage period this invoice covers (UTC)
	EndTimestamp       time.Time                                                      `json:"end_timestamp" format:"date-time"`
	ExternalInvoice    V1ContractNewHistoricalInvoicesResponseDataExternalInvoice     `json:"external_invoice,nullable"`
	InvoiceAdjustments []V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustment `json:"invoice_adjustments"`
	// When the invoice was issued (UTC)
	IssuedAt            time.Time `json:"issued_at" format:"date-time"`
	NetPaymentTermsDays float64   `json:"net_payment_terms_days"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string            `json:"netsuite_sales_order_id"`
	PlanCustomFields     map[string]string `json:"plan_custom_fields"`
	PlanID               string            `json:"plan_id" format:"uuid"`
	PlanName             string            `json:"plan_name"`
	// Only present for contract invoices with reseller royalties.
	ResellerRoyalty V1ContractNewHistoricalInvoicesResponseDataResellerRoyalty `json:"reseller_royalty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// Beginning of the usage period this invoice covers (UTC)
	StartTimestamp time.Time                                       `json:"start_timestamp" format:"date-time"`
	Subtotal       float64                                         `json:"subtotal"`
	JSON           v1ContractNewHistoricalInvoicesResponseDataJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataJSON contains the JSON metadata for
// the struct [V1ContractNewHistoricalInvoicesResponseData]
type v1ContractNewHistoricalInvoicesResponseDataJSON struct {
	ID                      apijson.Field
	CreditType              apijson.Field
	CustomerID              apijson.Field
	LineItems               apijson.Field
	Status                  apijson.Field
	Total                   apijson.Field
	Type                    apijson.Field
	AmendmentID             apijson.Field
	BillableStatus          apijson.Field
	ContractCustomFields    apijson.Field
	ContractID              apijson.Field
	CorrectionRecord        apijson.Field
	CreatedAt               apijson.Field
	CustomFields            apijson.Field
	CustomerCustomFields    apijson.Field
	EndTimestamp            apijson.Field
	ExternalInvoice         apijson.Field
	InvoiceAdjustments      apijson.Field
	IssuedAt                apijson.Field
	NetPaymentTermsDays     apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	PlanCustomFields        apijson.Field
	PlanID                  apijson.Field
	PlanName                apijson.Field
	ResellerRoyalty         apijson.Field
	SalesforceOpportunityID apijson.Field
	StartTimestamp          apijson.Field
	Subtotal                apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataCreditType struct {
	ID   string                                                    `json:"id,required" format:"uuid"`
	Name string                                                    `json:"name,required"`
	JSON v1ContractNewHistoricalInvoicesResponseDataCreditTypeJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataCreditTypeJSON contains the JSON
// metadata for the struct [V1ContractNewHistoricalInvoicesResponseDataCreditType]
type v1ContractNewHistoricalInvoicesResponseDataCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataLineItem struct {
	CreditType V1ContractNewHistoricalInvoicesResponseDataLineItemsCreditType `json:"credit_type,required"`
	Name       string                                                         `json:"name,required"`
	Total      float64                                                        `json:"total,required"`
	// Details about the credit or commit that was applied to this line item. Only
	// present on line items with product of `USAGE`, `SUBSCRIPTION` or `COMPOSITE`
	// types.
	AppliedCommitOrCredit V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCredit `json:"applied_commit_or_credit"`
	CommitCustomFields    map[string]string                                                         `json:"commit_custom_fields"`
	// For line items with product of `USAGE`, `SUBSCRIPTION`, or `COMPOSITE` types,
	// the ID of the credit or commit that was applied to this line item. For line
	// items with product type of `FIXED`, the ID of the prepaid or postpaid commit
	// that is being paid for.
	CommitID                   string `json:"commit_id" format:"uuid"`
	CommitNetsuiteItemID       string `json:"commit_netsuite_item_id"`
	CommitNetsuiteSalesOrderID string `json:"commit_netsuite_sales_order_id"`
	CommitSegmentID            string `json:"commit_segment_id" format:"uuid"`
	// `PrepaidCommit` (for commit types `PREPAID` and `CREDIT`) or `PostpaidCommit`
	// (for commit type `POSTPAID`).
	CommitType           string            `json:"commit_type"`
	CustomFields         map[string]string `json:"custom_fields"`
	DiscountCustomFields map[string]string `json:"discount_custom_fields"`
	// ID of the discount applied to this line item.
	DiscountID string `json:"discount_id" format:"uuid"`
	// The line item's end date (exclusive).
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	GroupKey     string    `json:"group_key"`
	GroupValue   string    `json:"group_value,nullable"`
	// Indicates whether the line item is prorated for `SUBSCRIPTION` type product.
	IsProrated bool `json:"is_prorated"`
	// Only present for contract invoices and when the `include_list_prices` query
	// parameter is set to true. This will include the list rate for the charge if
	// applicable. Only present for usage and subscription line items.
	ListPrice V1ContractNewHistoricalInvoicesResponseDataLineItemsListPrice `json:"list_price"`
	Metadata  string                                                        `json:"metadata"`
	// The end date for the billing period on the invoice.
	NetsuiteInvoiceBillingEnd time.Time `json:"netsuite_invoice_billing_end" format:"date-time"`
	// The start date for the billing period on the invoice.
	NetsuiteInvoiceBillingStart time.Time `json:"netsuite_invoice_billing_start" format:"date-time"`
	NetsuiteItemID              string    `json:"netsuite_item_id"`
	// Only present for line items paying for a postpaid commit true-up.
	PostpaidCommit V1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommit `json:"postpaid_commit"`
	// Includes the presentation group values associated with this line item if
	// presentation group keys are used.
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	// Includes the pricing group values associated with this line item if dimensional
	// pricing is used.
	PricingGroupValues  map[string]string `json:"pricing_group_values"`
	ProductCustomFields map[string]string `json:"product_custom_fields"`
	// ID of the product associated with the line item.
	ProductID string `json:"product_id" format:"uuid"`
	// The current product tags associated with the line item's `product_id`.
	ProductTags []string `json:"product_tags"`
	// The type of the line item's product. Possible values are `FixedProductListItem`
	// (for `FIXED` type products), `UsageProductListItem` (for `USAGE` type products),
	// `SubscriptionProductListItem` (for `SUBSCRIPTION` type products) or
	// `CompositeProductListItem` (for `COMPOSITE` type products). For scheduled
	// charges, commit and credit payments, the value is `FixedProductListItem`.
	ProductType                     string            `json:"product_type"`
	ProfessionalServiceCustomFields map[string]string `json:"professional_service_custom_fields"`
	ProfessionalServiceID           string            `json:"professional_service_id" format:"uuid"`
	// The quantity associated with the line item.
	Quantity                    float64                                                          `json:"quantity"`
	ResellerType                V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerType `json:"reseller_type"`
	ScheduledChargeCustomFields map[string]string                                                `json:"scheduled_charge_custom_fields"`
	// ID of scheduled charge.
	ScheduledChargeID string `json:"scheduled_charge_id" format:"uuid"`
	// The line item's start date (inclusive).
	StartingAt               time.Time                                                         `json:"starting_at" format:"date-time"`
	SubLineItems             []V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItem `json:"sub_line_items"`
	SubscriptionCustomFields map[string]string                                                 `json:"subscription_custom_fields"`
	// Populated if the line item has a tiered price.
	Tier V1ContractNewHistoricalInvoicesResponseDataLineItemsTier `json:"tier"`
	// The unit price associated with the line item.
	UnitPrice float64                                                 `json:"unit_price"`
	JSON      v1ContractNewHistoricalInvoicesResponseDataLineItemJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemJSON contains the JSON
// metadata for the struct [V1ContractNewHistoricalInvoicesResponseDataLineItem]
type v1ContractNewHistoricalInvoicesResponseDataLineItemJSON struct {
	CreditType                      apijson.Field
	Name                            apijson.Field
	Total                           apijson.Field
	AppliedCommitOrCredit           apijson.Field
	CommitCustomFields              apijson.Field
	CommitID                        apijson.Field
	CommitNetsuiteItemID            apijson.Field
	CommitNetsuiteSalesOrderID      apijson.Field
	CommitSegmentID                 apijson.Field
	CommitType                      apijson.Field
	CustomFields                    apijson.Field
	DiscountCustomFields            apijson.Field
	DiscountID                      apijson.Field
	EndingBefore                    apijson.Field
	GroupKey                        apijson.Field
	GroupValue                      apijson.Field
	IsProrated                      apijson.Field
	ListPrice                       apijson.Field
	Metadata                        apijson.Field
	NetsuiteInvoiceBillingEnd       apijson.Field
	NetsuiteInvoiceBillingStart     apijson.Field
	NetsuiteItemID                  apijson.Field
	PostpaidCommit                  apijson.Field
	PresentationGroupValues         apijson.Field
	PricingGroupValues              apijson.Field
	ProductCustomFields             apijson.Field
	ProductID                       apijson.Field
	ProductTags                     apijson.Field
	ProductType                     apijson.Field
	ProfessionalServiceCustomFields apijson.Field
	ProfessionalServiceID           apijson.Field
	Quantity                        apijson.Field
	ResellerType                    apijson.Field
	ScheduledChargeCustomFields     apijson.Field
	ScheduledChargeID               apijson.Field
	StartingAt                      apijson.Field
	SubLineItems                    apijson.Field
	SubscriptionCustomFields        apijson.Field
	Tier                            apijson.Field
	UnitPrice                       apijson.Field
	raw                             string
	ExtraFields                     map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsCreditType struct {
	ID   string                                                             `json:"id,required" format:"uuid"`
	Name string                                                             `json:"name,required"`
	JSON v1ContractNewHistoricalInvoicesResponseDataLineItemsCreditTypeJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsCreditType]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsCreditTypeJSON) RawJSON() string {
	return r.raw
}

// Details about the credit or commit that was applied to this line item. Only
// present on line items with product of `USAGE`, `SUBSCRIPTION` or `COMPOSITE`
// types.
type V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCredit struct {
	ID   string                                                                        `json:"id,required" format:"uuid"`
	Type V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditType `json:"type,required"`
	JSON v1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCredit]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditJSON struct {
	ID          apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditType string

const (
	V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditTypePrepaid  V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditType = "PREPAID"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditTypePostpaid V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditType = "POSTPAID"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditTypeCredit   V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditType = "CREDIT"
)

func (r V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditType) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditTypePrepaid, V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditTypePostpaid, V1ContractNewHistoricalInvoicesResponseDataLineItemsAppliedCommitOrCreditTypeCredit:
		return true
	}
	return false
}

// Only present for contract invoices and when the `include_list_prices` query
// parameter is set to true. This will include the list rate for the charge if
// applicable. Only present for usage and subscription line items.
type V1ContractNewHistoricalInvoicesResponseDataLineItemsListPrice struct {
	RateType   V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType   `json:"rate_type,required"`
	CreditType V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// if pricing groups are used, this will contain the values used to calculate the
	// price
	PricingGroupValues map[string]string `json:"pricing_group_values"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTier `json:"tiers"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed
	// using list prices rather than the standard rates for this product on the
	// contract.
	UseListPrices bool                                                              `json:"use_list_prices"`
	JSON          v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceJSON contains the
// JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsListPrice]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceJSON struct {
	RateType           apijson.Field
	CreditType         apijson.Field
	CustomRate         apijson.Field
	IsProrated         apijson.Field
	Price              apijson.Field
	PricingGroupValues apijson.Field
	Quantity           apijson.Field
	Tiers              apijson.Field
	UseListPrices      apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsListPrice) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType string

const (
	V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeFlat         V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType = "FLAT"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypePercentage   V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType = "PERCENTAGE"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeSubscription V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType = "SUBSCRIPTION"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeCustom       V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType = "CUSTOM"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeTiered       V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType = "TIERED"
)

func (r V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateType) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeFlat, V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypePercentage, V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeSubscription, V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeCustom, V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceRateTypeTiered:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditType struct {
	ID   string                                                                      `json:"id,required" format:"uuid"`
	Name string                                                                      `json:"name,required"`
	JSON v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditTypeJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditType]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTier struct {
	Price float64                                                               `json:"price,required"`
	Size  float64                                                               `json:"size"`
	JSON  v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTierJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTierJSON contains
// the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTier]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsListPriceTierJSON) RawJSON() string {
	return r.raw
}

// Only present for line items paying for a postpaid commit true-up.
type V1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommit struct {
	ID   string                                                                 `json:"id,required" format:"uuid"`
	JSON v1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommitJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommitJSON contains
// the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommit]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommitJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsPostpaidCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerType string

const (
	V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeAws           V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerType = "AWS"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeAwsProService V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerType = "AWS_PRO_SERVICE"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeGcp           V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerType = "GCP"
	V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeGcpProService V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerType) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeAws, V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeAwsProService, V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeGcp, V1ContractNewHistoricalInvoicesResponseDataLineItemsResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItem struct {
	CustomFields  map[string]string `json:"custom_fields,required"`
	Name          string            `json:"name,required"`
	Quantity      float64           `json:"quantity,required"`
	Subtotal      float64           `json:"subtotal,required"`
	ChargeID      string            `json:"charge_id" format:"uuid"`
	CreditGrantID string            `json:"credit_grant_id" format:"uuid"`
	// The end date for the charge (for seats charges only).
	EndDate time.Time `json:"end_date" format:"date-time"`
	// the unit price for this charge, present only if the charge is not tiered and the
	// quantity is nonzero
	Price float64 `json:"price"`
	// The start date for the charge (for seats charges only).
	StartDate time.Time `json:"start_date" format:"date-time"`
	// when the current tier started and ends (for tiered charges only)
	TierPeriod V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriod `json:"tier_period"`
	Tiers      []V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTier     `json:"tiers"`
	JSON       v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemJSON        `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemJSON contains the
// JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItem]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemJSON struct {
	CustomFields  apijson.Field
	Name          apijson.Field
	Quantity      apijson.Field
	Subtotal      apijson.Field
	ChargeID      apijson.Field
	CreditGrantID apijson.Field
	EndDate       apijson.Field
	Price         apijson.Field
	StartDate     apijson.Field
	TierPeriod    apijson.Field
	Tiers         apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemJSON) RawJSON() string {
	return r.raw
}

// when the current tier started and ends (for tiered charges only)
type V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriod struct {
	StartingAt   time.Time                                                                      `json:"starting_at,required" format:"date-time"`
	EndingBefore time.Time                                                                      `json:"ending_before" format:"date-time"`
	JSON         v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriodJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriodJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriod]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriodJSON struct {
	StartingAt   apijson.Field
	EndingBefore apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriod) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierPeriodJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTier struct {
	Price    float64 `json:"price,required"`
	Quantity float64 `json:"quantity,required"`
	// at what metric amount this tier begins
	StartingAt float64                                                                  `json:"starting_at,required"`
	Subtotal   float64                                                                  `json:"subtotal,required"`
	JSON       v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTier]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierJSON struct {
	Price       apijson.Field
	Quantity    apijson.Field
	StartingAt  apijson.Field
	Subtotal    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsSubLineItemsTierJSON) RawJSON() string {
	return r.raw
}

// Populated if the line item has a tiered price.
type V1ContractNewHistoricalInvoicesResponseDataLineItemsTier struct {
	Level      float64                                                      `json:"level,required"`
	StartingAt string                                                       `json:"starting_at,required"`
	Size       string                                                       `json:"size,nullable"`
	JSON       v1ContractNewHistoricalInvoicesResponseDataLineItemsTierJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataLineItemsTierJSON contains the JSON
// metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataLineItemsTier]
type v1ContractNewHistoricalInvoicesResponseDataLineItemsTierJSON struct {
	Level       apijson.Field
	StartingAt  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataLineItemsTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataLineItemsTierJSON) RawJSON() string {
	return r.raw
}

// This field's availability is dependent on your client's configuration.
type V1ContractNewHistoricalInvoicesResponseDataBillableStatus string

const (
	V1ContractNewHistoricalInvoicesResponseDataBillableStatusBillable   V1ContractNewHistoricalInvoicesResponseDataBillableStatus = "billable"
	V1ContractNewHistoricalInvoicesResponseDataBillableStatusUnbillable V1ContractNewHistoricalInvoicesResponseDataBillableStatus = "unbillable"
)

func (r V1ContractNewHistoricalInvoicesResponseDataBillableStatus) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataBillableStatusBillable, V1ContractNewHistoricalInvoicesResponseDataBillableStatusUnbillable:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataCorrectionRecord struct {
	CorrectedInvoiceID       string                                                                              `json:"corrected_invoice_id,required" format:"uuid"`
	Memo                     string                                                                              `json:"memo,required"`
	Reason                   string                                                                              `json:"reason,required"`
	CorrectedExternalInvoice V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoice `json:"corrected_external_invoice"`
	JSON                     v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordJSON                     `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordJSON contains the
// JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataCorrectionRecord]
type v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordJSON struct {
	CorrectedInvoiceID       apijson.Field
	Memo                     apijson.Field
	Reason                   apijson.Field
	CorrectedExternalInvoice apijson.Field
	raw                      string
	ExtraFields              map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataCorrectionRecord) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoice struct {
	BillingProviderType V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType `json:"billing_provider_type,required"`
	ExternalStatus      V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus      `json:"external_status"`
	InvoiceID           string                                                                                                 `json:"invoice_id"`
	IssuedAtTimestamp   time.Time                                                                                              `json:"issued_at_timestamp" format:"date-time"`
	JSON                v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceJSON                `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoice]
type v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceJSON struct {
	BillingProviderType apijson.Field
	ExternalStatus      apijson.Field
	InvoiceID           apijson.Field
	IssuedAtTimestamp   apijson.Field
	raw                 string
	ExtraFields         map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoice) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType string

const (
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAwsMarketplace   V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "aws_marketplace"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeStripe           V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "stripe"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeNetsuite         V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "netsuite"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeCustom           V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "custom"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAzureMarketplace V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "azure_marketplace"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeQuickbooksOnline V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "quickbooks_online"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeWorkday          V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "workday"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeGcpMarketplace   V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "gcp_marketplace"
)

func (r V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAwsMarketplace, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeStripe, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeNetsuite, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeCustom, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAzureMarketplace, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeQuickbooksOnline, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeWorkday, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeGcpMarketplace:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus string

const (
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDraft               V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "DRAFT"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusFinalized           V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "FINALIZED"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaid                V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "PAID"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusUncollectible       V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "UNCOLLECTIBLE"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusVoid                V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "VOID"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDeleted             V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "DELETED"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaymentFailed       V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "PAYMENT_FAILED"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusInvalidRequestError V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "INVALID_REQUEST_ERROR"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSkipped             V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "SKIPPED"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSent                V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "SENT"
	V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusQueued              V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "QUEUED"
)

func (r V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDraft, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusFinalized, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaid, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusUncollectible, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusVoid, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDeleted, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaymentFailed, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusInvalidRequestError, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSkipped, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSent, V1ContractNewHistoricalInvoicesResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusQueued:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataExternalInvoice struct {
	BillingProviderType V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType `json:"billing_provider_type,required"`
	ExternalStatus      V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus      `json:"external_status"`
	InvoiceID           string                                                                        `json:"invoice_id"`
	IssuedAtTimestamp   time.Time                                                                     `json:"issued_at_timestamp" format:"date-time"`
	JSON                v1ContractNewHistoricalInvoicesResponseDataExternalInvoiceJSON                `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataExternalInvoiceJSON contains the JSON
// metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataExternalInvoice]
type v1ContractNewHistoricalInvoicesResponseDataExternalInvoiceJSON struct {
	BillingProviderType apijson.Field
	ExternalStatus      apijson.Field
	InvoiceID           apijson.Field
	IssuedAtTimestamp   apijson.Field
	raw                 string
	ExtraFields         map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataExternalInvoice) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataExternalInvoiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType string

const (
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeAwsMarketplace   V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "aws_marketplace"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeStripe           V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "stripe"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeNetsuite         V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "netsuite"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeCustom           V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "custom"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeAzureMarketplace V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "azure_marketplace"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeQuickbooksOnline V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "quickbooks_online"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeWorkday          V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "workday"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeGcpMarketplace   V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType = "gcp_marketplace"
)

func (r V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderType) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeAwsMarketplace, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeStripe, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeNetsuite, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeCustom, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeAzureMarketplace, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeQuickbooksOnline, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeWorkday, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceBillingProviderTypeGcpMarketplace:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus string

const (
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusDraft               V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "DRAFT"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusFinalized           V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "FINALIZED"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusPaid                V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "PAID"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusUncollectible       V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "UNCOLLECTIBLE"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusVoid                V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "VOID"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusDeleted             V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "DELETED"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusPaymentFailed       V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "PAYMENT_FAILED"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusInvalidRequestError V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "INVALID_REQUEST_ERROR"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusSkipped             V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "SKIPPED"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusSent                V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "SENT"
	V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusQueued              V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus = "QUEUED"
)

func (r V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatus) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusDraft, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusFinalized, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusPaid, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusUncollectible, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusVoid, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusDeleted, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusPaymentFailed, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusInvalidRequestError, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusSkipped, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusSent, V1ContractNewHistoricalInvoicesResponseDataExternalInvoiceExternalStatusQueued:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustment struct {
	CreditType              V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditType `json:"credit_type,required"`
	Name                    string                                                                  `json:"name,required"`
	Total                   float64                                                                 `json:"total,required"`
	CreditGrantCustomFields map[string]string                                                       `json:"credit_grant_custom_fields"`
	CreditGrantID           string                                                                  `json:"credit_grant_id"`
	JSON                    v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentJSON        `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentJSON contains the
// JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustment]
type v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentJSON struct {
	CreditType              apijson.Field
	Name                    apijson.Field
	Total                   apijson.Field
	CreditGrantCustomFields apijson.Field
	CreditGrantID           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustment) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditType struct {
	ID   string                                                                      `json:"id,required" format:"uuid"`
	Name string                                                                      `json:"name,required"`
	JSON v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditTypeJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditType]
type v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataInvoiceAdjustmentsCreditTypeJSON) RawJSON() string {
	return r.raw
}

// Only present for contract invoices with reseller royalties.
type V1ContractNewHistoricalInvoicesResponseDataResellerRoyalty struct {
	Fraction           string                                                                 `json:"fraction,required"`
	NetsuiteResellerID string                                                                 `json:"netsuite_reseller_id,required"`
	ResellerType       V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerType `json:"reseller_type,required"`
	AwsOptions         V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptions   `json:"aws_options"`
	GcpOptions         V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptions   `json:"gcp_options"`
	JSON               v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyJSON         `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyJSON contains the JSON
// metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataResellerRoyalty]
type v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyJSON struct {
	Fraction           apijson.Field
	NetsuiteResellerID apijson.Field
	ResellerType       apijson.Field
	AwsOptions         apijson.Field
	GcpOptions         apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerType string

const (
	V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeAws           V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerType = "AWS"
	V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeAwsProService V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerType = "AWS_PRO_SERVICE"
	V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeGcp           V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerType = "GCP"
	V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeGcpProService V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerType) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeAws, V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeAwsProService, V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeGcp, V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptions struct {
	AwsAccountNumber    string                                                                   `json:"aws_account_number"`
	AwsOfferID          string                                                                   `json:"aws_offer_id"`
	AwsPayerReferenceID string                                                                   `json:"aws_payer_reference_id"`
	JSON                v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptionsJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptionsJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptions]
type v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptionsJSON struct {
	AwsAccountNumber    apijson.Field
	AwsOfferID          apijson.Field
	AwsPayerReferenceID apijson.Field
	raw                 string
	ExtraFields         map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptions) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyAwsOptionsJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptions struct {
	GcpAccountID string                                                                   `json:"gcp_account_id"`
	GcpOfferID   string                                                                   `json:"gcp_offer_id"`
	JSON         v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptionsJSON `json:"-"`
}

// v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptionsJSON
// contains the JSON metadata for the struct
// [V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptions]
type v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptionsJSON struct {
	GcpAccountID apijson.Field
	GcpOfferID   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptions) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractNewHistoricalInvoicesResponseDataResellerRoyaltyGcpOptionsJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponse struct {
	Data     []V1ContractListBalancesResponseData `json:"data,required"`
	NextPage string                               `json:"next_page,required,nullable"`
	JSON     v1ContractListBalancesResponseJSON   `json:"-"`
}

// v1ContractListBalancesResponseJSON contains the JSON metadata for the struct
// [V1ContractListBalancesResponse]
type v1ContractListBalancesResponseJSON struct {
	Data        apijson.Field
	NextPage    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseData struct {
	ID string `json:"id,required" format:"uuid"`
	// This field can have the runtime type of
	// [V1ContractListBalancesResponseDataObjectProduct].
	Product interface{}                            `json:"product,required"`
	Type    V1ContractListBalancesResponseDataType `json:"type,required"`
	// This field can have the runtime type of
	// [V1ContractListBalancesResponseDataObjectAccessSchedule].
	AccessSchedule interface{} `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount float64 `json:"amount"`
	// This field can have the runtime type of [[]string].
	ApplicableContractIDs interface{} `json:"applicable_contract_ids"`
	// This field can have the runtime type of [[]string].
	ApplicableProductIDs interface{} `json:"applicable_product_ids"`
	// This field can have the runtime type of [[]string].
	ApplicableProductTags interface{} `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance float64 `json:"balance"`
	// This field can have the runtime type of
	// [V1ContractListBalancesResponseDataObjectContract].
	Contract interface{} `json:"contract"`
	// This field can have the runtime type of [map[string]string].
	CustomFields interface{} `json:"custom_fields"`
	Description  string      `json:"description"`
	// This field can have the runtime type of
	// [V1ContractListBalancesResponseDataObjectHierarchyConfiguration].
	HierarchyConfiguration interface{} `json:"hierarchy_configuration"`
	// This field can have the runtime type of
	// [V1ContractListBalancesResponseDataObjectInvoiceContract].
	InvoiceContract interface{} `json:"invoice_contract"`
	// This field can have the runtime type of
	// [V1ContractListBalancesResponseDataObjectInvoiceSchedule].
	InvoiceSchedule interface{} `json:"invoice_schedule"`
	// This field can have the runtime type of
	// [[]V1ContractListBalancesResponseDataObjectLedger].
	Ledger interface{} `json:"ledger"`
	Name   string      `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority float64                                    `json:"priority"`
	RateType V1ContractListBalancesResponseDataRateType `json:"rate_type"`
	// This field can have the runtime type of
	// [V1ContractListBalancesResponseDataObjectRolledOverFrom].
	RolledOverFrom   interface{} `json:"rolled_over_from"`
	RolloverFraction float64     `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// This field can have the runtime type of
	// [[]V1ContractListBalancesResponseDataObjectSpecifier].
	Specifiers interface{} `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                 `json:"uniqueness_key"`
	JSON          v1ContractListBalancesResponseDataJSON `json:"-"`
	union         V1ContractListBalancesResponseDataUnion
}

// v1ContractListBalancesResponseDataJSON contains the JSON metadata for the struct
// [V1ContractListBalancesResponseData]
type v1ContractListBalancesResponseDataJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r v1ContractListBalancesResponseDataJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListBalancesResponseData) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListBalancesResponseData{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListBalancesResponseDataUnion] interface which you
// can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListBalancesResponseDataObject],
// [V1ContractListBalancesResponseDataObject].
func (r V1ContractListBalancesResponseData) AsUnion() V1ContractListBalancesResponseDataUnion {
	return r.union
}

// Union satisfied by [V1ContractListBalancesResponseDataObject] or
// [V1ContractListBalancesResponseDataObject].
type V1ContractListBalancesResponseDataUnion interface {
	implementsV1ContractListBalancesResponseData()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListBalancesResponseDataUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObject{}),
		},
	)
}

type V1ContractListBalancesResponseDataObject struct {
	ID      string                                          `json:"id,required" format:"uuid"`
	Product V1ContractListBalancesResponseDataObjectProduct `json:"product,required"`
	Type    V1ContractListBalancesResponseDataObjectType    `json:"type,required"`
	// The schedule that the customer will gain access to the credits purposed with
	// this commit.
	AccessSchedule V1ContractListBalancesResponseDataObjectAccessSchedule `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount                float64  `json:"amount"`
	ApplicableContractIDs []string `json:"applicable_contract_ids" format:"uuid"`
	ApplicableProductIDs  []string `json:"applicable_product_ids" format:"uuid"`
	ApplicableProductTags []string `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the commit was archived. If not provided, the
	// commit is not archived.
	ArchivedAt time.Time `json:"archived_at" format:"date-time"`
	// The current balance of the credit or commit. This balance reflects the amount of
	// credit or commit that the customer has access to use at this moment - thus,
	// expired and upcoming credit or commit segments contribute 0 to the balance. The
	// balance will match the sum of all ledger entries with the exception of the case
	// where the sum of negative manual ledger entries exceeds the positive amount
	// remaining on the credit or commit - in that case, the balance will be 0. All
	// manual ledger entries associated with active credit or commit segments are
	// included in the balance, including future-dated manual ledger entries.
	Balance      float64                                          `json:"balance"`
	Contract     V1ContractListBalancesResponseDataObjectContract `json:"contract"`
	CustomFields map[string]string                                `json:"custom_fields"`
	Description  string                                           `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration V1ContractListBalancesResponseDataObjectHierarchyConfiguration `json:"hierarchy_configuration"`
	// The contract that this commit will be billed on.
	InvoiceContract V1ContractListBalancesResponseDataObjectInvoiceContract `json:"invoice_contract"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule V1ContractListBalancesResponseDataObjectInvoiceSchedule `json:"invoice_schedule"`
	// A list of ordered events that impact the balance of a commit. For example, an
	// invoice deduction or a rollover.
	Ledger []V1ContractListBalancesResponseDataObjectLedger `json:"ledger"`
	Name   string                                           `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string `json:"netsuite_sales_order_id"`
	// If multiple credits or commits are applicable, the one with the lower priority
	// will apply first.
	Priority         float64                                                `json:"priority"`
	RateType         V1ContractListBalancesResponseDataObjectRateType       `json:"rate_type"`
	RolledOverFrom   V1ContractListBalancesResponseDataObjectRolledOverFrom `json:"rolled_over_from"`
	RolloverFraction float64                                                `json:"rollover_fraction"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown.
	Specifiers []V1ContractListBalancesResponseDataObjectSpecifier `json:"specifiers"`
	// Prevents the creation of duplicates. If a request to create a commit or credit
	// is made with a uniqueness key that was previously used to create a commit or
	// credit, a new record will not be created and the request will fail with a 409
	// error.
	UniquenessKey string                                       `json:"uniqueness_key"`
	JSON          v1ContractListBalancesResponseDataObjectJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectJSON contains the JSON metadata for the
// struct [V1ContractListBalancesResponseDataObject]
type v1ContractListBalancesResponseDataObjectJSON struct {
	ID                      apijson.Field
	Product                 apijson.Field
	Type                    apijson.Field
	AccessSchedule          apijson.Field
	Amount                  apijson.Field
	ApplicableContractIDs   apijson.Field
	ApplicableProductIDs    apijson.Field
	ApplicableProductTags   apijson.Field
	ArchivedAt              apijson.Field
	Balance                 apijson.Field
	Contract                apijson.Field
	CustomFields            apijson.Field
	Description             apijson.Field
	HierarchyConfiguration  apijson.Field
	InvoiceContract         apijson.Field
	InvoiceSchedule         apijson.Field
	Ledger                  apijson.Field
	Name                    apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	Priority                apijson.Field
	RateType                apijson.Field
	RolledOverFrom          apijson.Field
	RolloverFraction        apijson.Field
	SalesforceOpportunityID apijson.Field
	Specifiers              apijson.Field
	UniquenessKey           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListBalancesResponseDataObject) implementsV1ContractListBalancesResponseData() {}

type V1ContractListBalancesResponseDataObjectProduct struct {
	ID   string                                              `json:"id,required" format:"uuid"`
	Name string                                              `json:"name,required"`
	JSON v1ContractListBalancesResponseDataObjectProductJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectProductJSON contains the JSON metadata
// for the struct [V1ContractListBalancesResponseDataObjectProduct]
type v1ContractListBalancesResponseDataObjectProductJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectProduct) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectProductJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectType string

const (
	V1ContractListBalancesResponseDataObjectTypePrepaid  V1ContractListBalancesResponseDataObjectType = "PREPAID"
	V1ContractListBalancesResponseDataObjectTypePostpaid V1ContractListBalancesResponseDataObjectType = "POSTPAID"
)

func (r V1ContractListBalancesResponseDataObjectType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataObjectTypePrepaid, V1ContractListBalancesResponseDataObjectTypePostpaid:
		return true
	}
	return false
}

// The schedule that the customer will gain access to the credits purposed with
// this commit.
type V1ContractListBalancesResponseDataObjectAccessSchedule struct {
	ScheduleItems []V1ContractListBalancesResponseDataObjectAccessScheduleScheduleItem `json:"schedule_items,required"`
	CreditType    V1ContractListBalancesResponseDataObjectAccessScheduleCreditType     `json:"credit_type"`
	JSON          v1ContractListBalancesResponseDataObjectAccessScheduleJSON           `json:"-"`
}

// v1ContractListBalancesResponseDataObjectAccessScheduleJSON contains the JSON
// metadata for the struct [V1ContractListBalancesResponseDataObjectAccessSchedule]
type v1ContractListBalancesResponseDataObjectAccessScheduleJSON struct {
	ScheduleItems apijson.Field
	CreditType    apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectAccessSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectAccessScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectAccessScheduleScheduleItem struct {
	ID           string                                                                 `json:"id,required" format:"uuid"`
	Amount       float64                                                                `json:"amount,required"`
	EndingBefore time.Time                                                              `json:"ending_before,required" format:"date-time"`
	StartingAt   time.Time                                                              `json:"starting_at,required" format:"date-time"`
	JSON         v1ContractListBalancesResponseDataObjectAccessScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectAccessScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectAccessScheduleScheduleItem]
type v1ContractListBalancesResponseDataObjectAccessScheduleScheduleItemJSON struct {
	ID           apijson.Field
	Amount       apijson.Field
	EndingBefore apijson.Field
	StartingAt   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectAccessScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectAccessScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectAccessScheduleCreditType struct {
	ID   string                                                               `json:"id,required" format:"uuid"`
	Name string                                                               `json:"name,required"`
	JSON v1ContractListBalancesResponseDataObjectAccessScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectAccessScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectAccessScheduleCreditType]
type v1ContractListBalancesResponseDataObjectAccessScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectAccessScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectAccessScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectContract struct {
	ID   string                                               `json:"id,required" format:"uuid"`
	JSON v1ContractListBalancesResponseDataObjectContractJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectContractJSON contains the JSON metadata
// for the struct [V1ContractListBalancesResponseDataObjectContract]
type v1ContractListBalancesResponseDataObjectContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectContractJSON) RawJSON() string {
	return r.raw
}

// Optional configuration for commit hierarchy access control
type V1ContractListBalancesResponseDataObjectHierarchyConfiguration struct {
	ChildAccess V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess `json:"child_access,required"`
	JSON        v1ContractListBalancesResponseDataObjectHierarchyConfigurationJSON        `json:"-"`
}

// v1ContractListBalancesResponseDataObjectHierarchyConfigurationJSON contains the
// JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectHierarchyConfiguration]
type v1ContractListBalancesResponseDataObjectHierarchyConfigurationJSON struct {
	ChildAccess apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectHierarchyConfiguration) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectHierarchyConfigurationJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess struct {
	Type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType `json:"type,required"`
	// This field can have the runtime type of [[]string].
	ContractIDs interface{}                                                                   `json:"contract_ids"`
	JSON        v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessJSON `json:"-"`
	union       V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessUnion
}

// v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessJSON
// contains the JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess]
type v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessJSON struct {
	Type        apijson.Field
	ContractIDs apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType],
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType],
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObject].
func (r V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess) AsUnion() V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessUnion {
	return r.union
}

// Union satisfied by
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType],
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType]
// or
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObject].
type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObject{}),
		},
	)
}

type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType struct {
	Type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeType `json:"type,required"`
	JSON v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeJSON
// contains the JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType]
type v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeJSON struct {
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessType) implementsV1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess() {
}

type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeTypeAll V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObject struct {
	ContractIDs []string                                                                            `json:"contract_ids,required" format:"uuid"`
	Type        V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectType `json:"type,required"`
	JSON        v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectJSON
// contains the JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObject]
type v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectJSON struct {
	ContractIDs apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObject) implementsV1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccess() {
}

type V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataObjectHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The contract that this commit will be billed on.
type V1ContractListBalancesResponseDataObjectInvoiceContract struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	JSON v1ContractListBalancesResponseDataObjectInvoiceContractJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectInvoiceContractJSON contains the JSON
// metadata for the struct
// [V1ContractListBalancesResponseDataObjectInvoiceContract]
type v1ContractListBalancesResponseDataObjectInvoiceContractJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectInvoiceContract) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectInvoiceContractJSON) RawJSON() string {
	return r.raw
}

// The schedule that the customer will be invoiced for this commit.
type V1ContractListBalancesResponseDataObjectInvoiceSchedule struct {
	CreditType V1ContractListBalancesResponseDataObjectInvoiceScheduleCreditType `json:"credit_type"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice  bool                                                                  `json:"do_not_invoice"`
	ScheduleItems []V1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItem `json:"schedule_items"`
	JSON          v1ContractListBalancesResponseDataObjectInvoiceScheduleJSON           `json:"-"`
}

// v1ContractListBalancesResponseDataObjectInvoiceScheduleJSON contains the JSON
// metadata for the struct
// [V1ContractListBalancesResponseDataObjectInvoiceSchedule]
type v1ContractListBalancesResponseDataObjectInvoiceScheduleJSON struct {
	CreditType    apijson.Field
	DoNotInvoice  apijson.Field
	ScheduleItems apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectInvoiceSchedule) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectInvoiceScheduleJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectInvoiceScheduleCreditType struct {
	ID   string                                                                `json:"id,required" format:"uuid"`
	Name string                                                                `json:"name,required"`
	JSON v1ContractListBalancesResponseDataObjectInvoiceScheduleCreditTypeJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectInvoiceScheduleCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectInvoiceScheduleCreditType]
type v1ContractListBalancesResponseDataObjectInvoiceScheduleCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectInvoiceScheduleCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectInvoiceScheduleCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItem struct {
	ID        string                                                                  `json:"id,required" format:"uuid"`
	Amount    float64                                                                 `json:"amount,required"`
	Quantity  float64                                                                 `json:"quantity,required"`
	Timestamp time.Time                                                               `json:"timestamp,required" format:"date-time"`
	UnitPrice float64                                                                 `json:"unit_price,required"`
	InvoiceID string                                                                  `json:"invoice_id,nullable" format:"uuid"`
	JSON      v1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItemJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItemJSON contains
// the JSON metadata for the struct
// [V1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItem]
type v1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItemJSON struct {
	ID          apijson.Field
	Amount      apijson.Field
	Quantity    apijson.Field
	Timestamp   apijson.Field
	UnitPrice   apijson.Field
	InvoiceID   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectInvoiceScheduleScheduleItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectLedger struct {
	Amount        float64                                            `json:"amount,required"`
	Timestamp     time.Time                                          `json:"timestamp,required" format:"date-time"`
	Type          V1ContractListBalancesResponseDataObjectLedgerType `json:"type,required"`
	ContractID    string                                             `json:"contract_id" format:"uuid"`
	InvoiceID     string                                             `json:"invoice_id" format:"uuid"`
	NewContractID string                                             `json:"new_contract_id" format:"uuid"`
	Reason        string                                             `json:"reason"`
	SegmentID     string                                             `json:"segment_id" format:"uuid"`
	JSON          v1ContractListBalancesResponseDataObjectLedgerJSON `json:"-"`
	union         V1ContractListBalancesResponseDataObjectLedgerUnion
}

// v1ContractListBalancesResponseDataObjectLedgerJSON contains the JSON metadata
// for the struct [V1ContractListBalancesResponseDataObjectLedger]
type v1ContractListBalancesResponseDataObjectLedgerJSON struct {
	Amount        apijson.Field
	Timestamp     apijson.Field
	Type          apijson.Field
	ContractID    apijson.Field
	InvoiceID     apijson.Field
	NewContractID apijson.Field
	Reason        apijson.Field
	SegmentID     apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r v1ContractListBalancesResponseDataObjectLedgerJSON) RawJSON() string {
	return r.raw
}

func (r *V1ContractListBalancesResponseDataObjectLedger) UnmarshalJSON(data []byte) (err error) {
	*r = V1ContractListBalancesResponseDataObjectLedger{}
	err = apijson.UnmarshalRoot(data, &r.union)
	if err != nil {
		return err
	}
	return apijson.Port(r.union, &r)
}

// AsUnion returns a [V1ContractListBalancesResponseDataObjectLedgerUnion]
// interface which you can cast to the specific types for more type safety.
//
// Possible runtime types of the union are
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject].
func (r V1ContractListBalancesResponseDataObjectLedger) AsUnion() V1ContractListBalancesResponseDataObjectLedgerUnion {
	return r.union
}

// Union satisfied by [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject],
// [V1ContractListBalancesResponseDataObjectLedgerObject] or
// [V1ContractListBalancesResponseDataObjectLedgerObject].
type V1ContractListBalancesResponseDataObjectLedgerUnion interface {
	implementsV1ContractListBalancesResponseDataObjectLedger()
}

func init() {
	apijson.RegisterUnion(
		reflect.TypeOf((*V1ContractListBalancesResponseDataObjectLedgerUnion)(nil)).Elem(),
		"",
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
		apijson.UnionVariant{
			TypeFilter: gjson.JSON,
			Type:       reflect.TypeOf(V1ContractListBalancesResponseDataObjectLedgerObject{}),
		},
	)
}

type V1ContractListBalancesResponseDataObjectLedgerObject struct {
	Amount    float64                                                  `json:"amount,required"`
	SegmentID string                                                   `json:"segment_id,required" format:"uuid"`
	Timestamp time.Time                                                `json:"timestamp,required" format:"date-time"`
	Type      V1ContractListBalancesResponseDataObjectLedgerObjectType `json:"type,required"`
	JSON      v1ContractListBalancesResponseDataObjectLedgerObjectJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectLedgerObjectJSON contains the JSON
// metadata for the struct [V1ContractListBalancesResponseDataObjectLedgerObject]
type v1ContractListBalancesResponseDataObjectLedgerObjectJSON struct {
	Amount      apijson.Field
	SegmentID   apijson.Field
	Timestamp   apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectLedgerObject) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectLedgerObjectJSON) RawJSON() string {
	return r.raw
}

func (r V1ContractListBalancesResponseDataObjectLedgerObject) implementsV1ContractListBalancesResponseDataObjectLedger() {
}

type V1ContractListBalancesResponseDataObjectLedgerObjectType string

const (
	V1ContractListBalancesResponseDataObjectLedgerObjectTypePrepaidCommitSegmentStart V1ContractListBalancesResponseDataObjectLedgerObjectType = "PREPAID_COMMIT_SEGMENT_START"
)

func (r V1ContractListBalancesResponseDataObjectLedgerObjectType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataObjectLedgerObjectTypePrepaidCommitSegmentStart:
		return true
	}
	return false
}

type V1ContractListBalancesResponseDataObjectLedgerType string

const (
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitSegmentStart               V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_SEGMENT_START"
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitAutomatedInvoiceDeduction  V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitRollover                   V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_ROLLOVER"
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitExpiration                 V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_EXPIRATION"
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitCanceled                   V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_CANCELED"
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitCredited                   V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_CREDITED"
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitSeatBasedAdjustment        V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_SEAT_BASED_ADJUSTMENT"
	V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitInitialBalance            V1ContractListBalancesResponseDataObjectLedgerType = "POSTPAID_COMMIT_INITIAL_BALANCE"
	V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitAutomatedInvoiceDeduction V1ContractListBalancesResponseDataObjectLedgerType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
	V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitRollover                  V1ContractListBalancesResponseDataObjectLedgerType = "POSTPAID_COMMIT_ROLLOVER"
	V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitTrueup                    V1ContractListBalancesResponseDataObjectLedgerType = "POSTPAID_COMMIT_TRUEUP"
	V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitManual                     V1ContractListBalancesResponseDataObjectLedgerType = "PREPAID_COMMIT_MANUAL"
	V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitManual                    V1ContractListBalancesResponseDataObjectLedgerType = "POSTPAID_COMMIT_MANUAL"
	V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitExpiration                V1ContractListBalancesResponseDataObjectLedgerType = "POSTPAID_COMMIT_EXPIRATION"
)

func (r V1ContractListBalancesResponseDataObjectLedgerType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitSegmentStart, V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitAutomatedInvoiceDeduction, V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitRollover, V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitExpiration, V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitCanceled, V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitCredited, V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitSeatBasedAdjustment, V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitInitialBalance, V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitAutomatedInvoiceDeduction, V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitRollover, V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitTrueup, V1ContractListBalancesResponseDataObjectLedgerTypePrepaidCommitManual, V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitManual, V1ContractListBalancesResponseDataObjectLedgerTypePostpaidCommitExpiration:
		return true
	}
	return false
}

type V1ContractListBalancesResponseDataObjectRateType string

const (
	V1ContractListBalancesResponseDataObjectRateTypeCommitRate V1ContractListBalancesResponseDataObjectRateType = "COMMIT_RATE"
	V1ContractListBalancesResponseDataObjectRateTypeListRate   V1ContractListBalancesResponseDataObjectRateType = "LIST_RATE"
)

func (r V1ContractListBalancesResponseDataObjectRateType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataObjectRateTypeCommitRate, V1ContractListBalancesResponseDataObjectRateTypeListRate:
		return true
	}
	return false
}

type V1ContractListBalancesResponseDataObjectRolledOverFrom struct {
	CommitID   string                                                     `json:"commit_id,required" format:"uuid"`
	ContractID string                                                     `json:"contract_id,required" format:"uuid"`
	JSON       v1ContractListBalancesResponseDataObjectRolledOverFromJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectRolledOverFromJSON contains the JSON
// metadata for the struct [V1ContractListBalancesResponseDataObjectRolledOverFrom]
type v1ContractListBalancesResponseDataObjectRolledOverFromJSON struct {
	CommitID    apijson.Field
	ContractID  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectRolledOverFrom) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectRolledOverFromJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataObjectSpecifier struct {
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	PricingGroupValues      map[string]string `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID string `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags []string                                              `json:"product_tags"`
	JSON        v1ContractListBalancesResponseDataObjectSpecifierJSON `json:"-"`
}

// v1ContractListBalancesResponseDataObjectSpecifierJSON contains the JSON metadata
// for the struct [V1ContractListBalancesResponseDataObjectSpecifier]
type v1ContractListBalancesResponseDataObjectSpecifierJSON struct {
	PresentationGroupValues apijson.Field
	PricingGroupValues      apijson.Field
	ProductID               apijson.Field
	ProductTags             apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractListBalancesResponseDataObjectSpecifier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractListBalancesResponseDataObjectSpecifierJSON) RawJSON() string {
	return r.raw
}

type V1ContractListBalancesResponseDataType string

const (
	V1ContractListBalancesResponseDataTypePrepaid  V1ContractListBalancesResponseDataType = "PREPAID"
	V1ContractListBalancesResponseDataTypePostpaid V1ContractListBalancesResponseDataType = "POSTPAID"
	V1ContractListBalancesResponseDataTypeCredit   V1ContractListBalancesResponseDataType = "CREDIT"
)

func (r V1ContractListBalancesResponseDataType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataTypePrepaid, V1ContractListBalancesResponseDataTypePostpaid, V1ContractListBalancesResponseDataTypeCredit:
		return true
	}
	return false
}

type V1ContractListBalancesResponseDataRateType string

const (
	V1ContractListBalancesResponseDataRateTypeCommitRate V1ContractListBalancesResponseDataRateType = "COMMIT_RATE"
	V1ContractListBalancesResponseDataRateTypeListRate   V1ContractListBalancesResponseDataRateType = "LIST_RATE"
)

func (r V1ContractListBalancesResponseDataRateType) IsKnown() bool {
	switch r {
	case V1ContractListBalancesResponseDataRateTypeCommitRate, V1ContractListBalancesResponseDataRateTypeListRate:
		return true
	}
	return false
}

type V1ContractGetRateScheduleResponse struct {
	Data     []V1ContractGetRateScheduleResponseData `json:"data,required"`
	NextPage string                                  `json:"next_page,nullable"`
	JSON     v1ContractGetRateScheduleResponseJSON   `json:"-"`
}

// v1ContractGetRateScheduleResponseJSON contains the JSON metadata for the struct
// [V1ContractGetRateScheduleResponse]
type v1ContractGetRateScheduleResponseJSON struct {
	Data        apijson.Field
	NextPage    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseData struct {
	Entitled            bool                                                  `json:"entitled,required"`
	ListRate            V1ContractGetRateScheduleResponseDataListRate         `json:"list_rate,required"`
	ProductCustomFields map[string]string                                     `json:"product_custom_fields,required"`
	ProductID           string                                                `json:"product_id,required" format:"uuid"`
	ProductName         string                                                `json:"product_name,required"`
	ProductTags         []string                                              `json:"product_tags,required"`
	RateCardID          string                                                `json:"rate_card_id,required" format:"uuid"`
	StartingAt          time.Time                                             `json:"starting_at,required" format:"date-time"`
	BillingFrequency    V1ContractGetRateScheduleResponseDataBillingFrequency `json:"billing_frequency"`
	// A distinct rate on the rate card. You can choose to use this rate rather than
	// list rate when consuming a credit or commit.
	CommitRate         V1ContractGetRateScheduleResponseDataCommitRate   `json:"commit_rate"`
	EndingBefore       time.Time                                         `json:"ending_before" format:"date-time"`
	OverrideRate       V1ContractGetRateScheduleResponseDataOverrideRate `json:"override_rate"`
	PricingGroupValues map[string]string                                 `json:"pricing_group_values"`
	JSON               v1ContractGetRateScheduleResponseDataJSON         `json:"-"`
}

// v1ContractGetRateScheduleResponseDataJSON contains the JSON metadata for the
// struct [V1ContractGetRateScheduleResponseData]
type v1ContractGetRateScheduleResponseDataJSON struct {
	Entitled            apijson.Field
	ListRate            apijson.Field
	ProductCustomFields apijson.Field
	ProductID           apijson.Field
	ProductName         apijson.Field
	ProductTags         apijson.Field
	RateCardID          apijson.Field
	StartingAt          apijson.Field
	BillingFrequency    apijson.Field
	CommitRate          apijson.Field
	EndingBefore        apijson.Field
	OverrideRate        apijson.Field
	PricingGroupValues  apijson.Field
	raw                 string
	ExtraFields         map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataListRate struct {
	RateType   V1ContractGetRateScheduleResponseDataListRateRateType   `json:"rate_type,required"`
	CreditType V1ContractGetRateScheduleResponseDataListRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// if pricing groups are used, this will contain the values used to calculate the
	// price
	PricingGroupValues map[string]string `json:"pricing_group_values"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetRateScheduleResponseDataListRateTier `json:"tiers"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed
	// using list prices rather than the standard rates for this product on the
	// contract.
	UseListPrices bool                                              `json:"use_list_prices"`
	JSON          v1ContractGetRateScheduleResponseDataListRateJSON `json:"-"`
}

// v1ContractGetRateScheduleResponseDataListRateJSON contains the JSON metadata for
// the struct [V1ContractGetRateScheduleResponseDataListRate]
type v1ContractGetRateScheduleResponseDataListRateJSON struct {
	RateType           apijson.Field
	CreditType         apijson.Field
	CustomRate         apijson.Field
	IsProrated         apijson.Field
	Price              apijson.Field
	PricingGroupValues apijson.Field
	Quantity           apijson.Field
	Tiers              apijson.Field
	UseListPrices      apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataListRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataListRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataListRateRateType string

const (
	V1ContractGetRateScheduleResponseDataListRateRateTypeFlat         V1ContractGetRateScheduleResponseDataListRateRateType = "FLAT"
	V1ContractGetRateScheduleResponseDataListRateRateTypePercentage   V1ContractGetRateScheduleResponseDataListRateRateType = "PERCENTAGE"
	V1ContractGetRateScheduleResponseDataListRateRateTypeSubscription V1ContractGetRateScheduleResponseDataListRateRateType = "SUBSCRIPTION"
	V1ContractGetRateScheduleResponseDataListRateRateTypeCustom       V1ContractGetRateScheduleResponseDataListRateRateType = "CUSTOM"
	V1ContractGetRateScheduleResponseDataListRateRateTypeTiered       V1ContractGetRateScheduleResponseDataListRateRateType = "TIERED"
)

func (r V1ContractGetRateScheduleResponseDataListRateRateType) IsKnown() bool {
	switch r {
	case V1ContractGetRateScheduleResponseDataListRateRateTypeFlat, V1ContractGetRateScheduleResponseDataListRateRateTypePercentage, V1ContractGetRateScheduleResponseDataListRateRateTypeSubscription, V1ContractGetRateScheduleResponseDataListRateRateTypeCustom, V1ContractGetRateScheduleResponseDataListRateRateTypeTiered:
		return true
	}
	return false
}

type V1ContractGetRateScheduleResponseDataListRateCreditType struct {
	ID   string                                                      `json:"id,required" format:"uuid"`
	Name string                                                      `json:"name,required"`
	JSON v1ContractGetRateScheduleResponseDataListRateCreditTypeJSON `json:"-"`
}

// v1ContractGetRateScheduleResponseDataListRateCreditTypeJSON contains the JSON
// metadata for the struct
// [V1ContractGetRateScheduleResponseDataListRateCreditType]
type v1ContractGetRateScheduleResponseDataListRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataListRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataListRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataListRateTier struct {
	Price float64                                               `json:"price,required"`
	Size  float64                                               `json:"size"`
	JSON  v1ContractGetRateScheduleResponseDataListRateTierJSON `json:"-"`
}

// v1ContractGetRateScheduleResponseDataListRateTierJSON contains the JSON metadata
// for the struct [V1ContractGetRateScheduleResponseDataListRateTier]
type v1ContractGetRateScheduleResponseDataListRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataListRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataListRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataBillingFrequency string

const (
	V1ContractGetRateScheduleResponseDataBillingFrequencyMonthly   V1ContractGetRateScheduleResponseDataBillingFrequency = "MONTHLY"
	V1ContractGetRateScheduleResponseDataBillingFrequencyQuarterly V1ContractGetRateScheduleResponseDataBillingFrequency = "QUARTERLY"
	V1ContractGetRateScheduleResponseDataBillingFrequencyAnnual    V1ContractGetRateScheduleResponseDataBillingFrequency = "ANNUAL"
	V1ContractGetRateScheduleResponseDataBillingFrequencyWeekly    V1ContractGetRateScheduleResponseDataBillingFrequency = "WEEKLY"
)

func (r V1ContractGetRateScheduleResponseDataBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetRateScheduleResponseDataBillingFrequencyMonthly, V1ContractGetRateScheduleResponseDataBillingFrequencyQuarterly, V1ContractGetRateScheduleResponseDataBillingFrequencyAnnual, V1ContractGetRateScheduleResponseDataBillingFrequencyWeekly:
		return true
	}
	return false
}

// A distinct rate on the rate card. You can choose to use this rate rather than
// list rate when consuming a credit or commit.
type V1ContractGetRateScheduleResponseDataCommitRate struct {
	RateType V1ContractGetRateScheduleResponseDataCommitRateRateType `json:"rate_type,required"`
	// Commit rate price. For FLAT rate_type, this must be >=0.
	Price float64 `json:"price"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetRateScheduleResponseDataCommitRateTier `json:"tiers"`
	JSON  v1ContractGetRateScheduleResponseDataCommitRateJSON   `json:"-"`
}

// v1ContractGetRateScheduleResponseDataCommitRateJSON contains the JSON metadata
// for the struct [V1ContractGetRateScheduleResponseDataCommitRate]
type v1ContractGetRateScheduleResponseDataCommitRateJSON struct {
	RateType    apijson.Field
	Price       apijson.Field
	Tiers       apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataCommitRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataCommitRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataCommitRateRateType string

const (
	V1ContractGetRateScheduleResponseDataCommitRateRateTypeFlat         V1ContractGetRateScheduleResponseDataCommitRateRateType = "FLAT"
	V1ContractGetRateScheduleResponseDataCommitRateRateTypePercentage   V1ContractGetRateScheduleResponseDataCommitRateRateType = "PERCENTAGE"
	V1ContractGetRateScheduleResponseDataCommitRateRateTypeSubscription V1ContractGetRateScheduleResponseDataCommitRateRateType = "SUBSCRIPTION"
	V1ContractGetRateScheduleResponseDataCommitRateRateTypeTiered       V1ContractGetRateScheduleResponseDataCommitRateRateType = "TIERED"
	V1ContractGetRateScheduleResponseDataCommitRateRateTypeCustom       V1ContractGetRateScheduleResponseDataCommitRateRateType = "CUSTOM"
)

func (r V1ContractGetRateScheduleResponseDataCommitRateRateType) IsKnown() bool {
	switch r {
	case V1ContractGetRateScheduleResponseDataCommitRateRateTypeFlat, V1ContractGetRateScheduleResponseDataCommitRateRateTypePercentage, V1ContractGetRateScheduleResponseDataCommitRateRateTypeSubscription, V1ContractGetRateScheduleResponseDataCommitRateRateTypeTiered, V1ContractGetRateScheduleResponseDataCommitRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractGetRateScheduleResponseDataCommitRateTier struct {
	Price float64                                                 `json:"price,required"`
	Size  float64                                                 `json:"size"`
	JSON  v1ContractGetRateScheduleResponseDataCommitRateTierJSON `json:"-"`
}

// v1ContractGetRateScheduleResponseDataCommitRateTierJSON contains the JSON
// metadata for the struct [V1ContractGetRateScheduleResponseDataCommitRateTier]
type v1ContractGetRateScheduleResponseDataCommitRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataCommitRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataCommitRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataOverrideRate struct {
	RateType   V1ContractGetRateScheduleResponseDataOverrideRateRateType   `json:"rate_type,required"`
	CreditType V1ContractGetRateScheduleResponseDataOverrideRateCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// if pricing groups are used, this will contain the values used to calculate the
	// price
	PricingGroupValues map[string]string `json:"pricing_group_values"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractGetRateScheduleResponseDataOverrideRateTier `json:"tiers"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed
	// using list prices rather than the standard rates for this product on the
	// contract.
	UseListPrices bool                                                  `json:"use_list_prices"`
	JSON          v1ContractGetRateScheduleResponseDataOverrideRateJSON `json:"-"`
}

// v1ContractGetRateScheduleResponseDataOverrideRateJSON contains the JSON metadata
// for the struct [V1ContractGetRateScheduleResponseDataOverrideRate]
type v1ContractGetRateScheduleResponseDataOverrideRateJSON struct {
	RateType           apijson.Field
	CreditType         apijson.Field
	CustomRate         apijson.Field
	IsProrated         apijson.Field
	Price              apijson.Field
	PricingGroupValues apijson.Field
	Quantity           apijson.Field
	Tiers              apijson.Field
	UseListPrices      apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataOverrideRate) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataOverrideRateJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataOverrideRateRateType string

const (
	V1ContractGetRateScheduleResponseDataOverrideRateRateTypeFlat         V1ContractGetRateScheduleResponseDataOverrideRateRateType = "FLAT"
	V1ContractGetRateScheduleResponseDataOverrideRateRateTypePercentage   V1ContractGetRateScheduleResponseDataOverrideRateRateType = "PERCENTAGE"
	V1ContractGetRateScheduleResponseDataOverrideRateRateTypeSubscription V1ContractGetRateScheduleResponseDataOverrideRateRateType = "SUBSCRIPTION"
	V1ContractGetRateScheduleResponseDataOverrideRateRateTypeCustom       V1ContractGetRateScheduleResponseDataOverrideRateRateType = "CUSTOM"
	V1ContractGetRateScheduleResponseDataOverrideRateRateTypeTiered       V1ContractGetRateScheduleResponseDataOverrideRateRateType = "TIERED"
)

func (r V1ContractGetRateScheduleResponseDataOverrideRateRateType) IsKnown() bool {
	switch r {
	case V1ContractGetRateScheduleResponseDataOverrideRateRateTypeFlat, V1ContractGetRateScheduleResponseDataOverrideRateRateTypePercentage, V1ContractGetRateScheduleResponseDataOverrideRateRateTypeSubscription, V1ContractGetRateScheduleResponseDataOverrideRateRateTypeCustom, V1ContractGetRateScheduleResponseDataOverrideRateRateTypeTiered:
		return true
	}
	return false
}

type V1ContractGetRateScheduleResponseDataOverrideRateCreditType struct {
	ID   string                                                          `json:"id,required" format:"uuid"`
	Name string                                                          `json:"name,required"`
	JSON v1ContractGetRateScheduleResponseDataOverrideRateCreditTypeJSON `json:"-"`
}

// v1ContractGetRateScheduleResponseDataOverrideRateCreditTypeJSON contains the
// JSON metadata for the struct
// [V1ContractGetRateScheduleResponseDataOverrideRateCreditType]
type v1ContractGetRateScheduleResponseDataOverrideRateCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataOverrideRateCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataOverrideRateCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetRateScheduleResponseDataOverrideRateTier struct {
	Price float64                                                   `json:"price,required"`
	Size  float64                                                   `json:"size"`
	JSON  v1ContractGetRateScheduleResponseDataOverrideRateTierJSON `json:"-"`
}

// v1ContractGetRateScheduleResponseDataOverrideRateTierJSON contains the JSON
// metadata for the struct [V1ContractGetRateScheduleResponseDataOverrideRateTier]
type v1ContractGetRateScheduleResponseDataOverrideRateTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetRateScheduleResponseDataOverrideRateTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetRateScheduleResponseDataOverrideRateTierJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetSubscriptionQuantityHistoryResponse struct {
	Data V1ContractGetSubscriptionQuantityHistoryResponseData `json:"data,required"`
	JSON v1ContractGetSubscriptionQuantityHistoryResponseJSON `json:"-"`
}

// v1ContractGetSubscriptionQuantityHistoryResponseJSON contains the JSON metadata
// for the struct [V1ContractGetSubscriptionQuantityHistoryResponse]
type v1ContractGetSubscriptionQuantityHistoryResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetSubscriptionQuantityHistoryResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetSubscriptionQuantityHistoryResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetSubscriptionQuantityHistoryResponseData struct {
	FiatCreditTypeID string                                                        `json:"fiat_credit_type_id" format:"uuid"`
	History          []V1ContractGetSubscriptionQuantityHistoryResponseDataHistory `json:"history"`
	SubscriptionID   string                                                        `json:"subscription_id" format:"uuid"`
	JSON             v1ContractGetSubscriptionQuantityHistoryResponseDataJSON      `json:"-"`
}

// v1ContractGetSubscriptionQuantityHistoryResponseDataJSON contains the JSON
// metadata for the struct [V1ContractGetSubscriptionQuantityHistoryResponseData]
type v1ContractGetSubscriptionQuantityHistoryResponseDataJSON struct {
	FiatCreditTypeID apijson.Field
	History          apijson.Field
	SubscriptionID   apijson.Field
	raw              string
	ExtraFields      map[string]apijson.Field
}

func (r *V1ContractGetSubscriptionQuantityHistoryResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetSubscriptionQuantityHistoryResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetSubscriptionQuantityHistoryResponseDataHistory struct {
	Data       []V1ContractGetSubscriptionQuantityHistoryResponseDataHistoryData `json:"data,required"`
	StartingAt time.Time                                                         `json:"starting_at,required" format:"date-time"`
	JSON       v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryJSON   `json:"-"`
}

// v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryJSON contains the
// JSON metadata for the struct
// [V1ContractGetSubscriptionQuantityHistoryResponseDataHistory]
type v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryJSON struct {
	Data        apijson.Field
	StartingAt  apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetSubscriptionQuantityHistoryResponseDataHistory) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryJSON) RawJSON() string {
	return r.raw
}

type V1ContractGetSubscriptionQuantityHistoryResponseDataHistoryData struct {
	Quantity  float64                                                             `json:"quantity,required"`
	Total     float64                                                             `json:"total,required"`
	UnitPrice float64                                                             `json:"unit_price,required"`
	JSON      v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryDataJSON `json:"-"`
}

// v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryDataJSON contains the
// JSON metadata for the struct
// [V1ContractGetSubscriptionQuantityHistoryResponseDataHistoryData]
type v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryDataJSON struct {
	Quantity    apijson.Field
	Total       apijson.Field
	UnitPrice   apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractGetSubscriptionQuantityHistoryResponseDataHistoryData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractGetSubscriptionQuantityHistoryResponseDataHistoryDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponse struct {
	Data []V1ContractScheduleProServicesInvoiceResponseData `json:"data,required"`
	JSON v1ContractScheduleProServicesInvoiceResponseJSON   `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseJSON contains the JSON metadata for
// the struct [V1ContractScheduleProServicesInvoiceResponse]
type v1ContractScheduleProServicesInvoiceResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseData struct {
	ID          string                                                     `json:"id,required" format:"uuid"`
	CreditType  V1ContractScheduleProServicesInvoiceResponseDataCreditType `json:"credit_type,required"`
	CustomerID  string                                                     `json:"customer_id,required" format:"uuid"`
	LineItems   []V1ContractScheduleProServicesInvoiceResponseDataLineItem `json:"line_items,required"`
	Status      string                                                     `json:"status,required"`
	Total       float64                                                    `json:"total,required"`
	Type        string                                                     `json:"type,required"`
	AmendmentID string                                                     `json:"amendment_id" format:"uuid"`
	// This field's availability is dependent on your client's configuration.
	BillableStatus       V1ContractScheduleProServicesInvoiceResponseDataBillableStatus   `json:"billable_status"`
	ContractCustomFields map[string]string                                                `json:"contract_custom_fields"`
	ContractID           string                                                           `json:"contract_id" format:"uuid"`
	CorrectionRecord     V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecord `json:"correction_record"`
	// When the invoice was created (UTC). This field is present for correction
	// invoices only.
	CreatedAt            time.Time              `json:"created_at" format:"date-time"`
	CustomFields         map[string]interface{} `json:"custom_fields"`
	CustomerCustomFields map[string]string      `json:"customer_custom_fields"`
	// End of the usage period this invoice covers (UTC)
	EndTimestamp       time.Time                                                           `json:"end_timestamp" format:"date-time"`
	ExternalInvoice    V1ContractScheduleProServicesInvoiceResponseDataExternalInvoice     `json:"external_invoice,nullable"`
	InvoiceAdjustments []V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustment `json:"invoice_adjustments"`
	// When the invoice was issued (UTC)
	IssuedAt            time.Time `json:"issued_at" format:"date-time"`
	NetPaymentTermsDays float64   `json:"net_payment_terms_days"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID string            `json:"netsuite_sales_order_id"`
	PlanCustomFields     map[string]string `json:"plan_custom_fields"`
	PlanID               string            `json:"plan_id" format:"uuid"`
	PlanName             string            `json:"plan_name"`
	// Only present for contract invoices with reseller royalties.
	ResellerRoyalty V1ContractScheduleProServicesInvoiceResponseDataResellerRoyalty `json:"reseller_royalty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID string `json:"salesforce_opportunity_id"`
	// Beginning of the usage period this invoice covers (UTC)
	StartTimestamp time.Time                                            `json:"start_timestamp" format:"date-time"`
	Subtotal       float64                                              `json:"subtotal"`
	JSON           v1ContractScheduleProServicesInvoiceResponseDataJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataJSON contains the JSON metadata
// for the struct [V1ContractScheduleProServicesInvoiceResponseData]
type v1ContractScheduleProServicesInvoiceResponseDataJSON struct {
	ID                      apijson.Field
	CreditType              apijson.Field
	CustomerID              apijson.Field
	LineItems               apijson.Field
	Status                  apijson.Field
	Total                   apijson.Field
	Type                    apijson.Field
	AmendmentID             apijson.Field
	BillableStatus          apijson.Field
	ContractCustomFields    apijson.Field
	ContractID              apijson.Field
	CorrectionRecord        apijson.Field
	CreatedAt               apijson.Field
	CustomFields            apijson.Field
	CustomerCustomFields    apijson.Field
	EndTimestamp            apijson.Field
	ExternalInvoice         apijson.Field
	InvoiceAdjustments      apijson.Field
	IssuedAt                apijson.Field
	NetPaymentTermsDays     apijson.Field
	NetsuiteSalesOrderID    apijson.Field
	PlanCustomFields        apijson.Field
	PlanID                  apijson.Field
	PlanName                apijson.Field
	ResellerRoyalty         apijson.Field
	SalesforceOpportunityID apijson.Field
	StartTimestamp          apijson.Field
	Subtotal                apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataCreditType struct {
	ID   string                                                         `json:"id,required" format:"uuid"`
	Name string                                                         `json:"name,required"`
	JSON v1ContractScheduleProServicesInvoiceResponseDataCreditTypeJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataCreditTypeJSON contains the JSON
// metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataCreditType]
type v1ContractScheduleProServicesInvoiceResponseDataCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItem struct {
	CreditType V1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditType `json:"credit_type,required"`
	Name       string                                                              `json:"name,required"`
	Total      float64                                                             `json:"total,required"`
	// Details about the credit or commit that was applied to this line item. Only
	// present on line items with product of `USAGE`, `SUBSCRIPTION` or `COMPOSITE`
	// types.
	AppliedCommitOrCredit V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCredit `json:"applied_commit_or_credit"`
	CommitCustomFields    map[string]string                                                              `json:"commit_custom_fields"`
	// For line items with product of `USAGE`, `SUBSCRIPTION`, or `COMPOSITE` types,
	// the ID of the credit or commit that was applied to this line item. For line
	// items with product type of `FIXED`, the ID of the prepaid or postpaid commit
	// that is being paid for.
	CommitID                   string `json:"commit_id" format:"uuid"`
	CommitNetsuiteItemID       string `json:"commit_netsuite_item_id"`
	CommitNetsuiteSalesOrderID string `json:"commit_netsuite_sales_order_id"`
	CommitSegmentID            string `json:"commit_segment_id" format:"uuid"`
	// `PrepaidCommit` (for commit types `PREPAID` and `CREDIT`) or `PostpaidCommit`
	// (for commit type `POSTPAID`).
	CommitType           string            `json:"commit_type"`
	CustomFields         map[string]string `json:"custom_fields"`
	DiscountCustomFields map[string]string `json:"discount_custom_fields"`
	// ID of the discount applied to this line item.
	DiscountID string `json:"discount_id" format:"uuid"`
	// The line item's end date (exclusive).
	EndingBefore time.Time `json:"ending_before" format:"date-time"`
	GroupKey     string    `json:"group_key"`
	GroupValue   string    `json:"group_value,nullable"`
	// Indicates whether the line item is prorated for `SUBSCRIPTION` type product.
	IsProrated bool `json:"is_prorated"`
	// Only present for contract invoices and when the `include_list_prices` query
	// parameter is set to true. This will include the list rate for the charge if
	// applicable. Only present for usage and subscription line items.
	ListPrice V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPrice `json:"list_price"`
	Metadata  string                                                             `json:"metadata"`
	// The end date for the billing period on the invoice.
	NetsuiteInvoiceBillingEnd time.Time `json:"netsuite_invoice_billing_end" format:"date-time"`
	// The start date for the billing period on the invoice.
	NetsuiteInvoiceBillingStart time.Time `json:"netsuite_invoice_billing_start" format:"date-time"`
	NetsuiteItemID              string    `json:"netsuite_item_id"`
	// Only present for line items paying for a postpaid commit true-up.
	PostpaidCommit V1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommit `json:"postpaid_commit"`
	// Includes the presentation group values associated with this line item if
	// presentation group keys are used.
	PresentationGroupValues map[string]string `json:"presentation_group_values"`
	// Includes the pricing group values associated with this line item if dimensional
	// pricing is used.
	PricingGroupValues  map[string]string `json:"pricing_group_values"`
	ProductCustomFields map[string]string `json:"product_custom_fields"`
	// ID of the product associated with the line item.
	ProductID string `json:"product_id" format:"uuid"`
	// The current product tags associated with the line item's `product_id`.
	ProductTags []string `json:"product_tags"`
	// The type of the line item's product. Possible values are `FixedProductListItem`
	// (for `FIXED` type products), `UsageProductListItem` (for `USAGE` type products),
	// `SubscriptionProductListItem` (for `SUBSCRIPTION` type products) or
	// `CompositeProductListItem` (for `COMPOSITE` type products). For scheduled
	// charges, commit and credit payments, the value is `FixedProductListItem`.
	ProductType                     string            `json:"product_type"`
	ProfessionalServiceCustomFields map[string]string `json:"professional_service_custom_fields"`
	ProfessionalServiceID           string            `json:"professional_service_id" format:"uuid"`
	// The quantity associated with the line item.
	Quantity                    float64                                                               `json:"quantity"`
	ResellerType                V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerType `json:"reseller_type"`
	ScheduledChargeCustomFields map[string]string                                                     `json:"scheduled_charge_custom_fields"`
	// ID of scheduled charge.
	ScheduledChargeID string `json:"scheduled_charge_id" format:"uuid"`
	// The line item's start date (inclusive).
	StartingAt               time.Time                                                              `json:"starting_at" format:"date-time"`
	SubLineItems             []V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItem `json:"sub_line_items"`
	SubscriptionCustomFields map[string]string                                                      `json:"subscription_custom_fields"`
	// Populated if the line item has a tiered price.
	Tier V1ContractScheduleProServicesInvoiceResponseDataLineItemsTier `json:"tier"`
	// The unit price associated with the line item.
	UnitPrice float64                                                      `json:"unit_price"`
	JSON      v1ContractScheduleProServicesInvoiceResponseDataLineItemJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemJSON contains the JSON
// metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItem]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemJSON struct {
	CreditType                      apijson.Field
	Name                            apijson.Field
	Total                           apijson.Field
	AppliedCommitOrCredit           apijson.Field
	CommitCustomFields              apijson.Field
	CommitID                        apijson.Field
	CommitNetsuiteItemID            apijson.Field
	CommitNetsuiteSalesOrderID      apijson.Field
	CommitSegmentID                 apijson.Field
	CommitType                      apijson.Field
	CustomFields                    apijson.Field
	DiscountCustomFields            apijson.Field
	DiscountID                      apijson.Field
	EndingBefore                    apijson.Field
	GroupKey                        apijson.Field
	GroupValue                      apijson.Field
	IsProrated                      apijson.Field
	ListPrice                       apijson.Field
	Metadata                        apijson.Field
	NetsuiteInvoiceBillingEnd       apijson.Field
	NetsuiteInvoiceBillingStart     apijson.Field
	NetsuiteItemID                  apijson.Field
	PostpaidCommit                  apijson.Field
	PresentationGroupValues         apijson.Field
	PricingGroupValues              apijson.Field
	ProductCustomFields             apijson.Field
	ProductID                       apijson.Field
	ProductTags                     apijson.Field
	ProductType                     apijson.Field
	ProfessionalServiceCustomFields apijson.Field
	ProfessionalServiceID           apijson.Field
	Quantity                        apijson.Field
	ResellerType                    apijson.Field
	ScheduledChargeCustomFields     apijson.Field
	ScheduledChargeID               apijson.Field
	StartingAt                      apijson.Field
	SubLineItems                    apijson.Field
	SubscriptionCustomFields        apijson.Field
	Tier                            apijson.Field
	UnitPrice                       apijson.Field
	raw                             string
	ExtraFields                     map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditType struct {
	ID   string                                                                  `json:"id,required" format:"uuid"`
	Name string                                                                  `json:"name,required"`
	JSON v1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditTypeJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditTypeJSON contains
// the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditType]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsCreditTypeJSON) RawJSON() string {
	return r.raw
}

// Details about the credit or commit that was applied to this line item. Only
// present on line items with product of `USAGE`, `SUBSCRIPTION` or `COMPOSITE`
// types.
type V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCredit struct {
	ID   string                                                                             `json:"id,required" format:"uuid"`
	Type V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditType `json:"type,required"`
	JSON v1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCredit]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditJSON struct {
	ID          apijson.Field
	Type        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCredit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditType string

const (
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditTypePrepaid  V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditType = "PREPAID"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditTypePostpaid V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditType = "POSTPAID"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditTypeCredit   V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditType = "CREDIT"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditType) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditTypePrepaid, V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditTypePostpaid, V1ContractScheduleProServicesInvoiceResponseDataLineItemsAppliedCommitOrCreditTypeCredit:
		return true
	}
	return false
}

// Only present for contract invoices and when the `include_list_prices` query
// parameter is set to true. This will include the list rate for the charge if
// applicable. Only present for usage and subscription line items.
type V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPrice struct {
	RateType   V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType   `json:"rate_type,required"`
	CreditType V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditType `json:"credit_type"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate map[string]interface{} `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated bool `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price float64 `json:"price"`
	// if pricing groups are used, this will contain the values used to calculate the
	// price
	PricingGroupValues map[string]string `json:"pricing_group_values"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity float64 `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers []V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTier `json:"tiers"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed
	// using list prices rather than the standard rates for this product on the
	// contract.
	UseListPrices bool                                                                   `json:"use_list_prices"`
	JSON          v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceJSON contains
// the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPrice]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceJSON struct {
	RateType           apijson.Field
	CreditType         apijson.Field
	CustomRate         apijson.Field
	IsProrated         apijson.Field
	Price              apijson.Field
	PricingGroupValues apijson.Field
	Quantity           apijson.Field
	Tiers              apijson.Field
	UseListPrices      apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPrice) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType string

const (
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeFlat         V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType = "FLAT"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypePercentage   V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType = "PERCENTAGE"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeSubscription V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType = "SUBSCRIPTION"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeCustom       V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType = "CUSTOM"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeTiered       V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType = "TIERED"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateType) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeFlat, V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypePercentage, V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeSubscription, V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeCustom, V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceRateTypeTiered:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditType struct {
	ID   string                                                                           `json:"id,required" format:"uuid"`
	Name string                                                                           `json:"name,required"`
	JSON v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditTypeJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditType]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceCreditTypeJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTier struct {
	Price float64                                                                    `json:"price,required"`
	Size  float64                                                                    `json:"size"`
	JSON  v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTierJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTierJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTier]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTierJSON struct {
	Price       apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsListPriceTierJSON) RawJSON() string {
	return r.raw
}

// Only present for line items paying for a postpaid commit true-up.
type V1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommit struct {
	ID   string                                                                      `json:"id,required" format:"uuid"`
	JSON v1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommitJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommitJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommit]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommitJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommit) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsPostpaidCommitJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerType string

const (
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeAws           V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerType = "AWS"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeAwsProService V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerType = "AWS_PRO_SERVICE"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeGcp           V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerType = "GCP"
	V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeGcpProService V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerType) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeAws, V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeAwsProService, V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeGcp, V1ContractScheduleProServicesInvoiceResponseDataLineItemsResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItem struct {
	CustomFields  map[string]string `json:"custom_fields,required"`
	Name          string            `json:"name,required"`
	Quantity      float64           `json:"quantity,required"`
	Subtotal      float64           `json:"subtotal,required"`
	ChargeID      string            `json:"charge_id" format:"uuid"`
	CreditGrantID string            `json:"credit_grant_id" format:"uuid"`
	// The end date for the charge (for seats charges only).
	EndDate time.Time `json:"end_date" format:"date-time"`
	// the unit price for this charge, present only if the charge is not tiered and the
	// quantity is nonzero
	Price float64 `json:"price"`
	// The start date for the charge (for seats charges only).
	StartDate time.Time `json:"start_date" format:"date-time"`
	// when the current tier started and ends (for tiered charges only)
	TierPeriod V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriod `json:"tier_period"`
	Tiers      []V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTier     `json:"tiers"`
	JSON       v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemJSON        `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItem]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemJSON struct {
	CustomFields  apijson.Field
	Name          apijson.Field
	Quantity      apijson.Field
	Subtotal      apijson.Field
	ChargeID      apijson.Field
	CreditGrantID apijson.Field
	EndDate       apijson.Field
	Price         apijson.Field
	StartDate     apijson.Field
	TierPeriod    apijson.Field
	Tiers         apijson.Field
	raw           string
	ExtraFields   map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItem) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemJSON) RawJSON() string {
	return r.raw
}

// when the current tier started and ends (for tiered charges only)
type V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriod struct {
	StartingAt   time.Time                                                                           `json:"starting_at,required" format:"date-time"`
	EndingBefore time.Time                                                                           `json:"ending_before" format:"date-time"`
	JSON         v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriodJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriodJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriod]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriodJSON struct {
	StartingAt   apijson.Field
	EndingBefore apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriod) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierPeriodJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTier struct {
	Price    float64 `json:"price,required"`
	Quantity float64 `json:"quantity,required"`
	// at what metric amount this tier begins
	StartingAt float64                                                                       `json:"starting_at,required"`
	Subtotal   float64                                                                       `json:"subtotal,required"`
	JSON       v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTier]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierJSON struct {
	Price       apijson.Field
	Quantity    apijson.Field
	StartingAt  apijson.Field
	Subtotal    apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsSubLineItemsTierJSON) RawJSON() string {
	return r.raw
}

// Populated if the line item has a tiered price.
type V1ContractScheduleProServicesInvoiceResponseDataLineItemsTier struct {
	Level      float64                                                           `json:"level,required"`
	StartingAt string                                                            `json:"starting_at,required"`
	Size       string                                                            `json:"size,nullable"`
	JSON       v1ContractScheduleProServicesInvoiceResponseDataLineItemsTierJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataLineItemsTierJSON contains the
// JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataLineItemsTier]
type v1ContractScheduleProServicesInvoiceResponseDataLineItemsTierJSON struct {
	Level       apijson.Field
	StartingAt  apijson.Field
	Size        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataLineItemsTier) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataLineItemsTierJSON) RawJSON() string {
	return r.raw
}

// This field's availability is dependent on your client's configuration.
type V1ContractScheduleProServicesInvoiceResponseDataBillableStatus string

const (
	V1ContractScheduleProServicesInvoiceResponseDataBillableStatusBillable   V1ContractScheduleProServicesInvoiceResponseDataBillableStatus = "billable"
	V1ContractScheduleProServicesInvoiceResponseDataBillableStatusUnbillable V1ContractScheduleProServicesInvoiceResponseDataBillableStatus = "unbillable"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataBillableStatus) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataBillableStatusBillable, V1ContractScheduleProServicesInvoiceResponseDataBillableStatusUnbillable:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecord struct {
	CorrectedInvoiceID       string                                                                                   `json:"corrected_invoice_id,required" format:"uuid"`
	Memo                     string                                                                                   `json:"memo,required"`
	Reason                   string                                                                                   `json:"reason,required"`
	CorrectedExternalInvoice V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoice `json:"corrected_external_invoice"`
	JSON                     v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordJSON                     `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordJSON contains
// the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecord]
type v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordJSON struct {
	CorrectedInvoiceID       apijson.Field
	Memo                     apijson.Field
	Reason                   apijson.Field
	CorrectedExternalInvoice apijson.Field
	raw                      string
	ExtraFields              map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecord) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoice struct {
	BillingProviderType V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType `json:"billing_provider_type,required"`
	ExternalStatus      V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus      `json:"external_status"`
	InvoiceID           string                                                                                                      `json:"invoice_id"`
	IssuedAtTimestamp   time.Time                                                                                                   `json:"issued_at_timestamp" format:"date-time"`
	JSON                v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceJSON                `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoice]
type v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceJSON struct {
	BillingProviderType apijson.Field
	ExternalStatus      apijson.Field
	InvoiceID           apijson.Field
	IssuedAtTimestamp   apijson.Field
	raw                 string
	ExtraFields         map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoice) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType string

const (
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAwsMarketplace   V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "aws_marketplace"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeStripe           V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "stripe"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeNetsuite         V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "netsuite"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeCustom           V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "custom"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAzureMarketplace V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "azure_marketplace"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeQuickbooksOnline V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "quickbooks_online"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeWorkday          V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "workday"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeGcpMarketplace   V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType = "gcp_marketplace"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderType) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAwsMarketplace, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeStripe, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeNetsuite, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeCustom, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeAzureMarketplace, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeQuickbooksOnline, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeWorkday, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceBillingProviderTypeGcpMarketplace:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus string

const (
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDraft               V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "DRAFT"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusFinalized           V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "FINALIZED"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaid                V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "PAID"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusUncollectible       V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "UNCOLLECTIBLE"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusVoid                V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "VOID"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDeleted             V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "DELETED"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaymentFailed       V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "PAYMENT_FAILED"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusInvalidRequestError V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "INVALID_REQUEST_ERROR"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSkipped             V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "SKIPPED"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSent                V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "SENT"
	V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusQueued              V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus = "QUEUED"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatus) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDraft, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusFinalized, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaid, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusUncollectible, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusVoid, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusDeleted, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusPaymentFailed, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusInvalidRequestError, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSkipped, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusSent, V1ContractScheduleProServicesInvoiceResponseDataCorrectionRecordCorrectedExternalInvoiceExternalStatusQueued:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataExternalInvoice struct {
	BillingProviderType V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType `json:"billing_provider_type,required"`
	ExternalStatus      V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus      `json:"external_status"`
	InvoiceID           string                                                                             `json:"invoice_id"`
	IssuedAtTimestamp   time.Time                                                                          `json:"issued_at_timestamp" format:"date-time"`
	JSON                v1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceJSON                `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceJSON contains the
// JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataExternalInvoice]
type v1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceJSON struct {
	BillingProviderType apijson.Field
	ExternalStatus      apijson.Field
	InvoiceID           apijson.Field
	IssuedAtTimestamp   apijson.Field
	raw                 string
	ExtraFields         map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataExternalInvoice) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType string

const (
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeAwsMarketplace   V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "aws_marketplace"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeStripe           V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "stripe"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeNetsuite         V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "netsuite"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeCustom           V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "custom"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeAzureMarketplace V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "azure_marketplace"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeQuickbooksOnline V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "quickbooks_online"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeWorkday          V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "workday"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeGcpMarketplace   V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType = "gcp_marketplace"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderType) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeAwsMarketplace, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeStripe, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeNetsuite, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeCustom, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeAzureMarketplace, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeQuickbooksOnline, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeWorkday, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceBillingProviderTypeGcpMarketplace:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus string

const (
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusDraft               V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "DRAFT"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusFinalized           V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "FINALIZED"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusPaid                V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "PAID"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusUncollectible       V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "UNCOLLECTIBLE"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusVoid                V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "VOID"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusDeleted             V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "DELETED"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusPaymentFailed       V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "PAYMENT_FAILED"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusInvalidRequestError V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "INVALID_REQUEST_ERROR"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusSkipped             V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "SKIPPED"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusSent                V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "SENT"
	V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusQueued              V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus = "QUEUED"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatus) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusDraft, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusFinalized, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusPaid, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusUncollectible, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusVoid, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusDeleted, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusPaymentFailed, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusInvalidRequestError, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusSkipped, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusSent, V1ContractScheduleProServicesInvoiceResponseDataExternalInvoiceExternalStatusQueued:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustment struct {
	CreditType              V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditType `json:"credit_type,required"`
	Name                    string                                                                       `json:"name,required"`
	Total                   float64                                                                      `json:"total,required"`
	CreditGrantCustomFields map[string]string                                                            `json:"credit_grant_custom_fields"`
	CreditGrantID           string                                                                       `json:"credit_grant_id"`
	JSON                    v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentJSON        `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentJSON contains
// the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustment]
type v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentJSON struct {
	CreditType              apijson.Field
	Name                    apijson.Field
	Total                   apijson.Field
	CreditGrantCustomFields apijson.Field
	CreditGrantID           apijson.Field
	raw                     string
	ExtraFields             map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustment) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditType struct {
	ID   string                                                                           `json:"id,required" format:"uuid"`
	Name string                                                                           `json:"name,required"`
	JSON v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditTypeJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditTypeJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditType]
type v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditTypeJSON struct {
	ID          apijson.Field
	Name        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditType) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataInvoiceAdjustmentsCreditTypeJSON) RawJSON() string {
	return r.raw
}

// Only present for contract invoices with reseller royalties.
type V1ContractScheduleProServicesInvoiceResponseDataResellerRoyalty struct {
	Fraction           string                                                                      `json:"fraction,required"`
	NetsuiteResellerID string                                                                      `json:"netsuite_reseller_id,required"`
	ResellerType       V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerType `json:"reseller_type,required"`
	AwsOptions         V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptions   `json:"aws_options"`
	GcpOptions         V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptions   `json:"gcp_options"`
	JSON               v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyJSON         `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyJSON contains the
// JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataResellerRoyalty]
type v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyJSON struct {
	Fraction           apijson.Field
	NetsuiteResellerID apijson.Field
	ResellerType       apijson.Field
	AwsOptions         apijson.Field
	GcpOptions         apijson.Field
	raw                string
	ExtraFields        map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataResellerRoyalty) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerType string

const (
	V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeAws           V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerType = "AWS"
	V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeAwsProService V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerType = "AWS_PRO_SERVICE"
	V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeGcp           V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerType = "GCP"
	V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeGcpProService V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerType) IsKnown() bool {
	switch r {
	case V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeAws, V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeAwsProService, V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeGcp, V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptions struct {
	AwsAccountNumber    string                                                                        `json:"aws_account_number"`
	AwsOfferID          string                                                                        `json:"aws_offer_id"`
	AwsPayerReferenceID string                                                                        `json:"aws_payer_reference_id"`
	JSON                v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptionsJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptionsJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptions]
type v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptionsJSON struct {
	AwsAccountNumber    apijson.Field
	AwsOfferID          apijson.Field
	AwsPayerReferenceID apijson.Field
	raw                 string
	ExtraFields         map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptions) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyAwsOptionsJSON) RawJSON() string {
	return r.raw
}

type V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptions struct {
	GcpAccountID string                                                                        `json:"gcp_account_id"`
	GcpOfferID   string                                                                        `json:"gcp_offer_id"`
	JSON         v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptionsJSON `json:"-"`
}

// v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptionsJSON
// contains the JSON metadata for the struct
// [V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptions]
type v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptionsJSON struct {
	GcpAccountID apijson.Field
	GcpOfferID   apijson.Field
	raw          string
	ExtraFields  map[string]apijson.Field
}

func (r *V1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptions) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractScheduleProServicesInvoiceResponseDataResellerRoyaltyGcpOptionsJSON) RawJSON() string {
	return r.raw
}

type V1ContractUpdateEndDateResponse struct {
	Data V1ContractUpdateEndDateResponseData `json:"data,required"`
	JSON v1ContractUpdateEndDateResponseJSON `json:"-"`
}

// v1ContractUpdateEndDateResponseJSON contains the JSON metadata for the struct
// [V1ContractUpdateEndDateResponse]
type v1ContractUpdateEndDateResponseJSON struct {
	Data        apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractUpdateEndDateResponse) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractUpdateEndDateResponseJSON) RawJSON() string {
	return r.raw
}

type V1ContractUpdateEndDateResponseData struct {
	ID   string                                  `json:"id,required" format:"uuid"`
	JSON v1ContractUpdateEndDateResponseDataJSON `json:"-"`
}

// v1ContractUpdateEndDateResponseDataJSON contains the JSON metadata for the
// struct [V1ContractUpdateEndDateResponseData]
type v1ContractUpdateEndDateResponseDataJSON struct {
	ID          apijson.Field
	raw         string
	ExtraFields map[string]apijson.Field
}

func (r *V1ContractUpdateEndDateResponseData) UnmarshalJSON(data []byte) (err error) {
	return apijson.UnmarshalRoot(data, r)
}

func (r v1ContractUpdateEndDateResponseDataJSON) RawJSON() string {
	return r.raw
}

type V1ContractNewParams struct {
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// inclusive contract start time
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// The billing provider configuration associated with a contract. Provide either an
	// ID or the provider and delivery method.
	BillingProviderConfiguration param.Field[V1ContractNewParamsBillingProviderConfiguration] `json:"billing_provider_configuration"`
	Commits                      param.Field[[]V1ContractNewParamsCommit]                     `json:"commits"`
	Credits                      param.Field[[]V1ContractNewParamsCredit]                     `json:"credits"`
	CustomFields                 param.Field[map[string]string]                               `json:"custom_fields"`
	// This field's availability is dependent on your client's configuration.
	Discounts param.Field[[]V1ContractNewParamsDiscount] `json:"discounts"`
	// exclusive contract end time
	EndingBefore           param.Field[time.Time]                                 `json:"ending_before" format:"date-time"`
	HierarchyConfiguration param.Field[V1ContractNewParamsHierarchyConfiguration] `json:"hierarchy_configuration"`
	// Defaults to LOWEST_MULTIPLIER, which applies the greatest discount to list
	// prices automatically. EXPLICIT prioritization requires specifying priorities for
	// each multiplier; the one with the lowest priority value will be prioritized
	// first. If tiered overrides are used, prioritization must be explicit.
	MultiplierOverridePrioritization param.Field[V1ContractNewParamsMultiplierOverridePrioritization] `json:"multiplier_override_prioritization"`
	Name                             param.Field[string]                                              `json:"name"`
	NetPaymentTermsDays              param.Field[float64]                                             `json:"net_payment_terms_days"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID                 param.Field[string]                                                  `json:"netsuite_sales_order_id"`
	Overrides                            param.Field[[]V1ContractNewParamsOverride]                           `json:"overrides"`
	PrepaidBalanceThresholdConfiguration param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfiguration] `json:"prepaid_balance_threshold_configuration"`
	// Priority of the contract.
	Priority param.Field[float64] `json:"priority"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices param.Field[[]V1ContractNewParamsProfessionalService] `json:"professional_services"`
	// Selects the rate card linked to the specified alias as of the contract's start
	// date.
	RateCardAlias    param.Field[string]                               `json:"rate_card_alias"`
	RateCardID       param.Field[string]                               `json:"rate_card_id" format:"uuid"`
	RecurringCommits param.Field[[]V1ContractNewParamsRecurringCommit] `json:"recurring_commits"`
	RecurringCredits param.Field[[]V1ContractNewParamsRecurringCredit] `json:"recurring_credits"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties param.Field[[]V1ContractNewParamsResellerRoyalty] `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID param.Field[string]                               `json:"salesforce_opportunity_id"`
	ScheduledCharges        param.Field[[]V1ContractNewParamsScheduledCharge] `json:"scheduled_charges"`
	// Determines which scheduled and commit charges to consolidate onto the Contract's
	// usage invoice. The charge's `timestamp` must match the usage invoice's
	// `ending_before` date for consolidation to occur. This field cannot be modified
	// after a Contract has been created. If this field is omitted, charges will appear
	// on a separate invoice from usage charges.
	ScheduledChargesOnUsageInvoices param.Field[V1ContractNewParamsScheduledChargesOnUsageInvoices] `json:"scheduled_charges_on_usage_invoices"`
	SpendThresholdConfiguration     param.Field[V1ContractNewParamsSpendThresholdConfiguration]     `json:"spend_threshold_configuration"`
	// Optional list of
	// [subscriptions](https://docs.metronome.com/manage-product-access/create-subscription/)
	// to add to the contract.
	Subscriptions param.Field[[]V1ContractNewParamsSubscription] `json:"subscriptions"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue param.Field[float64]                       `json:"total_contract_value"`
	Transition         param.Field[V1ContractNewParamsTransition] `json:"transition"`
	// Prevents the creation of duplicates. If a request to create a record is made
	// with a previously used uniqueness key, a new record will not be created and the
	// request will fail with a 409 error.
	UniquenessKey          param.Field[string]                                    `json:"uniqueness_key"`
	UsageFilter            param.Field[V1ContractNewParamsUsageFilter]            `json:"usage_filter"`
	UsageStatementSchedule param.Field[V1ContractNewParamsUsageStatementSchedule] `json:"usage_statement_schedule"`
}

func (r V1ContractNewParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// The billing provider configuration associated with a contract. Provide either an
// ID or the provider and delivery method.
type V1ContractNewParamsBillingProviderConfiguration struct {
	// Do not specify if using billing_provider_configuration_id.
	BillingProvider param.Field[V1ContractNewParamsBillingProviderConfigurationBillingProvider] `json:"billing_provider"`
	// The Metronome ID of the billing provider configuration. Use when a customer has
	// multiple configurations with the same billing provider and delivery method.
	// Otherwise, specify the billing_provider and delivery_method.
	BillingProviderConfigurationID param.Field[string] `json:"billing_provider_configuration_id" format:"uuid"`
	// Do not specify if using billing_provider_configuration_id.
	DeliveryMethod param.Field[V1ContractNewParamsBillingProviderConfigurationDeliveryMethod] `json:"delivery_method"`
}

func (r V1ContractNewParamsBillingProviderConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Do not specify if using billing_provider_configuration_id.
type V1ContractNewParamsBillingProviderConfigurationBillingProvider string

const (
	V1ContractNewParamsBillingProviderConfigurationBillingProviderAwsMarketplace   V1ContractNewParamsBillingProviderConfigurationBillingProvider = "aws_marketplace"
	V1ContractNewParamsBillingProviderConfigurationBillingProviderAzureMarketplace V1ContractNewParamsBillingProviderConfigurationBillingProvider = "azure_marketplace"
	V1ContractNewParamsBillingProviderConfigurationBillingProviderGcpMarketplace   V1ContractNewParamsBillingProviderConfigurationBillingProvider = "gcp_marketplace"
	V1ContractNewParamsBillingProviderConfigurationBillingProviderStripe           V1ContractNewParamsBillingProviderConfigurationBillingProvider = "stripe"
	V1ContractNewParamsBillingProviderConfigurationBillingProviderNetsuite         V1ContractNewParamsBillingProviderConfigurationBillingProvider = "netsuite"
)

func (r V1ContractNewParamsBillingProviderConfigurationBillingProvider) IsKnown() bool {
	switch r {
	case V1ContractNewParamsBillingProviderConfigurationBillingProviderAwsMarketplace, V1ContractNewParamsBillingProviderConfigurationBillingProviderAzureMarketplace, V1ContractNewParamsBillingProviderConfigurationBillingProviderGcpMarketplace, V1ContractNewParamsBillingProviderConfigurationBillingProviderStripe, V1ContractNewParamsBillingProviderConfigurationBillingProviderNetsuite:
		return true
	}
	return false
}

// Do not specify if using billing_provider_configuration_id.
type V1ContractNewParamsBillingProviderConfigurationDeliveryMethod string

const (
	V1ContractNewParamsBillingProviderConfigurationDeliveryMethodDirectToBillingProvider V1ContractNewParamsBillingProviderConfigurationDeliveryMethod = "direct_to_billing_provider"
	V1ContractNewParamsBillingProviderConfigurationDeliveryMethodAwsSqs                  V1ContractNewParamsBillingProviderConfigurationDeliveryMethod = "aws_sqs"
	V1ContractNewParamsBillingProviderConfigurationDeliveryMethodTackle                  V1ContractNewParamsBillingProviderConfigurationDeliveryMethod = "tackle"
	V1ContractNewParamsBillingProviderConfigurationDeliveryMethodAwsSns                  V1ContractNewParamsBillingProviderConfigurationDeliveryMethod = "aws_sns"
)

func (r V1ContractNewParamsBillingProviderConfigurationDeliveryMethod) IsKnown() bool {
	switch r {
	case V1ContractNewParamsBillingProviderConfigurationDeliveryMethodDirectToBillingProvider, V1ContractNewParamsBillingProviderConfigurationDeliveryMethodAwsSqs, V1ContractNewParamsBillingProviderConfigurationDeliveryMethodTackle, V1ContractNewParamsBillingProviderConfigurationDeliveryMethodAwsSns:
		return true
	}
	return false
}

type V1ContractNewParamsCommit struct {
	ProductID param.Field[string]                         `json:"product_id,required" format:"uuid"`
	Type      param.Field[V1ContractNewParamsCommitsType] `json:"type,required"`
	// Required: Schedule for distributing the commit to the customer. For "POSTPAID"
	// commits only one schedule item is allowed and amount must match invoice_schedule
	// total.
	AccessSchedule param.Field[V1ContractNewParamsCommitsAccessSchedule] `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule and invoice_schedule instead.
	Amount param.Field[float64] `json:"amount"`
	// Which products the commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Which tags the commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags param.Field[[]string]          `json:"applicable_product_tags"`
	CustomFields          param.Field[map[string]string] `json:"custom_fields"`
	// Used only in UI/API. It is not exposed to end customers.
	Description param.Field[string] `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration param.Field[V1ContractNewParamsCommitsHierarchyConfiguration] `json:"hierarchy_configuration"`
	// Required for "POSTPAID" commits: the true up invoice will be generated at this
	// time and only one schedule item is allowed; the total must match access_schedule
	// amount. Optional for "PREPAID" commits: if not provided, this will be a
	// "complimentary" commit with no invoice.
	InvoiceSchedule param.Field[V1ContractNewParamsCommitsInvoiceSchedule] `json:"invoice_schedule"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
	// optionally payment gate this commit
	PaymentGateConfig param.Field[V1ContractNewParamsCommitsPaymentGateConfig] `json:"payment_gate_config"`
	// If multiple commits are applicable, the one with the lower priority will apply
	// first.
	Priority param.Field[float64]                            `json:"priority"`
	RateType param.Field[V1ContractNewParamsCommitsRateType] `json:"rate_type"`
	// Fraction of unused segments that will be rolled over. Must be between 0 and 1.
	RolloverFraction param.Field[float64] `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers param.Field[[]V1ContractNewParamsCommitsSpecifier] `json:"specifiers"`
	// A temporary ID for the commit that can be used to reference the commit for
	// commit specific overrides.
	TemporaryID param.Field[string] `json:"temporary_id"`
}

func (r V1ContractNewParamsCommit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsCommitsType string

const (
	V1ContractNewParamsCommitsTypePrepaid  V1ContractNewParamsCommitsType = "PREPAID"
	V1ContractNewParamsCommitsTypePostpaid V1ContractNewParamsCommitsType = "POSTPAID"
)

func (r V1ContractNewParamsCommitsType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsTypePrepaid, V1ContractNewParamsCommitsTypePostpaid:
		return true
	}
	return false
}

// Required: Schedule for distributing the commit to the customer. For "POSTPAID"
// commits only one schedule item is allowed and amount must match invoice_schedule
// total.
type V1ContractNewParamsCommitsAccessSchedule struct {
	ScheduleItems param.Field[[]V1ContractNewParamsCommitsAccessScheduleScheduleItem] `json:"schedule_items,required"`
	// Defaults to USD (cents) if not passed
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
}

func (r V1ContractNewParamsCommitsAccessSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsCommitsAccessScheduleScheduleItem struct {
	Amount param.Field[float64] `json:"amount,required"`
	// RFC 3339 timestamp (exclusive)
	EndingBefore param.Field[time.Time] `json:"ending_before,required" format:"date-time"`
	// RFC 3339 timestamp (inclusive)
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
}

func (r V1ContractNewParamsCommitsAccessScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Optional configuration for commit hierarchy access control
type V1ContractNewParamsCommitsHierarchyConfiguration struct {
	ChildAccess param.Field[V1ContractNewParamsCommitsHierarchyConfigurationChildAccessUnion] `json:"child_access,required"`
}

func (r V1ContractNewParamsCommitsHierarchyConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsCommitsHierarchyConfigurationChildAccess struct {
	Type        param.Field[V1ContractNewParamsCommitsHierarchyConfigurationChildAccessType] `json:"type,required"`
	ContractIDs param.Field[interface{}]                                                     `json:"contract_ids"`
}

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccess) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccess) implementsV1ContractNewParamsCommitsHierarchyConfigurationChildAccessUnion() {
}

// Satisfied by [V1ContractNewParamsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObject],
// [V1ContractNewParamsCommitsHierarchyConfigurationChildAccess].
type V1ContractNewParamsCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractNewParamsCommitsHierarchyConfigurationChildAccessUnion()
}

type V1ContractNewParamsCommitsHierarchyConfigurationChildAccessType struct {
	Type param.Field[V1ContractNewParamsCommitsHierarchyConfigurationChildAccessTypeType] `json:"type,required"`
}

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccessType) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccessType) implementsV1ContractNewParamsCommitsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractNewParamsCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractNewParamsCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs param.Field[[]string]                                                              `json:"contract_ids,required" format:"uuid"`
	Type        param.Field[V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObjectType] `json:"type,required"`
}

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractNewParamsCommitsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// Required for "POSTPAID" commits: the true up invoice will be generated at this
// time and only one schedule item is allowed; the total must match access_schedule
// amount. Optional for "PREPAID" commits: if not provided, this will be a
// "complimentary" commit with no invoice.
type V1ContractNewParamsCommitsInvoiceSchedule struct {
	// Defaults to USD (cents) if not passed.
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice param.Field[bool] `json:"do_not_invoice"`
	// Enter the unit price and quantity for the charge or instead only send the
	// amount. If amount is sent, the unit price is assumed to be the amount and
	// quantity is inferred to be 1.
	RecurringSchedule param.Field[V1ContractNewParamsCommitsInvoiceScheduleRecurringSchedule] `json:"recurring_schedule"`
	// Either provide amount or provide both unit_price and quantity.
	ScheduleItems param.Field[[]V1ContractNewParamsCommitsInvoiceScheduleScheduleItem] `json:"schedule_items"`
}

func (r V1ContractNewParamsCommitsInvoiceSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Enter the unit price and quantity for the charge or instead only send the
// amount. If amount is sent, the unit price is assumed to be the amount and
// quantity is inferred to be 1.
type V1ContractNewParamsCommitsInvoiceScheduleRecurringSchedule struct {
	AmountDistribution param.Field[V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution] `json:"amount_distribution,required"`
	// RFC 3339 timestamp (exclusive).
	EndingBefore param.Field[time.Time]                                                           `json:"ending_before,required" format:"date-time"`
	Frequency    param.Field[V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequency] `json:"frequency,required"`
	// RFC 3339 timestamp (inclusive).
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractNewParamsCommitsInvoiceScheduleRecurringSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution string

const (
	V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDivided        V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution = "DIVIDED"
	V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDividedRounded V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution = "DIVIDED_ROUNDED"
	V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionEach           V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution = "EACH"
)

func (r V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDivided, V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDividedRounded, V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionEach:
		return true
	}
	return false
}

type V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequency string

const (
	V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencyMonthly    V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "MONTHLY"
	V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencyQuarterly  V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "QUARTERLY"
	V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencySemiAnnual V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "SEMI_ANNUAL"
	V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencyAnnual     V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "ANNUAL"
)

func (r V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencyMonthly, V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencyQuarterly, V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencySemiAnnual, V1ContractNewParamsCommitsInvoiceScheduleRecurringScheduleFrequencyAnnual:
		return true
	}
	return false
}

type V1ContractNewParamsCommitsInvoiceScheduleScheduleItem struct {
	// timestamp of the scheduled event
	Timestamp param.Field[time.Time] `json:"timestamp,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractNewParamsCommitsInvoiceScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// optionally payment gate this commit
type V1ContractNewParamsCommitsPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType param.Field[V1ContractNewParamsCommitsPaymentGateConfigPaymentGateType] `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig param.Field[V1ContractNewParamsCommitsPaymentGateConfigPrecalculatedTaxConfig] `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig param.Field[V1ContractNewParamsCommitsPaymentGateConfigStripeConfig] `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType param.Field[V1ContractNewParamsCommitsPaymentGateConfigTaxType] `json:"tax_type"`
}

func (r V1ContractNewParamsCommitsPaymentGateConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractNewParamsCommitsPaymentGateConfigPaymentGateType string

const (
	V1ContractNewParamsCommitsPaymentGateConfigPaymentGateTypeNone     V1ContractNewParamsCommitsPaymentGateConfigPaymentGateType = "NONE"
	V1ContractNewParamsCommitsPaymentGateConfigPaymentGateTypeStripe   V1ContractNewParamsCommitsPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractNewParamsCommitsPaymentGateConfigPaymentGateTypeExternal V1ContractNewParamsCommitsPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractNewParamsCommitsPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsPaymentGateConfigPaymentGateTypeNone, V1ContractNewParamsCommitsPaymentGateConfigPaymentGateTypeStripe, V1ContractNewParamsCommitsPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractNewParamsCommitsPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount param.Field[float64] `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName param.Field[string] `json:"tax_name"`
}

func (r V1ContractNewParamsCommitsPaymentGateConfigPrecalculatedTaxConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractNewParamsCommitsPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType param.Field[V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentType] `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata param.Field[map[string]string] `json:"invoice_metadata"`
	// If true, the payment will be made assuming the customer is present (i.e. on
	// session).
	//
	// If false, the payment will be made assuming the customer is not present (i.e.
	// off session). For cardholders from a country with an e-mandate requirement (e.g.
	// India), the payment may be declined.
	//
	// If left blank, will default to false.
	OnSessionPayment param.Field[bool] `json:"on_session_payment"`
}

func (r V1ContractNewParamsCommitsPaymentGateConfigStripeConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// If left blank, will default to INVOICE
type V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractNewParamsCommitsPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractNewParamsCommitsPaymentGateConfigTaxType string

const (
	V1ContractNewParamsCommitsPaymentGateConfigTaxTypeNone          V1ContractNewParamsCommitsPaymentGateConfigTaxType = "NONE"
	V1ContractNewParamsCommitsPaymentGateConfigTaxTypeStripe        V1ContractNewParamsCommitsPaymentGateConfigTaxType = "STRIPE"
	V1ContractNewParamsCommitsPaymentGateConfigTaxTypeAnrok         V1ContractNewParamsCommitsPaymentGateConfigTaxType = "ANROK"
	V1ContractNewParamsCommitsPaymentGateConfigTaxTypePrecalculated V1ContractNewParamsCommitsPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractNewParamsCommitsPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsPaymentGateConfigTaxTypeNone, V1ContractNewParamsCommitsPaymentGateConfigTaxTypeStripe, V1ContractNewParamsCommitsPaymentGateConfigTaxTypeAnrok, V1ContractNewParamsCommitsPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractNewParamsCommitsRateType string

const (
	V1ContractNewParamsCommitsRateTypeCommitRate V1ContractNewParamsCommitsRateType = "COMMIT_RATE"
	V1ContractNewParamsCommitsRateTypeListRate   V1ContractNewParamsCommitsRateType = "LIST_RATE"
)

func (r V1ContractNewParamsCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCommitsRateTypeCommitRate, V1ContractNewParamsCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractNewParamsCommitsSpecifier struct {
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractNewParamsCommitsSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsCredit struct {
	// Schedule for distributing the credit to the customer.
	AccessSchedule param.Field[V1ContractNewParamsCreditsAccessSchedule] `json:"access_schedule,required"`
	ProductID      param.Field[string]                                   `json:"product_id,required" format:"uuid"`
	// Which products the credit applies to. If both applicable_product_ids and
	// applicable_product_tags are not provided, the credit applies to all products.
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Which tags the credit applies to. If both applicable_product_ids and
	// applicable_product_tags are not provided, the credit applies to all products.
	ApplicableProductTags param.Field[[]string]          `json:"applicable_product_tags"`
	CustomFields          param.Field[map[string]string] `json:"custom_fields"`
	// Used only in UI/API. It is not exposed to end customers.
	Description param.Field[string] `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration param.Field[V1ContractNewParamsCreditsHierarchyConfiguration] `json:"hierarchy_configuration"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
	// If multiple credits are applicable, the one with the lower priority will apply
	// first.
	Priority param.Field[float64]                            `json:"priority"`
	RateType param.Field[V1ContractNewParamsCreditsRateType] `json:"rate_type"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers param.Field[[]V1ContractNewParamsCreditsSpecifier] `json:"specifiers"`
}

func (r V1ContractNewParamsCredit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Schedule for distributing the credit to the customer.
type V1ContractNewParamsCreditsAccessSchedule struct {
	ScheduleItems param.Field[[]V1ContractNewParamsCreditsAccessScheduleScheduleItem] `json:"schedule_items,required"`
	// Defaults to USD (cents) if not passed
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
}

func (r V1ContractNewParamsCreditsAccessSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsCreditsAccessScheduleScheduleItem struct {
	Amount param.Field[float64] `json:"amount,required"`
	// RFC 3339 timestamp (exclusive)
	EndingBefore param.Field[time.Time] `json:"ending_before,required" format:"date-time"`
	// RFC 3339 timestamp (inclusive)
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
}

func (r V1ContractNewParamsCreditsAccessScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Optional configuration for credit hierarchy access control
type V1ContractNewParamsCreditsHierarchyConfiguration struct {
	ChildAccess param.Field[V1ContractNewParamsCreditsHierarchyConfigurationChildAccessUnion] `json:"child_access,required"`
}

func (r V1ContractNewParamsCreditsHierarchyConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsCreditsHierarchyConfigurationChildAccess struct {
	Type        param.Field[V1ContractNewParamsCreditsHierarchyConfigurationChildAccessType] `json:"type,required"`
	ContractIDs param.Field[interface{}]                                                     `json:"contract_ids"`
}

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccess) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccess) implementsV1ContractNewParamsCreditsHierarchyConfigurationChildAccessUnion() {
}

// Satisfied by [V1ContractNewParamsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObject],
// [V1ContractNewParamsCreditsHierarchyConfigurationChildAccess].
type V1ContractNewParamsCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractNewParamsCreditsHierarchyConfigurationChildAccessUnion()
}

type V1ContractNewParamsCreditsHierarchyConfigurationChildAccessType struct {
	Type param.Field[V1ContractNewParamsCreditsHierarchyConfigurationChildAccessTypeType] `json:"type,required"`
}

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccessType) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccessType) implementsV1ContractNewParamsCreditsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractNewParamsCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractNewParamsCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs param.Field[[]string]                                                              `json:"contract_ids,required" format:"uuid"`
	Type        param.Field[V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObjectType] `json:"type,required"`
}

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractNewParamsCreditsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractNewParamsCreditsRateType string

const (
	V1ContractNewParamsCreditsRateTypeCommitRate V1ContractNewParamsCreditsRateType = "COMMIT_RATE"
	V1ContractNewParamsCreditsRateTypeListRate   V1ContractNewParamsCreditsRateType = "LIST_RATE"
)

func (r V1ContractNewParamsCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsCreditsRateTypeCommitRate, V1ContractNewParamsCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractNewParamsCreditsSpecifier struct {
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractNewParamsCreditsSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsDiscount struct {
	ProductID param.Field[string] `json:"product_id,required" format:"uuid"`
	// Must provide either schedule_items or recurring_schedule.
	Schedule     param.Field[V1ContractNewParamsDiscountsSchedule] `json:"schedule,required"`
	CustomFields param.Field[map[string]string]                    `json:"custom_fields"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
}

func (r V1ContractNewParamsDiscount) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Must provide either schedule_items or recurring_schedule.
type V1ContractNewParamsDiscountsSchedule struct {
	// Defaults to USD (cents) if not passed.
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice param.Field[bool] `json:"do_not_invoice"`
	// Enter the unit price and quantity for the charge or instead only send the
	// amount. If amount is sent, the unit price is assumed to be the amount and
	// quantity is inferred to be 1.
	RecurringSchedule param.Field[V1ContractNewParamsDiscountsScheduleRecurringSchedule] `json:"recurring_schedule"`
	// Either provide amount or provide both unit_price and quantity.
	ScheduleItems param.Field[[]V1ContractNewParamsDiscountsScheduleScheduleItem] `json:"schedule_items"`
}

func (r V1ContractNewParamsDiscountsSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Enter the unit price and quantity for the charge or instead only send the
// amount. If amount is sent, the unit price is assumed to be the amount and
// quantity is inferred to be 1.
type V1ContractNewParamsDiscountsScheduleRecurringSchedule struct {
	AmountDistribution param.Field[V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistribution] `json:"amount_distribution,required"`
	// RFC 3339 timestamp (exclusive).
	EndingBefore param.Field[time.Time]                                                      `json:"ending_before,required" format:"date-time"`
	Frequency    param.Field[V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequency] `json:"frequency,required"`
	// RFC 3339 timestamp (inclusive).
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractNewParamsDiscountsScheduleRecurringSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistribution string

const (
	V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistributionDivided        V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistribution = "DIVIDED"
	V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistributionDividedRounded V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistribution = "DIVIDED_ROUNDED"
	V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistributionEach           V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistribution = "EACH"
)

func (r V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistribution) IsKnown() bool {
	switch r {
	case V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistributionDivided, V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistributionDividedRounded, V1ContractNewParamsDiscountsScheduleRecurringScheduleAmountDistributionEach:
		return true
	}
	return false
}

type V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequency string

const (
	V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencyMonthly    V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequency = "MONTHLY"
	V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencyQuarterly  V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequency = "QUARTERLY"
	V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencySemiAnnual V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequency = "SEMI_ANNUAL"
	V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencyAnnual     V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequency = "ANNUAL"
)

func (r V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencyMonthly, V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencyQuarterly, V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencySemiAnnual, V1ContractNewParamsDiscountsScheduleRecurringScheduleFrequencyAnnual:
		return true
	}
	return false
}

type V1ContractNewParamsDiscountsScheduleScheduleItem struct {
	// timestamp of the scheduled event
	Timestamp param.Field[time.Time] `json:"timestamp,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractNewParamsDiscountsScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsHierarchyConfiguration struct {
	Parent param.Field[V1ContractNewParamsHierarchyConfigurationParent] `json:"parent,required"`
}

func (r V1ContractNewParamsHierarchyConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsHierarchyConfigurationParent struct {
	ContractID param.Field[string] `json:"contract_id,required" format:"uuid"`
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
}

func (r V1ContractNewParamsHierarchyConfigurationParent) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Defaults to LOWEST_MULTIPLIER, which applies the greatest discount to list
// prices automatically. EXPLICIT prioritization requires specifying priorities for
// each multiplier; the one with the lowest priority value will be prioritized
// first. If tiered overrides are used, prioritization must be explicit.
type V1ContractNewParamsMultiplierOverridePrioritization string

const (
	V1ContractNewParamsMultiplierOverridePrioritizationLowestMultiplier V1ContractNewParamsMultiplierOverridePrioritization = "LOWEST_MULTIPLIER"
	V1ContractNewParamsMultiplierOverridePrioritizationExplicit         V1ContractNewParamsMultiplierOverridePrioritization = "EXPLICIT"
)

func (r V1ContractNewParamsMultiplierOverridePrioritization) IsKnown() bool {
	switch r {
	case V1ContractNewParamsMultiplierOverridePrioritizationLowestMultiplier, V1ContractNewParamsMultiplierOverridePrioritizationExplicit:
		return true
	}
	return false
}

type V1ContractNewParamsOverride struct {
	// RFC 3339 timestamp indicating when the override will start applying (inclusive)
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// tags identifying products whose rates are being overridden. Cannot be used in
	// conjunction with override_specifiers.
	ApplicableProductTags param.Field[[]string] `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the override will stop applying (exclusive)
	EndingBefore param.Field[time.Time] `json:"ending_before" format:"date-time"`
	Entitled     param.Field[bool]      `json:"entitled"`
	// Indicates whether the override should only apply to commits. Defaults to
	// `false`. If `true`, you can specify relevant commits in `override_specifiers` by
	// passing `commit_ids`. if you do not specify `commit_ids`, then the override will
	// apply when consuming any prepaid or postpaid commit.
	IsCommitSpecific param.Field[bool] `json:"is_commit_specific"`
	// Required for MULTIPLIER type. Must be >=0.
	Multiplier param.Field[float64] `json:"multiplier"`
	// Cannot be used in conjunction with product_id or applicable_product_tags. If
	// provided, the override will apply to all products with the specified specifiers.
	OverrideSpecifiers param.Field[[]V1ContractNewParamsOverridesOverrideSpecifier] `json:"override_specifiers"`
	// Required for OVERWRITE type.
	OverwriteRate param.Field[V1ContractNewParamsOverridesOverwriteRate] `json:"overwrite_rate"`
	// Required for EXPLICIT multiplier prioritization scheme and all TIERED overrides.
	// Under EXPLICIT prioritization, overwrites are prioritized first, and then tiered
	// and multiplier overrides are prioritized by their priority value (lowest first).
	// Must be > 0.
	Priority param.Field[float64] `json:"priority"`
	// ID of the product whose rate is being overridden. Cannot be used in conjunction
	// with override_specifiers.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// Indicates whether the override applies to commit rates or list rates. Can only
	// be used for overrides that have `is_commit_specific` set to `true`. Defaults to
	// `"LIST_RATE"`.
	Target param.Field[V1ContractNewParamsOverridesTarget] `json:"target"`
	// Required for TIERED type. Must have at least one tier.
	Tiers param.Field[[]V1ContractNewParamsOverridesTier] `json:"tiers"`
	// Overwrites are prioritized over multipliers and tiered overrides.
	Type param.Field[V1ContractNewParamsOverridesType] `json:"type"`
}

func (r V1ContractNewParamsOverride) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsOverridesOverrideSpecifier struct {
	BillingFrequency param.Field[V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequency] `json:"billing_frequency"`
	// Can only be used for commit specific overrides. Must be used in conjunction with
	// one of product_id, product_tags, pricing_group_values, or
	// presentation_group_values. If provided, the override will only apply to the
	// specified commits. If not provided, the override will apply to all commits.
	CommitIDs param.Field[[]string] `json:"commit_ids"`
	// A map of group names to values. The override will only apply to line items with
	// the specified presentation group values.
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	// A map of pricing group names to values. The override will only apply to products
	// with the specified pricing group values.
	PricingGroupValues param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the override will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the override will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
	// Can only be used for commit specific overrides. Must be used in conjunction with
	// one of product_id, product_tags, pricing_group_values, or
	// presentation_group_values. If provided, the override will only apply to commits
	// created by the specified recurring commit ids.
	RecurringCommitIDs param.Field[[]string] `json:"recurring_commit_ids"`
	// Can only be used for commit specific overrides. Must be used in conjunction with
	// one of product_id, product_tags, pricing_group_values, or
	// presentation_group_values. If provided, the override will only apply to credits
	// created by the specified recurring credit ids.
	RecurringCreditIDs param.Field[[]string] `json:"recurring_credit_ids"`
}

func (r V1ContractNewParamsOverridesOverrideSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractNewParamsOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

// Required for OVERWRITE type.
type V1ContractNewParamsOverridesOverwriteRate struct {
	RateType     param.Field[V1ContractNewParamsOverridesOverwriteRateRateType] `json:"rate_type,required"`
	CreditTypeID param.Field[string]                                            `json:"credit_type_id" format:"uuid"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate param.Field[map[string]interface{}] `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated param.Field[bool] `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price param.Field[float64] `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity param.Field[float64] `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers param.Field[[]V1ContractNewParamsOverridesOverwriteRateTier] `json:"tiers"`
}

func (r V1ContractNewParamsOverridesOverwriteRate) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsOverridesOverwriteRateRateType string

const (
	V1ContractNewParamsOverridesOverwriteRateRateTypeFlat         V1ContractNewParamsOverridesOverwriteRateRateType = "FLAT"
	V1ContractNewParamsOverridesOverwriteRateRateTypePercentage   V1ContractNewParamsOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractNewParamsOverridesOverwriteRateRateTypeSubscription V1ContractNewParamsOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractNewParamsOverridesOverwriteRateRateTypeTiered       V1ContractNewParamsOverridesOverwriteRateRateType = "TIERED"
	V1ContractNewParamsOverridesOverwriteRateRateTypeCustom       V1ContractNewParamsOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractNewParamsOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsOverridesOverwriteRateRateTypeFlat, V1ContractNewParamsOverridesOverwriteRateRateTypePercentage, V1ContractNewParamsOverridesOverwriteRateRateTypeSubscription, V1ContractNewParamsOverridesOverwriteRateRateTypeTiered, V1ContractNewParamsOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractNewParamsOverridesOverwriteRateTier struct {
	Price param.Field[float64] `json:"price,required"`
	Size  param.Field[float64] `json:"size"`
}

func (r V1ContractNewParamsOverridesOverwriteRateTier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Indicates whether the override applies to commit rates or list rates. Can only
// be used for overrides that have `is_commit_specific` set to `true`. Defaults to
// `"LIST_RATE"`.
type V1ContractNewParamsOverridesTarget string

const (
	V1ContractNewParamsOverridesTargetCommitRate V1ContractNewParamsOverridesTarget = "COMMIT_RATE"
	V1ContractNewParamsOverridesTargetListRate   V1ContractNewParamsOverridesTarget = "LIST_RATE"
)

func (r V1ContractNewParamsOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractNewParamsOverridesTargetCommitRate, V1ContractNewParamsOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractNewParamsOverridesTier struct {
	Multiplier param.Field[float64] `json:"multiplier,required"`
	Size       param.Field[float64] `json:"size"`
}

func (r V1ContractNewParamsOverridesTier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Overwrites are prioritized over multipliers and tiered overrides.
type V1ContractNewParamsOverridesType string

const (
	V1ContractNewParamsOverridesTypeOverwrite  V1ContractNewParamsOverridesType = "OVERWRITE"
	V1ContractNewParamsOverridesTypeMultiplier V1ContractNewParamsOverridesType = "MULTIPLIER"
	V1ContractNewParamsOverridesTypeTiered     V1ContractNewParamsOverridesType = "TIERED"
)

func (r V1ContractNewParamsOverridesType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsOverridesTypeOverwrite, V1ContractNewParamsOverridesTypeMultiplier, V1ContractNewParamsOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractNewParamsPrepaidBalanceThresholdConfiguration struct {
	Commit param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfigurationCommit] `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         param.Field[bool]                                                                     `json:"is_enabled,required"`
	PaymentGateConfig param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfig] `json:"payment_gate_config,required"`
	// Specify the amount the balance should be recharged to.
	RechargeToAmount param.Field[float64] `json:"recharge_to_amount,required"`
	// Specify the threshold amount for the contract. Each time the contract's prepaid
	// balance lowers to this amount, a threshold charge will be initiated.
	ThresholdAmount param.Field[float64] `json:"threshold_amount,required"`
	// If provided, the threshold, recharge-to amount, and the resulting threshold
	// commit amount will be in terms of this credit type instead of the fiat currency.
	CustomCreditTypeID param.Field[string] `json:"custom_credit_type_id" format:"uuid"`
}

func (r V1ContractNewParamsPrepaidBalanceThresholdConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsPrepaidBalanceThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID param.Field[string] `json:"product_id,required"`
	// Which products the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Which tags the threshold commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags param.Field[[]string] `json:"applicable_product_tags"`
	Description           param.Field[string]   `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name param.Field[string] `json:"name"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers param.Field[[]V1ContractNewParamsPrepaidBalanceThresholdConfigurationCommitSpecifier] `json:"specifiers"`
}

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationCommit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsPrepaidBalanceThresholdConfigurationCommitSpecifier struct {
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationCommitSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType] `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig] `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig] `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType] `json:"tax_type"`
}

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount param.Field[float64] `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName param.Field[string] `json:"tax_name"`
}

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType param.Field[V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType] `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata param.Field[map[string]string] `json:"invoice_metadata"`
}

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// If left blank, will default to INVOICE
type V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractNewParamsPrepaidBalanceThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractNewParamsProfessionalService struct {
	// Maximum amount for the term.
	MaxAmount param.Field[float64] `json:"max_amount,required"`
	ProductID param.Field[string]  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity param.Field[float64] `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    param.Field[float64]           `json:"unit_price,required"`
	CustomFields param.Field[map[string]string] `json:"custom_fields"`
	Description  param.Field[string]            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
}

func (r V1ContractNewParamsProfessionalService) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsRecurringCommit struct {
	// The amount of commit to grant.
	AccessAmount param.Field[V1ContractNewParamsRecurringCommitsAccessAmount] `json:"access_amount,required"`
	// Defines the length of the access schedule for each created commit/credit. The
	// value represents the number of units. Unit defaults to "PERIODS", where the
	// length of a period is determined by the recurrence_frequency.
	CommitDuration param.Field[V1ContractNewParamsRecurringCommitsCommitDuration] `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority  param.Field[float64] `json:"priority,required"`
	ProductID param.Field[string]  `json:"product_id,required" format:"uuid"`
	// determines the start time for the first commit
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags param.Field[[]string] `json:"applicable_product_tags"`
	// Will be passed down to the individual commits
	Description param.Field[string] `json:"description"`
	// Determines when the contract will stop creating recurring commits. optional
	EndingBefore param.Field[time.Time] `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration param.Field[V1ContractNewParamsRecurringCommitsHierarchyConfiguration] `json:"hierarchy_configuration"`
	// The amount the customer should be billed for the commit. Not required.
	InvoiceAmount param.Field[V1ContractNewParamsRecurringCommitsInvoiceAmount] `json:"invoice_amount"`
	// displayed on invoices. will be passed through to the individual commits
	Name param.Field[string] `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration param.Field[V1ContractNewParamsRecurringCommitsProration] `json:"proration"`
	// Whether the created commits will use the commit rate or list rate
	RateType param.Field[V1ContractNewParamsRecurringCommitsRateType] `json:"rate_type"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency param.Field[V1ContractNewParamsRecurringCommitsRecurrenceFrequency] `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction param.Field[float64] `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers param.Field[[]V1ContractNewParamsRecurringCommitsSpecifier] `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig param.Field[V1ContractNewParamsRecurringCommitsSubscriptionConfig] `json:"subscription_config"`
	// A temporary ID that can be used to reference the recurring commit for commit
	// specific overrides.
	TemporaryID param.Field[string] `json:"temporary_id"`
}

func (r V1ContractNewParamsRecurringCommit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// The amount of commit to grant.
type V1ContractNewParamsRecurringCommitsAccessAmount struct {
	CreditTypeID param.Field[string]  `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    param.Field[float64] `json:"unit_price,required"`
	// This field is required unless a subscription is attached via
	// `subscription_config`.
	Quantity param.Field[float64] `json:"quantity"`
}

func (r V1ContractNewParamsRecurringCommitsAccessAmount) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Defines the length of the access schedule for each created commit/credit. The
// value represents the number of units. Unit defaults to "PERIODS", where the
// length of a period is determined by the recurrence_frequency.
type V1ContractNewParamsRecurringCommitsCommitDuration struct {
	Value param.Field[float64]                                               `json:"value,required"`
	Unit  param.Field[V1ContractNewParamsRecurringCommitsCommitDurationUnit] `json:"unit"`
}

func (r V1ContractNewParamsRecurringCommitsCommitDuration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsRecurringCommitsCommitDurationUnit string

const (
	V1ContractNewParamsRecurringCommitsCommitDurationUnitPeriods V1ContractNewParamsRecurringCommitsCommitDurationUnit = "PERIODS"
)

func (r V1ContractNewParamsRecurringCommitsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCommitsCommitDurationUnitPeriods:
		return true
	}
	return false
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractNewParamsRecurringCommitsHierarchyConfiguration struct {
	ChildAccess param.Field[V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessUnion] `json:"child_access,required"`
}

func (r V1ContractNewParamsRecurringCommitsHierarchyConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccess struct {
	Type        param.Field[V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessType] `json:"type,required"`
	ContractIDs param.Field[interface{}]                                                              `json:"contract_ids"`
}

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccess) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccess) implementsV1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessUnion() {
}

// Satisfied by
// [V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObject],
// [V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccess].
type V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessUnion()
}

type V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessType struct {
	Type param.Field[V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessTypeType] `json:"type,required"`
}

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessType) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessType) implementsV1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs param.Field[[]string]                                                                       `json:"contract_ids,required" format:"uuid"`
	Type        param.Field[V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObjectType] `json:"type,required"`
}

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// The amount the customer should be billed for the commit. Not required.
type V1ContractNewParamsRecurringCommitsInvoiceAmount struct {
	CreditTypeID param.Field[string]  `json:"credit_type_id,required" format:"uuid"`
	Quantity     param.Field[float64] `json:"quantity,required"`
	UnitPrice    param.Field[float64] `json:"unit_price,required"`
}

func (r V1ContractNewParamsRecurringCommitsInvoiceAmount) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractNewParamsRecurringCommitsProration string

const (
	V1ContractNewParamsRecurringCommitsProrationNone         V1ContractNewParamsRecurringCommitsProration = "NONE"
	V1ContractNewParamsRecurringCommitsProrationFirst        V1ContractNewParamsRecurringCommitsProration = "FIRST"
	V1ContractNewParamsRecurringCommitsProrationLast         V1ContractNewParamsRecurringCommitsProration = "LAST"
	V1ContractNewParamsRecurringCommitsProrationFirstAndLast V1ContractNewParamsRecurringCommitsProration = "FIRST_AND_LAST"
)

func (r V1ContractNewParamsRecurringCommitsProration) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCommitsProrationNone, V1ContractNewParamsRecurringCommitsProrationFirst, V1ContractNewParamsRecurringCommitsProrationLast, V1ContractNewParamsRecurringCommitsProrationFirstAndLast:
		return true
	}
	return false
}

// Whether the created commits will use the commit rate or list rate
type V1ContractNewParamsRecurringCommitsRateType string

const (
	V1ContractNewParamsRecurringCommitsRateTypeCommitRate V1ContractNewParamsRecurringCommitsRateType = "COMMIT_RATE"
	V1ContractNewParamsRecurringCommitsRateTypeListRate   V1ContractNewParamsRecurringCommitsRateType = "LIST_RATE"
)

func (r V1ContractNewParamsRecurringCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCommitsRateTypeCommitRate, V1ContractNewParamsRecurringCommitsRateTypeListRate:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractNewParamsRecurringCommitsRecurrenceFrequency string

const (
	V1ContractNewParamsRecurringCommitsRecurrenceFrequencyMonthly   V1ContractNewParamsRecurringCommitsRecurrenceFrequency = "MONTHLY"
	V1ContractNewParamsRecurringCommitsRecurrenceFrequencyQuarterly V1ContractNewParamsRecurringCommitsRecurrenceFrequency = "QUARTERLY"
	V1ContractNewParamsRecurringCommitsRecurrenceFrequencyAnnual    V1ContractNewParamsRecurringCommitsRecurrenceFrequency = "ANNUAL"
	V1ContractNewParamsRecurringCommitsRecurrenceFrequencyWeekly    V1ContractNewParamsRecurringCommitsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractNewParamsRecurringCommitsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCommitsRecurrenceFrequencyMonthly, V1ContractNewParamsRecurringCommitsRecurrenceFrequencyQuarterly, V1ContractNewParamsRecurringCommitsRecurrenceFrequencyAnnual, V1ContractNewParamsRecurringCommitsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractNewParamsRecurringCommitsSpecifier struct {
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractNewParamsRecurringCommitsSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Attach a subscription to the recurring commit/credit.
type V1ContractNewParamsRecurringCommitsSubscriptionConfig struct {
	ApplySeatIncreaseConfig param.Field[V1ContractNewParamsRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig] `json:"apply_seat_increase_config,required"`
	// ID of the subscription to configure on the recurring commit/credit.
	SubscriptionID param.Field[string] `json:"subscription_id,required"`
	// If set to POOLED, allocation added per seat is pooled across the account.
	Allocation param.Field[V1ContractNewParamsRecurringCommitsSubscriptionConfigAllocation] `json:"allocation"`
}

func (r V1ContractNewParamsRecurringCommitsSubscriptionConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated param.Field[bool] `json:"is_prorated,required"`
}

func (r V1ContractNewParamsRecurringCommitsSubscriptionConfigApplySeatIncreaseConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// If set to POOLED, allocation added per seat is pooled across the account.
type V1ContractNewParamsRecurringCommitsSubscriptionConfigAllocation string

const (
	V1ContractNewParamsRecurringCommitsSubscriptionConfigAllocationPooled V1ContractNewParamsRecurringCommitsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractNewParamsRecurringCommitsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCommitsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractNewParamsRecurringCredit struct {
	// The amount of commit to grant.
	AccessAmount param.Field[V1ContractNewParamsRecurringCreditsAccessAmount] `json:"access_amount,required"`
	// Defines the length of the access schedule for each created commit/credit. The
	// value represents the number of units. Unit defaults to "PERIODS", where the
	// length of a period is determined by the recurrence_frequency.
	CommitDuration param.Field[V1ContractNewParamsRecurringCreditsCommitDuration] `json:"commit_duration,required"`
	// Will be passed down to the individual commits
	Priority  param.Field[float64] `json:"priority,required"`
	ProductID param.Field[string]  `json:"product_id,required" format:"uuid"`
	// determines the start time for the first commit
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Will be passed down to the individual commits
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Will be passed down to the individual commits
	ApplicableProductTags param.Field[[]string] `json:"applicable_product_tags"`
	// Will be passed down to the individual commits
	Description param.Field[string] `json:"description"`
	// Determines when the contract will stop creating recurring commits. optional
	EndingBefore param.Field[time.Time] `json:"ending_before" format:"date-time"`
	// Optional configuration for recurring commit/credit hierarchy access control
	HierarchyConfiguration param.Field[V1ContractNewParamsRecurringCreditsHierarchyConfiguration] `json:"hierarchy_configuration"`
	// displayed on invoices. will be passed through to the individual commits
	Name param.Field[string] `json:"name"`
	// Will be passed down to the individual commits
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
	// Determines whether the first and last commit will be prorated. If not provided,
	// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
	Proration param.Field[V1ContractNewParamsRecurringCreditsProration] `json:"proration"`
	// Whether the created commits will use the commit rate or list rate
	RateType param.Field[V1ContractNewParamsRecurringCreditsRateType] `json:"rate_type"`
	// The frequency at which the recurring commits will be created. If not provided: -
	// The commits will be created on the usage invoice frequency. If provided: - The
	// period defined in the duration will correspond to this frequency. - Commits will
	// be created aligned with the recurring commit's starting_at rather than the usage
	// invoice dates.
	RecurrenceFrequency param.Field[V1ContractNewParamsRecurringCreditsRecurrenceFrequency] `json:"recurrence_frequency"`
	// Will be passed down to the individual commits. This controls how much of an
	// individual unexpired commit will roll over upon contract transition. Must be
	// between 0 and 1.
	RolloverFraction param.Field[float64] `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers param.Field[[]V1ContractNewParamsRecurringCreditsSpecifier] `json:"specifiers"`
	// Attach a subscription to the recurring commit/credit.
	SubscriptionConfig param.Field[V1ContractNewParamsRecurringCreditsSubscriptionConfig] `json:"subscription_config"`
	// A temporary ID that can be used to reference the recurring commit for commit
	// specific overrides.
	TemporaryID param.Field[string] `json:"temporary_id"`
}

func (r V1ContractNewParamsRecurringCredit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// The amount of commit to grant.
type V1ContractNewParamsRecurringCreditsAccessAmount struct {
	CreditTypeID param.Field[string]  `json:"credit_type_id,required" format:"uuid"`
	UnitPrice    param.Field[float64] `json:"unit_price,required"`
	// This field is required unless a subscription is attached via
	// `subscription_config`.
	Quantity param.Field[float64] `json:"quantity"`
}

func (r V1ContractNewParamsRecurringCreditsAccessAmount) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Defines the length of the access schedule for each created commit/credit. The
// value represents the number of units. Unit defaults to "PERIODS", where the
// length of a period is determined by the recurrence_frequency.
type V1ContractNewParamsRecurringCreditsCommitDuration struct {
	Value param.Field[float64]                                               `json:"value,required"`
	Unit  param.Field[V1ContractNewParamsRecurringCreditsCommitDurationUnit] `json:"unit"`
}

func (r V1ContractNewParamsRecurringCreditsCommitDuration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsRecurringCreditsCommitDurationUnit string

const (
	V1ContractNewParamsRecurringCreditsCommitDurationUnitPeriods V1ContractNewParamsRecurringCreditsCommitDurationUnit = "PERIODS"
)

func (r V1ContractNewParamsRecurringCreditsCommitDurationUnit) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCreditsCommitDurationUnitPeriods:
		return true
	}
	return false
}

// Optional configuration for recurring commit/credit hierarchy access control
type V1ContractNewParamsRecurringCreditsHierarchyConfiguration struct {
	ChildAccess param.Field[V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessUnion] `json:"child_access,required"`
}

func (r V1ContractNewParamsRecurringCreditsHierarchyConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccess struct {
	Type        param.Field[V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessType] `json:"type,required"`
	ContractIDs param.Field[interface{}]                                                              `json:"contract_ids"`
}

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccess) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccess) implementsV1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessUnion() {
}

// Satisfied by
// [V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessType],
// [V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObject],
// [V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccess].
type V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessUnion()
}

type V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessType struct {
	Type param.Field[V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessTypeType] `json:"type,required"`
}

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessType) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessType) implementsV1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs param.Field[[]string]                                                                       `json:"contract_ids,required" format:"uuid"`
	Type        param.Field[V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObjectType] `json:"type,required"`
}

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// Determines whether the first and last commit will be prorated. If not provided,
// the default is FIRST_AND_LAST (i.e. prorate both the first and last commits).
type V1ContractNewParamsRecurringCreditsProration string

const (
	V1ContractNewParamsRecurringCreditsProrationNone         V1ContractNewParamsRecurringCreditsProration = "NONE"
	V1ContractNewParamsRecurringCreditsProrationFirst        V1ContractNewParamsRecurringCreditsProration = "FIRST"
	V1ContractNewParamsRecurringCreditsProrationLast         V1ContractNewParamsRecurringCreditsProration = "LAST"
	V1ContractNewParamsRecurringCreditsProrationFirstAndLast V1ContractNewParamsRecurringCreditsProration = "FIRST_AND_LAST"
)

func (r V1ContractNewParamsRecurringCreditsProration) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCreditsProrationNone, V1ContractNewParamsRecurringCreditsProrationFirst, V1ContractNewParamsRecurringCreditsProrationLast, V1ContractNewParamsRecurringCreditsProrationFirstAndLast:
		return true
	}
	return false
}

// Whether the created commits will use the commit rate or list rate
type V1ContractNewParamsRecurringCreditsRateType string

const (
	V1ContractNewParamsRecurringCreditsRateTypeCommitRate V1ContractNewParamsRecurringCreditsRateType = "COMMIT_RATE"
	V1ContractNewParamsRecurringCreditsRateTypeListRate   V1ContractNewParamsRecurringCreditsRateType = "LIST_RATE"
)

func (r V1ContractNewParamsRecurringCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCreditsRateTypeCommitRate, V1ContractNewParamsRecurringCreditsRateTypeListRate:
		return true
	}
	return false
}

// The frequency at which the recurring commits will be created. If not provided: -
// The commits will be created on the usage invoice frequency. If provided: - The
// period defined in the duration will correspond to this frequency. - Commits will
// be created aligned with the recurring commit's starting_at rather than the usage
// invoice dates.
type V1ContractNewParamsRecurringCreditsRecurrenceFrequency string

const (
	V1ContractNewParamsRecurringCreditsRecurrenceFrequencyMonthly   V1ContractNewParamsRecurringCreditsRecurrenceFrequency = "MONTHLY"
	V1ContractNewParamsRecurringCreditsRecurrenceFrequencyQuarterly V1ContractNewParamsRecurringCreditsRecurrenceFrequency = "QUARTERLY"
	V1ContractNewParamsRecurringCreditsRecurrenceFrequencyAnnual    V1ContractNewParamsRecurringCreditsRecurrenceFrequency = "ANNUAL"
	V1ContractNewParamsRecurringCreditsRecurrenceFrequencyWeekly    V1ContractNewParamsRecurringCreditsRecurrenceFrequency = "WEEKLY"
)

func (r V1ContractNewParamsRecurringCreditsRecurrenceFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCreditsRecurrenceFrequencyMonthly, V1ContractNewParamsRecurringCreditsRecurrenceFrequencyQuarterly, V1ContractNewParamsRecurringCreditsRecurrenceFrequencyAnnual, V1ContractNewParamsRecurringCreditsRecurrenceFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractNewParamsRecurringCreditsSpecifier struct {
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractNewParamsRecurringCreditsSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Attach a subscription to the recurring commit/credit.
type V1ContractNewParamsRecurringCreditsSubscriptionConfig struct {
	ApplySeatIncreaseConfig param.Field[V1ContractNewParamsRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig] `json:"apply_seat_increase_config,required"`
	// ID of the subscription to configure on the recurring commit/credit.
	SubscriptionID param.Field[string] `json:"subscription_id,required"`
	// If set to POOLED, allocation added per seat is pooled across the account.
	Allocation param.Field[V1ContractNewParamsRecurringCreditsSubscriptionConfigAllocation] `json:"allocation"`
}

func (r V1ContractNewParamsRecurringCreditsSubscriptionConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig struct {
	// Indicates whether a mid-period seat increase should be prorated.
	IsProrated param.Field[bool] `json:"is_prorated,required"`
}

func (r V1ContractNewParamsRecurringCreditsSubscriptionConfigApplySeatIncreaseConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// If set to POOLED, allocation added per seat is pooled across the account.
type V1ContractNewParamsRecurringCreditsSubscriptionConfigAllocation string

const (
	V1ContractNewParamsRecurringCreditsSubscriptionConfigAllocationPooled V1ContractNewParamsRecurringCreditsSubscriptionConfigAllocation = "POOLED"
)

func (r V1ContractNewParamsRecurringCreditsSubscriptionConfigAllocation) IsKnown() bool {
	switch r {
	case V1ContractNewParamsRecurringCreditsSubscriptionConfigAllocationPooled:
		return true
	}
	return false
}

type V1ContractNewParamsResellerRoyalty struct {
	Fraction           param.Field[float64]                                          `json:"fraction,required"`
	NetsuiteResellerID param.Field[string]                                           `json:"netsuite_reseller_id,required"`
	ResellerType       param.Field[V1ContractNewParamsResellerRoyaltiesResellerType] `json:"reseller_type,required"`
	StartingAt         param.Field[time.Time]                                        `json:"starting_at,required" format:"date-time"`
	// Must provide at least one of applicable_product_ids or applicable_product_tags.
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Must provide at least one of applicable_product_ids or applicable_product_tags.
	ApplicableProductTags param.Field[[]string]                                       `json:"applicable_product_tags"`
	AwsOptions            param.Field[V1ContractNewParamsResellerRoyaltiesAwsOptions] `json:"aws_options"`
	EndingBefore          param.Field[time.Time]                                      `json:"ending_before" format:"date-time"`
	GcpOptions            param.Field[V1ContractNewParamsResellerRoyaltiesGcpOptions] `json:"gcp_options"`
	ResellerContractValue param.Field[float64]                                        `json:"reseller_contract_value"`
}

func (r V1ContractNewParamsResellerRoyalty) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsResellerRoyaltiesResellerType string

const (
	V1ContractNewParamsResellerRoyaltiesResellerTypeAws           V1ContractNewParamsResellerRoyaltiesResellerType = "AWS"
	V1ContractNewParamsResellerRoyaltiesResellerTypeAwsProService V1ContractNewParamsResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractNewParamsResellerRoyaltiesResellerTypeGcp           V1ContractNewParamsResellerRoyaltiesResellerType = "GCP"
	V1ContractNewParamsResellerRoyaltiesResellerTypeGcpProService V1ContractNewParamsResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractNewParamsResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsResellerRoyaltiesResellerTypeAws, V1ContractNewParamsResellerRoyaltiesResellerTypeAwsProService, V1ContractNewParamsResellerRoyaltiesResellerTypeGcp, V1ContractNewParamsResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractNewParamsResellerRoyaltiesAwsOptions struct {
	AwsAccountNumber    param.Field[string] `json:"aws_account_number"`
	AwsOfferID          param.Field[string] `json:"aws_offer_id"`
	AwsPayerReferenceID param.Field[string] `json:"aws_payer_reference_id"`
}

func (r V1ContractNewParamsResellerRoyaltiesAwsOptions) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsResellerRoyaltiesGcpOptions struct {
	GcpAccountID param.Field[string] `json:"gcp_account_id"`
	GcpOfferID   param.Field[string] `json:"gcp_offer_id"`
}

func (r V1ContractNewParamsResellerRoyaltiesGcpOptions) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsScheduledCharge struct {
	ProductID param.Field[string] `json:"product_id,required" format:"uuid"`
	// Must provide either schedule_items or recurring_schedule.
	Schedule param.Field[V1ContractNewParamsScheduledChargesSchedule] `json:"schedule,required"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
}

func (r V1ContractNewParamsScheduledCharge) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Must provide either schedule_items or recurring_schedule.
type V1ContractNewParamsScheduledChargesSchedule struct {
	// Defaults to USD (cents) if not passed.
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice param.Field[bool] `json:"do_not_invoice"`
	// Enter the unit price and quantity for the charge or instead only send the
	// amount. If amount is sent, the unit price is assumed to be the amount and
	// quantity is inferred to be 1.
	RecurringSchedule param.Field[V1ContractNewParamsScheduledChargesScheduleRecurringSchedule] `json:"recurring_schedule"`
	// Either provide amount or provide both unit_price and quantity.
	ScheduleItems param.Field[[]V1ContractNewParamsScheduledChargesScheduleScheduleItem] `json:"schedule_items"`
}

func (r V1ContractNewParamsScheduledChargesSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Enter the unit price and quantity for the charge or instead only send the
// amount. If amount is sent, the unit price is assumed to be the amount and
// quantity is inferred to be 1.
type V1ContractNewParamsScheduledChargesScheduleRecurringSchedule struct {
	AmountDistribution param.Field[V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistribution] `json:"amount_distribution,required"`
	// RFC 3339 timestamp (exclusive).
	EndingBefore param.Field[time.Time]                                                             `json:"ending_before,required" format:"date-time"`
	Frequency    param.Field[V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequency] `json:"frequency,required"`
	// RFC 3339 timestamp (inclusive).
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractNewParamsScheduledChargesScheduleRecurringSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistribution string

const (
	V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDivided        V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistribution = "DIVIDED"
	V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDividedRounded V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistribution = "DIVIDED_ROUNDED"
	V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistributionEach           V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistribution = "EACH"
)

func (r V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistribution) IsKnown() bool {
	switch r {
	case V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDivided, V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDividedRounded, V1ContractNewParamsScheduledChargesScheduleRecurringScheduleAmountDistributionEach:
		return true
	}
	return false
}

type V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequency string

const (
	V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencyMonthly    V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequency = "MONTHLY"
	V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencyQuarterly  V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequency = "QUARTERLY"
	V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencySemiAnnual V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequency = "SEMI_ANNUAL"
	V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencyAnnual     V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequency = "ANNUAL"
)

func (r V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencyMonthly, V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencyQuarterly, V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencySemiAnnual, V1ContractNewParamsScheduledChargesScheduleRecurringScheduleFrequencyAnnual:
		return true
	}
	return false
}

type V1ContractNewParamsScheduledChargesScheduleScheduleItem struct {
	// timestamp of the scheduled event
	Timestamp param.Field[time.Time] `json:"timestamp,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractNewParamsScheduledChargesScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Determines which scheduled and commit charges to consolidate onto the Contract's
// usage invoice. The charge's `timestamp` must match the usage invoice's
// `ending_before` date for consolidation to occur. This field cannot be modified
// after a Contract has been created. If this field is omitted, charges will appear
// on a separate invoice from usage charges.
type V1ContractNewParamsScheduledChargesOnUsageInvoices string

const (
	V1ContractNewParamsScheduledChargesOnUsageInvoicesAll V1ContractNewParamsScheduledChargesOnUsageInvoices = "ALL"
)

func (r V1ContractNewParamsScheduledChargesOnUsageInvoices) IsKnown() bool {
	switch r {
	case V1ContractNewParamsScheduledChargesOnUsageInvoicesAll:
		return true
	}
	return false
}

type V1ContractNewParamsSpendThresholdConfiguration struct {
	Commit param.Field[V1ContractNewParamsSpendThresholdConfigurationCommit] `json:"commit,required"`
	// When set to false, the contract will not be evaluated against the
	// threshold_amount. Toggling to true will result an immediate evaluation,
	// regardless of prior state.
	IsEnabled         param.Field[bool]                                                            `json:"is_enabled,required"`
	PaymentGateConfig param.Field[V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfig] `json:"payment_gate_config,required"`
	// Specify the threshold amount for the contract. Each time the contract's usage
	// hits this amount, a threshold charge will be initiated.
	ThresholdAmount param.Field[float64] `json:"threshold_amount,required"`
}

func (r V1ContractNewParamsSpendThresholdConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsSpendThresholdConfigurationCommit struct {
	// The commit product that will be used to generate the line item for commit
	// payment.
	ProductID   param.Field[string] `json:"product_id,required"`
	Description param.Field[string] `json:"description"`
	// Specify the name of the line item for the threshold charge. If left blank, it
	// will default to the commit product name.
	Name param.Field[string] `json:"name"`
}

func (r V1ContractNewParamsSpendThresholdConfigurationCommit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType param.Field[V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateType] `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig param.Field[V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig] `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig param.Field[V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfig] `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType param.Field[V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxType] `json:"tax_type"`
}

func (r V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateType string

const (
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone     V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "NONE"
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe   V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeNone, V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeStripe, V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount param.Field[float64] `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName param.Field[string] `json:"tax_name"`
}

func (r V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigPrecalculatedTaxConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType param.Field[V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType] `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata param.Field[map[string]string] `json:"invoice_metadata"`
}

func (r V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// If left blank, will default to INVOICE
type V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxType string

const (
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypeNone          V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxType = "NONE"
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe        V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxType = "STRIPE"
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok         V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxType = "ANROK"
	V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypeNone, V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypeStripe, V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypeAnrok, V1ContractNewParamsSpendThresholdConfigurationPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractNewParamsSubscription struct {
	CollectionSchedule param.Field[V1ContractNewParamsSubscriptionsCollectionSchedule] `json:"collection_schedule,required"`
	// The initial quantity for the subscription. It must be non-negative value.
	InitialQuantity  param.Field[float64]                                          `json:"initial_quantity,required"`
	Proration        param.Field[V1ContractNewParamsSubscriptionsProration]        `json:"proration,required"`
	SubscriptionRate param.Field[V1ContractNewParamsSubscriptionsSubscriptionRate] `json:"subscription_rate,required"`
	CustomFields     param.Field[map[string]string]                                `json:"custom_fields"`
	Description      param.Field[string]                                           `json:"description"`
	// Exclusive end time for the subscription. If not provided, subscription inherits
	// contract end date.
	EndingBefore param.Field[time.Time] `json:"ending_before" format:"date-time"`
	Name         param.Field[string]    `json:"name"`
	// Inclusive start time for the subscription. If not provided, defaults to contract
	// start date
	StartingAt param.Field[time.Time] `json:"starting_at" format:"date-time"`
	// A temporary ID used to reference the subscription in recurring commit/credit
	// subscription configs created within the same payload.
	TemporaryID param.Field[string] `json:"temporary_id"`
}

func (r V1ContractNewParamsSubscription) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsSubscriptionsCollectionSchedule string

const (
	V1ContractNewParamsSubscriptionsCollectionScheduleAdvance V1ContractNewParamsSubscriptionsCollectionSchedule = "ADVANCE"
	V1ContractNewParamsSubscriptionsCollectionScheduleArrears V1ContractNewParamsSubscriptionsCollectionSchedule = "ARREARS"
)

func (r V1ContractNewParamsSubscriptionsCollectionSchedule) IsKnown() bool {
	switch r {
	case V1ContractNewParamsSubscriptionsCollectionScheduleAdvance, V1ContractNewParamsSubscriptionsCollectionScheduleArrears:
		return true
	}
	return false
}

type V1ContractNewParamsSubscriptionsProration struct {
	// Indicates how mid-period quantity adjustments are invoiced.
	// **BILL_IMMEDIATELY**: Only available when collection schedule is `ADVANCE`. The
	// quantity increase will be billed immediately on the scheduled date.
	// **BILL_ON_NEXT_COLLECTION_DATE**: The quantity increase will be billed for
	// in-arrears at the end of the period.
	InvoiceBehavior param.Field[V1ContractNewParamsSubscriptionsProrationInvoiceBehavior] `json:"invoice_behavior"`
	// Indicates if the partial period will be prorated or charged a full amount.
	IsProrated param.Field[bool] `json:"is_prorated"`
}

func (r V1ContractNewParamsSubscriptionsProration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Indicates how mid-period quantity adjustments are invoiced.
// **BILL_IMMEDIATELY**: Only available when collection schedule is `ADVANCE`. The
// quantity increase will be billed immediately on the scheduled date.
// **BILL_ON_NEXT_COLLECTION_DATE**: The quantity increase will be billed for
// in-arrears at the end of the period.
type V1ContractNewParamsSubscriptionsProrationInvoiceBehavior string

const (
	V1ContractNewParamsSubscriptionsProrationInvoiceBehaviorBillImmediately          V1ContractNewParamsSubscriptionsProrationInvoiceBehavior = "BILL_IMMEDIATELY"
	V1ContractNewParamsSubscriptionsProrationInvoiceBehaviorBillOnNextCollectionDate V1ContractNewParamsSubscriptionsProrationInvoiceBehavior = "BILL_ON_NEXT_COLLECTION_DATE"
)

func (r V1ContractNewParamsSubscriptionsProrationInvoiceBehavior) IsKnown() bool {
	switch r {
	case V1ContractNewParamsSubscriptionsProrationInvoiceBehaviorBillImmediately, V1ContractNewParamsSubscriptionsProrationInvoiceBehaviorBillOnNextCollectionDate:
		return true
	}
	return false
}

type V1ContractNewParamsSubscriptionsSubscriptionRate struct {
	// Frequency to bill subscription with. Together with product_id, must match
	// existing rate on the rate card.
	BillingFrequency param.Field[V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequency] `json:"billing_frequency,required"`
	// Must be subscription type product
	ProductID param.Field[string] `json:"product_id,required" format:"uuid"`
}

func (r V1ContractNewParamsSubscriptionsSubscriptionRate) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Frequency to bill subscription with. Together with product_id, must match
// existing rate on the rate card.
type V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequency string

const (
	V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyMonthly   V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequency = "MONTHLY"
	V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyQuarterly V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequency = "QUARTERLY"
	V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyAnnual    V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequency = "ANNUAL"
	V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyWeekly    V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequency = "WEEKLY"
)

func (r V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyMonthly, V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyQuarterly, V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyAnnual, V1ContractNewParamsSubscriptionsSubscriptionRateBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractNewParamsTransition struct {
	FromContractID param.Field[string] `json:"from_contract_id,required" format:"uuid"`
	// This field's available values may vary based on your client's configuration.
	Type                  param.Field[V1ContractNewParamsTransitionType]                  `json:"type,required"`
	FutureInvoiceBehavior param.Field[V1ContractNewParamsTransitionFutureInvoiceBehavior] `json:"future_invoice_behavior"`
}

func (r V1ContractNewParamsTransition) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// This field's available values may vary based on your client's configuration.
type V1ContractNewParamsTransitionType string

const (
	V1ContractNewParamsTransitionTypeSupersede V1ContractNewParamsTransitionType = "SUPERSEDE"
	V1ContractNewParamsTransitionTypeRenewal   V1ContractNewParamsTransitionType = "RENEWAL"
)

func (r V1ContractNewParamsTransitionType) IsKnown() bool {
	switch r {
	case V1ContractNewParamsTransitionTypeSupersede, V1ContractNewParamsTransitionTypeRenewal:
		return true
	}
	return false
}

type V1ContractNewParamsTransitionFutureInvoiceBehavior struct {
	// Controls whether future trueup invoices are billed or removed. Default behavior
	// is AS_IS if not specified.
	Trueup param.Field[V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueup] `json:"trueup"`
}

func (r V1ContractNewParamsTransitionFutureInvoiceBehavior) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Controls whether future trueup invoices are billed or removed. Default behavior
// is AS_IS if not specified.
type V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueup string

const (
	V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueupRemove V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueup = "REMOVE"
	V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueupAsIs   V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueup = "AS_IS"
)

func (r V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueup) IsKnown() bool {
	switch r {
	case V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueupRemove, V1ContractNewParamsTransitionFutureInvoiceBehaviorTrueupAsIs:
		return true
	}
	return false
}

type V1ContractNewParamsUsageFilter struct {
	GroupKey    param.Field[string]    `json:"group_key,required"`
	GroupValues param.Field[[]string]  `json:"group_values,required"`
	StartingAt  param.Field[time.Time] `json:"starting_at" format:"date-time"`
}

func (r V1ContractNewParamsUsageFilter) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsUsageStatementSchedule struct {
	Frequency param.Field[V1ContractNewParamsUsageStatementScheduleFrequency] `json:"frequency,required"`
	// Required when using CUSTOM_DATE. This option lets you set a historical billing
	// anchor date, aligning future billing cycles with a chosen cadence. For example,
	// if a contract starts on 2024-09-15 and you set the anchor date to 2024-09-10
	// with a MONTHLY frequency, the first usage statement will cover 09-15 to 10-10.
	// Subsequent statements will follow the 10th of each month.
	BillingAnchorDate param.Field[time.Time] `json:"billing_anchor_date" format:"date-time"`
	// If not provided, defaults to the first day of the month.
	Day param.Field[V1ContractNewParamsUsageStatementScheduleDay] `json:"day"`
	// The date Metronome should start generating usage invoices. If unspecified,
	// contract start date will be used. This is useful to set if you want to import
	// historical invoices via our 'Create Historical Invoices' API rather than having
	// Metronome automatically generate them.
	InvoiceGenerationStartingAt param.Field[time.Time] `json:"invoice_generation_starting_at" format:"date-time"`
}

func (r V1ContractNewParamsUsageStatementSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewParamsUsageStatementScheduleFrequency string

const (
	V1ContractNewParamsUsageStatementScheduleFrequencyMonthly   V1ContractNewParamsUsageStatementScheduleFrequency = "MONTHLY"
	V1ContractNewParamsUsageStatementScheduleFrequencyQuarterly V1ContractNewParamsUsageStatementScheduleFrequency = "QUARTERLY"
	V1ContractNewParamsUsageStatementScheduleFrequencyAnnual    V1ContractNewParamsUsageStatementScheduleFrequency = "ANNUAL"
	V1ContractNewParamsUsageStatementScheduleFrequencyWeekly    V1ContractNewParamsUsageStatementScheduleFrequency = "WEEKLY"
)

func (r V1ContractNewParamsUsageStatementScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractNewParamsUsageStatementScheduleFrequencyMonthly, V1ContractNewParamsUsageStatementScheduleFrequencyQuarterly, V1ContractNewParamsUsageStatementScheduleFrequencyAnnual, V1ContractNewParamsUsageStatementScheduleFrequencyWeekly:
		return true
	}
	return false
}

// If not provided, defaults to the first day of the month.
type V1ContractNewParamsUsageStatementScheduleDay string

const (
	V1ContractNewParamsUsageStatementScheduleDayFirstOfMonth  V1ContractNewParamsUsageStatementScheduleDay = "FIRST_OF_MONTH"
	V1ContractNewParamsUsageStatementScheduleDayContractStart V1ContractNewParamsUsageStatementScheduleDay = "CONTRACT_START"
	V1ContractNewParamsUsageStatementScheduleDayCustomDate    V1ContractNewParamsUsageStatementScheduleDay = "CUSTOM_DATE"
)

func (r V1ContractNewParamsUsageStatementScheduleDay) IsKnown() bool {
	switch r {
	case V1ContractNewParamsUsageStatementScheduleDayFirstOfMonth, V1ContractNewParamsUsageStatementScheduleDayContractStart, V1ContractNewParamsUsageStatementScheduleDayCustomDate:
		return true
	}
	return false
}

type V1ContractGetParams struct {
	ContractID param.Field[string] `json:"contract_id,required" format:"uuid"`
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// Include the balance of credits and commits in the response. Setting this flag
	// may cause the query to be slower.
	IncludeBalance param.Field[bool] `json:"include_balance"`
	// Include commit ledgers in the response. Setting this flag may cause the query to
	// be slower.
	IncludeLedgers param.Field[bool] `json:"include_ledgers"`
}

func (r V1ContractGetParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractListParams struct {
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// Optional RFC 3339 timestamp. If provided, the response will include only
	// contracts effective on the provided date. This cannot be provided if the
	// starting_at filter is provided.
	CoveringDate param.Field[time.Time] `json:"covering_date" format:"date-time"`
	// Include archived contracts in the response
	IncludeArchived param.Field[bool] `json:"include_archived"`
	// Include the balance of credits and commits in the response. Setting this flag
	// may cause the query to be slower.
	IncludeBalance param.Field[bool] `json:"include_balance"`
	// Include commit ledgers in the response. Setting this flag may cause the query to
	// be slower.
	IncludeLedgers param.Field[bool] `json:"include_ledgers"`
	// Optional RFC 3339 timestamp. If provided, the response will include only
	// contracts where effective_at is on or after the provided date. This cannot be
	// provided if the covering_date filter is provided.
	StartingAt param.Field[time.Time] `json:"starting_at" format:"date-time"`
}

func (r V1ContractListParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAddManualBalanceEntryParams struct {
	// ID of the balance (commit or credit) to update.
	ID param.Field[string] `json:"id,required" format:"uuid"`
	// Amount to add to the segment. A negative number will draw down from the balance.
	Amount param.Field[float64] `json:"amount,required"`
	// ID of the customer whose balance is to be updated.
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// Reason for the manual adjustment. This will be displayed in the ledger.
	Reason param.Field[string] `json:"reason,required"`
	// ID of the segment to update.
	SegmentID param.Field[string] `json:"segment_id,required" format:"uuid"`
	// ID of the contract to update. Leave blank to update a customer level balance.
	ContractID param.Field[string] `json:"contract_id" format:"uuid"`
	// RFC 3339 timestamp indicating when the manual adjustment takes place. If not
	// provided, it will default to the start of the segment.
	Timestamp param.Field[time.Time] `json:"timestamp" format:"date-time"`
}

func (r V1ContractAddManualBalanceEntryParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParams struct {
	// ID of the contract to amend
	ContractID param.Field[string] `json:"contract_id,required" format:"uuid"`
	// ID of the customer whose contract is to be amended
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// inclusive start time for the amendment
	StartingAt   param.Field[time.Time]                     `json:"starting_at,required" format:"date-time"`
	Commits      param.Field[[]V1ContractAmendParamsCommit] `json:"commits"`
	Credits      param.Field[[]V1ContractAmendParamsCredit] `json:"credits"`
	CustomFields param.Field[map[string]string]             `json:"custom_fields"`
	// This field's availability is dependent on your client's configuration.
	Discounts param.Field[[]V1ContractAmendParamsDiscount] `json:"discounts"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string]                          `json:"netsuite_sales_order_id"`
	Overrides            param.Field[[]V1ContractAmendParamsOverride] `json:"overrides"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices param.Field[[]V1ContractAmendParamsProfessionalService] `json:"professional_services"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties param.Field[[]V1ContractAmendParamsResellerRoyalty] `json:"reseller_royalties"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID param.Field[string]                                 `json:"salesforce_opportunity_id"`
	ScheduledCharges        param.Field[[]V1ContractAmendParamsScheduledCharge] `json:"scheduled_charges"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue param.Field[float64] `json:"total_contract_value"`
}

func (r V1ContractAmendParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCommit struct {
	ProductID param.Field[string]                           `json:"product_id,required" format:"uuid"`
	Type      param.Field[V1ContractAmendParamsCommitsType] `json:"type,required"`
	// Required: Schedule for distributing the commit to the customer. For "POSTPAID"
	// commits only one schedule item is allowed and amount must match invoice_schedule
	// total.
	AccessSchedule param.Field[V1ContractAmendParamsCommitsAccessSchedule] `json:"access_schedule"`
	// (DEPRECATED) Use access_schedule and invoice_schedule instead.
	Amount param.Field[float64] `json:"amount"`
	// Which products the commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Which tags the commit applies to. If applicable_product_ids,
	// applicable_product_tags or specifiers are not provided, the commit applies to
	// all products.
	ApplicableProductTags param.Field[[]string]          `json:"applicable_product_tags"`
	CustomFields          param.Field[map[string]string] `json:"custom_fields"`
	// Used only in UI/API. It is not exposed to end customers.
	Description param.Field[string] `json:"description"`
	// Optional configuration for commit hierarchy access control
	HierarchyConfiguration param.Field[V1ContractAmendParamsCommitsHierarchyConfiguration] `json:"hierarchy_configuration"`
	// Required for "POSTPAID" commits: the true up invoice will be generated at this
	// time and only one schedule item is allowed; the total must match access_schedule
	// amount. Optional for "PREPAID" commits: if not provided, this will be a
	// "complimentary" commit with no invoice.
	InvoiceSchedule param.Field[V1ContractAmendParamsCommitsInvoiceSchedule] `json:"invoice_schedule"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
	// optionally payment gate this commit
	PaymentGateConfig param.Field[V1ContractAmendParamsCommitsPaymentGateConfig] `json:"payment_gate_config"`
	// If multiple commits are applicable, the one with the lower priority will apply
	// first.
	Priority param.Field[float64]                              `json:"priority"`
	RateType param.Field[V1ContractAmendParamsCommitsRateType] `json:"rate_type"`
	// Fraction of unused segments that will be rolled over. Must be between 0 and 1.
	RolloverFraction param.Field[float64] `json:"rollover_fraction"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers param.Field[[]V1ContractAmendParamsCommitsSpecifier] `json:"specifiers"`
	// A temporary ID for the commit that can be used to reference the commit for
	// commit specific overrides.
	TemporaryID param.Field[string] `json:"temporary_id"`
}

func (r V1ContractAmendParamsCommit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCommitsType string

const (
	V1ContractAmendParamsCommitsTypePrepaid  V1ContractAmendParamsCommitsType = "PREPAID"
	V1ContractAmendParamsCommitsTypePostpaid V1ContractAmendParamsCommitsType = "POSTPAID"
)

func (r V1ContractAmendParamsCommitsType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsTypePrepaid, V1ContractAmendParamsCommitsTypePostpaid:
		return true
	}
	return false
}

// Required: Schedule for distributing the commit to the customer. For "POSTPAID"
// commits only one schedule item is allowed and amount must match invoice_schedule
// total.
type V1ContractAmendParamsCommitsAccessSchedule struct {
	ScheduleItems param.Field[[]V1ContractAmendParamsCommitsAccessScheduleScheduleItem] `json:"schedule_items,required"`
	// Defaults to USD (cents) if not passed
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
}

func (r V1ContractAmendParamsCommitsAccessSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCommitsAccessScheduleScheduleItem struct {
	Amount param.Field[float64] `json:"amount,required"`
	// RFC 3339 timestamp (exclusive)
	EndingBefore param.Field[time.Time] `json:"ending_before,required" format:"date-time"`
	// RFC 3339 timestamp (inclusive)
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
}

func (r V1ContractAmendParamsCommitsAccessScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Optional configuration for commit hierarchy access control
type V1ContractAmendParamsCommitsHierarchyConfiguration struct {
	ChildAccess param.Field[V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessUnion] `json:"child_access,required"`
}

func (r V1ContractAmendParamsCommitsHierarchyConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCommitsHierarchyConfigurationChildAccess struct {
	Type        param.Field[V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessType] `json:"type,required"`
	ContractIDs param.Field[interface{}]                                                       `json:"contract_ids"`
}

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccess) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccess) implementsV1ContractAmendParamsCommitsHierarchyConfigurationChildAccessUnion() {
}

// Satisfied by
// [V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessType],
// [V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObject],
// [V1ContractAmendParamsCommitsHierarchyConfigurationChildAccess].
type V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractAmendParamsCommitsHierarchyConfigurationChildAccessUnion()
}

type V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessType struct {
	Type param.Field[V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessTypeType] `json:"type,required"`
}

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessType) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessType) implementsV1ContractAmendParamsCommitsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessTypeTypeAll V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObject struct {
	ContractIDs param.Field[[]string]                                                                `json:"contract_ids,required" format:"uuid"`
	Type        param.Field[V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObjectType] `json:"type,required"`
}

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObject) implementsV1ContractAmendParamsCommitsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

// Required for "POSTPAID" commits: the true up invoice will be generated at this
// time and only one schedule item is allowed; the total must match access_schedule
// amount. Optional for "PREPAID" commits: if not provided, this will be a
// "complimentary" commit with no invoice.
type V1ContractAmendParamsCommitsInvoiceSchedule struct {
	// Defaults to USD (cents) if not passed.
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice param.Field[bool] `json:"do_not_invoice"`
	// Enter the unit price and quantity for the charge or instead only send the
	// amount. If amount is sent, the unit price is assumed to be the amount and
	// quantity is inferred to be 1.
	RecurringSchedule param.Field[V1ContractAmendParamsCommitsInvoiceScheduleRecurringSchedule] `json:"recurring_schedule"`
	// Either provide amount or provide both unit_price and quantity.
	ScheduleItems param.Field[[]V1ContractAmendParamsCommitsInvoiceScheduleScheduleItem] `json:"schedule_items"`
}

func (r V1ContractAmendParamsCommitsInvoiceSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Enter the unit price and quantity for the charge or instead only send the
// amount. If amount is sent, the unit price is assumed to be the amount and
// quantity is inferred to be 1.
type V1ContractAmendParamsCommitsInvoiceScheduleRecurringSchedule struct {
	AmountDistribution param.Field[V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution] `json:"amount_distribution,required"`
	// RFC 3339 timestamp (exclusive).
	EndingBefore param.Field[time.Time]                                                             `json:"ending_before,required" format:"date-time"`
	Frequency    param.Field[V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequency] `json:"frequency,required"`
	// RFC 3339 timestamp (inclusive).
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractAmendParamsCommitsInvoiceScheduleRecurringSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution string

const (
	V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDivided        V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution = "DIVIDED"
	V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDividedRounded V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution = "DIVIDED_ROUNDED"
	V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionEach           V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution = "EACH"
)

func (r V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistribution) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDivided, V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionDividedRounded, V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleAmountDistributionEach:
		return true
	}
	return false
}

type V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequency string

const (
	V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencyMonthly    V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "MONTHLY"
	V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencyQuarterly  V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "QUARTERLY"
	V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencySemiAnnual V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "SEMI_ANNUAL"
	V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencyAnnual     V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequency = "ANNUAL"
)

func (r V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencyMonthly, V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencyQuarterly, V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencySemiAnnual, V1ContractAmendParamsCommitsInvoiceScheduleRecurringScheduleFrequencyAnnual:
		return true
	}
	return false
}

type V1ContractAmendParamsCommitsInvoiceScheduleScheduleItem struct {
	// timestamp of the scheduled event
	Timestamp param.Field[time.Time] `json:"timestamp,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractAmendParamsCommitsInvoiceScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// optionally payment gate this commit
type V1ContractAmendParamsCommitsPaymentGateConfig struct {
	// Gate access to the commit balance based on successful collection of payment.
	// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
	// facilitate payment using your own payment integration. Select NONE if you do not
	// wish to payment gate the commit balance.
	PaymentGateType param.Field[V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateType] `json:"payment_gate_type,required"`
	// Only applicable if using PRECALCULATED as your tax type.
	PrecalculatedTaxConfig param.Field[V1ContractAmendParamsCommitsPaymentGateConfigPrecalculatedTaxConfig] `json:"precalculated_tax_config"`
	// Only applicable if using STRIPE as your payment gate type.
	StripeConfig param.Field[V1ContractAmendParamsCommitsPaymentGateConfigStripeConfig] `json:"stripe_config"`
	// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
	// not wish Metronome to calculate tax on your behalf. Leaving this field blank
	// will default to NONE.
	TaxType param.Field[V1ContractAmendParamsCommitsPaymentGateConfigTaxType] `json:"tax_type"`
}

func (r V1ContractAmendParamsCommitsPaymentGateConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Gate access to the commit balance based on successful collection of payment.
// Select STRIPE for Metronome to facilitate payment via Stripe. Select EXTERNAL to
// facilitate payment using your own payment integration. Select NONE if you do not
// wish to payment gate the commit balance.
type V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateType string

const (
	V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateTypeNone     V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateType = "NONE"
	V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateTypeStripe   V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateType = "STRIPE"
	V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateTypeExternal V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateType = "EXTERNAL"
)

func (r V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateTypeNone, V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateTypeStripe, V1ContractAmendParamsCommitsPaymentGateConfigPaymentGateTypeExternal:
		return true
	}
	return false
}

// Only applicable if using PRECALCULATED as your tax type.
type V1ContractAmendParamsCommitsPaymentGateConfigPrecalculatedTaxConfig struct {
	// Amount of tax to be applied. This should be in the same currency and
	// denomination as the commit's invoice schedule
	TaxAmount param.Field[float64] `json:"tax_amount,required"`
	// Name of the tax to be applied. This may be used in an invoice line item
	// description.
	TaxName param.Field[string] `json:"tax_name"`
}

func (r V1ContractAmendParamsCommitsPaymentGateConfigPrecalculatedTaxConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Only applicable if using STRIPE as your payment gate type.
type V1ContractAmendParamsCommitsPaymentGateConfigStripeConfig struct {
	// If left blank, will default to INVOICE
	PaymentType param.Field[V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentType] `json:"payment_type,required"`
	// Metadata to be added to the Stripe invoice. Only applicable if using INVOICE as
	// your payment type.
	InvoiceMetadata param.Field[map[string]string] `json:"invoice_metadata"`
	// If true, the payment will be made assuming the customer is present (i.e. on
	// session).
	//
	// If false, the payment will be made assuming the customer is not present (i.e.
	// off session). For cardholders from a country with an e-mandate requirement (e.g.
	// India), the payment may be declined.
	//
	// If left blank, will default to false.
	OnSessionPayment param.Field[bool] `json:"on_session_payment"`
}

func (r V1ContractAmendParamsCommitsPaymentGateConfigStripeConfig) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// If left blank, will default to INVOICE
type V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentType string

const (
	V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentTypeInvoice       V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentType = "INVOICE"
	V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentTypePaymentIntent V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentType = "PAYMENT_INTENT"
)

func (r V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentTypeInvoice, V1ContractAmendParamsCommitsPaymentGateConfigStripeConfigPaymentTypePaymentIntent:
		return true
	}
	return false
}

// Stripe tax is only supported for Stripe payment gateway. Select NONE if you do
// not wish Metronome to calculate tax on your behalf. Leaving this field blank
// will default to NONE.
type V1ContractAmendParamsCommitsPaymentGateConfigTaxType string

const (
	V1ContractAmendParamsCommitsPaymentGateConfigTaxTypeNone          V1ContractAmendParamsCommitsPaymentGateConfigTaxType = "NONE"
	V1ContractAmendParamsCommitsPaymentGateConfigTaxTypeStripe        V1ContractAmendParamsCommitsPaymentGateConfigTaxType = "STRIPE"
	V1ContractAmendParamsCommitsPaymentGateConfigTaxTypeAnrok         V1ContractAmendParamsCommitsPaymentGateConfigTaxType = "ANROK"
	V1ContractAmendParamsCommitsPaymentGateConfigTaxTypePrecalculated V1ContractAmendParamsCommitsPaymentGateConfigTaxType = "PRECALCULATED"
)

func (r V1ContractAmendParamsCommitsPaymentGateConfigTaxType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsPaymentGateConfigTaxTypeNone, V1ContractAmendParamsCommitsPaymentGateConfigTaxTypeStripe, V1ContractAmendParamsCommitsPaymentGateConfigTaxTypeAnrok, V1ContractAmendParamsCommitsPaymentGateConfigTaxTypePrecalculated:
		return true
	}
	return false
}

type V1ContractAmendParamsCommitsRateType string

const (
	V1ContractAmendParamsCommitsRateTypeCommitRate V1ContractAmendParamsCommitsRateType = "COMMIT_RATE"
	V1ContractAmendParamsCommitsRateTypeListRate   V1ContractAmendParamsCommitsRateType = "LIST_RATE"
)

func (r V1ContractAmendParamsCommitsRateType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCommitsRateTypeCommitRate, V1ContractAmendParamsCommitsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractAmendParamsCommitsSpecifier struct {
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractAmendParamsCommitsSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCredit struct {
	// Schedule for distributing the credit to the customer.
	AccessSchedule param.Field[V1ContractAmendParamsCreditsAccessSchedule] `json:"access_schedule,required"`
	ProductID      param.Field[string]                                     `json:"product_id,required" format:"uuid"`
	// Which products the credit applies to. If both applicable_product_ids and
	// applicable_product_tags are not provided, the credit applies to all products.
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Which tags the credit applies to. If both applicable_product_ids and
	// applicable_product_tags are not provided, the credit applies to all products.
	ApplicableProductTags param.Field[[]string]          `json:"applicable_product_tags"`
	CustomFields          param.Field[map[string]string] `json:"custom_fields"`
	// Used only in UI/API. It is not exposed to end customers.
	Description param.Field[string] `json:"description"`
	// Optional configuration for credit hierarchy access control
	HierarchyConfiguration param.Field[V1ContractAmendParamsCreditsHierarchyConfiguration] `json:"hierarchy_configuration"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
	// If multiple credits are applicable, the one with the lower priority will apply
	// first.
	Priority param.Field[float64]                              `json:"priority"`
	RateType param.Field[V1ContractAmendParamsCreditsRateType] `json:"rate_type"`
	// List of filters that determine what kind of customer usage draws down a commit
	// or credit. A customer's usage needs to meet the condition of at least one of the
	// specifiers to contribute to a commit's or credit's drawdown. This field cannot
	// be used together with `applicable_product_ids` or `applicable_product_tags`.
	Specifiers param.Field[[]V1ContractAmendParamsCreditsSpecifier] `json:"specifiers"`
}

func (r V1ContractAmendParamsCredit) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Schedule for distributing the credit to the customer.
type V1ContractAmendParamsCreditsAccessSchedule struct {
	ScheduleItems param.Field[[]V1ContractAmendParamsCreditsAccessScheduleScheduleItem] `json:"schedule_items,required"`
	// Defaults to USD (cents) if not passed
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
}

func (r V1ContractAmendParamsCreditsAccessSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCreditsAccessScheduleScheduleItem struct {
	Amount param.Field[float64] `json:"amount,required"`
	// RFC 3339 timestamp (exclusive)
	EndingBefore param.Field[time.Time] `json:"ending_before,required" format:"date-time"`
	// RFC 3339 timestamp (inclusive)
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
}

func (r V1ContractAmendParamsCreditsAccessScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Optional configuration for credit hierarchy access control
type V1ContractAmendParamsCreditsHierarchyConfiguration struct {
	ChildAccess param.Field[V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessUnion] `json:"child_access,required"`
}

func (r V1ContractAmendParamsCreditsHierarchyConfiguration) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsCreditsHierarchyConfigurationChildAccess struct {
	Type        param.Field[V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessType] `json:"type,required"`
	ContractIDs param.Field[interface{}]                                                       `json:"contract_ids"`
}

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccess) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccess) implementsV1ContractAmendParamsCreditsHierarchyConfigurationChildAccessUnion() {
}

// Satisfied by
// [V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessType],
// [V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObject],
// [V1ContractAmendParamsCreditsHierarchyConfigurationChildAccess].
type V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessUnion interface {
	implementsV1ContractAmendParamsCreditsHierarchyConfigurationChildAccessUnion()
}

type V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessType struct {
	Type param.Field[V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessTypeType] `json:"type,required"`
}

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessType) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessType) implementsV1ContractAmendParamsCreditsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessTypeType string

const (
	V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessTypeTypeAll V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessTypeType = "ALL"
)

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessTypeType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessTypeTypeAll:
		return true
	}
	return false
}

type V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObject struct {
	ContractIDs param.Field[[]string]                                                                `json:"contract_ids,required" format:"uuid"`
	Type        param.Field[V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObjectType] `json:"type,required"`
}

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObject) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObject) implementsV1ContractAmendParamsCreditsHierarchyConfigurationChildAccessUnion() {
}

type V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObjectType string

const (
	V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObjectType = "CONTRACT_IDS"
)

func (r V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObjectType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCreditsHierarchyConfigurationChildAccessObjectTypeContractIDs:
		return true
	}
	return false
}

type V1ContractAmendParamsCreditsRateType string

const (
	V1ContractAmendParamsCreditsRateTypeCommitRate V1ContractAmendParamsCreditsRateType = "COMMIT_RATE"
	V1ContractAmendParamsCreditsRateTypeListRate   V1ContractAmendParamsCreditsRateType = "LIST_RATE"
)

func (r V1ContractAmendParamsCreditsRateType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsCreditsRateTypeCommitRate, V1ContractAmendParamsCreditsRateTypeListRate:
		return true
	}
	return false
}

type V1ContractAmendParamsCreditsSpecifier struct {
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the specifier will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the specifier will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractAmendParamsCreditsSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsDiscount struct {
	ProductID param.Field[string] `json:"product_id,required" format:"uuid"`
	// Must provide either schedule_items or recurring_schedule.
	Schedule     param.Field[V1ContractAmendParamsDiscountsSchedule] `json:"schedule,required"`
	CustomFields param.Field[map[string]string]                      `json:"custom_fields"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
}

func (r V1ContractAmendParamsDiscount) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Must provide either schedule_items or recurring_schedule.
type V1ContractAmendParamsDiscountsSchedule struct {
	// Defaults to USD (cents) if not passed.
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice param.Field[bool] `json:"do_not_invoice"`
	// Enter the unit price and quantity for the charge or instead only send the
	// amount. If amount is sent, the unit price is assumed to be the amount and
	// quantity is inferred to be 1.
	RecurringSchedule param.Field[V1ContractAmendParamsDiscountsScheduleRecurringSchedule] `json:"recurring_schedule"`
	// Either provide amount or provide both unit_price and quantity.
	ScheduleItems param.Field[[]V1ContractAmendParamsDiscountsScheduleScheduleItem] `json:"schedule_items"`
}

func (r V1ContractAmendParamsDiscountsSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Enter the unit price and quantity for the charge or instead only send the
// amount. If amount is sent, the unit price is assumed to be the amount and
// quantity is inferred to be 1.
type V1ContractAmendParamsDiscountsScheduleRecurringSchedule struct {
	AmountDistribution param.Field[V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistribution] `json:"amount_distribution,required"`
	// RFC 3339 timestamp (exclusive).
	EndingBefore param.Field[time.Time]                                                        `json:"ending_before,required" format:"date-time"`
	Frequency    param.Field[V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequency] `json:"frequency,required"`
	// RFC 3339 timestamp (inclusive).
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractAmendParamsDiscountsScheduleRecurringSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistribution string

const (
	V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistributionDivided        V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistribution = "DIVIDED"
	V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistributionDividedRounded V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistribution = "DIVIDED_ROUNDED"
	V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistributionEach           V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistribution = "EACH"
)

func (r V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistribution) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistributionDivided, V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistributionDividedRounded, V1ContractAmendParamsDiscountsScheduleRecurringScheduleAmountDistributionEach:
		return true
	}
	return false
}

type V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequency string

const (
	V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencyMonthly    V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequency = "MONTHLY"
	V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencyQuarterly  V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequency = "QUARTERLY"
	V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencySemiAnnual V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequency = "SEMI_ANNUAL"
	V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencyAnnual     V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequency = "ANNUAL"
)

func (r V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencyMonthly, V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencyQuarterly, V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencySemiAnnual, V1ContractAmendParamsDiscountsScheduleRecurringScheduleFrequencyAnnual:
		return true
	}
	return false
}

type V1ContractAmendParamsDiscountsScheduleScheduleItem struct {
	// timestamp of the scheduled event
	Timestamp param.Field[time.Time] `json:"timestamp,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractAmendParamsDiscountsScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsOverride struct {
	// RFC 3339 timestamp indicating when the override will start applying (inclusive)
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// tags identifying products whose rates are being overridden. Cannot be used in
	// conjunction with override_specifiers.
	ApplicableProductTags param.Field[[]string] `json:"applicable_product_tags"`
	// RFC 3339 timestamp indicating when the override will stop applying (exclusive)
	EndingBefore param.Field[time.Time] `json:"ending_before" format:"date-time"`
	Entitled     param.Field[bool]      `json:"entitled"`
	// Indicates whether the override should only apply to commits. Defaults to
	// `false`. If `true`, you can specify relevant commits in `override_specifiers` by
	// passing `commit_ids`. if you do not specify `commit_ids`, then the override will
	// apply when consuming any prepaid or postpaid commit.
	IsCommitSpecific param.Field[bool] `json:"is_commit_specific"`
	// Required for MULTIPLIER type. Must be >=0.
	Multiplier param.Field[float64] `json:"multiplier"`
	// Cannot be used in conjunction with product_id or applicable_product_tags. If
	// provided, the override will apply to all products with the specified specifiers.
	OverrideSpecifiers param.Field[[]V1ContractAmendParamsOverridesOverrideSpecifier] `json:"override_specifiers"`
	// Required for OVERWRITE type.
	OverwriteRate param.Field[V1ContractAmendParamsOverridesOverwriteRate] `json:"overwrite_rate"`
	// Required for EXPLICIT multiplier prioritization scheme and all TIERED overrides.
	// Under EXPLICIT prioritization, overwrites are prioritized first, and then tiered
	// and multiplier overrides are prioritized by their priority value (lowest first).
	// Must be > 0.
	Priority param.Field[float64] `json:"priority"`
	// ID of the product whose rate is being overridden. Cannot be used in conjunction
	// with override_specifiers.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// Indicates whether the override applies to commit rates or list rates. Can only
	// be used for overrides that have `is_commit_specific` set to `true`. Defaults to
	// `"LIST_RATE"`.
	Target param.Field[V1ContractAmendParamsOverridesTarget] `json:"target"`
	// Required for TIERED type. Must have at least one tier.
	Tiers param.Field[[]V1ContractAmendParamsOverridesTier] `json:"tiers"`
	// Overwrites are prioritized over multipliers and tiered overrides.
	Type param.Field[V1ContractAmendParamsOverridesType] `json:"type"`
}

func (r V1ContractAmendParamsOverride) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsOverridesOverrideSpecifier struct {
	BillingFrequency param.Field[V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequency] `json:"billing_frequency"`
	// Can only be used for commit specific overrides. Must be used in conjunction with
	// one of product_id, product_tags, pricing_group_values, or
	// presentation_group_values. If provided, the override will only apply to the
	// specified commits. If not provided, the override will apply to all commits.
	CommitIDs param.Field[[]string] `json:"commit_ids"`
	// A map of group names to values. The override will only apply to line items with
	// the specified presentation group values.
	PresentationGroupValues param.Field[map[string]string] `json:"presentation_group_values"`
	// A map of pricing group names to values. The override will only apply to products
	// with the specified pricing group values.
	PricingGroupValues param.Field[map[string]string] `json:"pricing_group_values"`
	// If provided, the override will only apply to the product with the specified ID.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// If provided, the override will only apply to products with all the specified
	// tags.
	ProductTags param.Field[[]string] `json:"product_tags"`
	// Can only be used for commit specific overrides. Must be used in conjunction with
	// one of product_id, product_tags, pricing_group_values, or
	// presentation_group_values. If provided, the override will only apply to commits
	// created by the specified recurring commit ids.
	RecurringCommitIDs param.Field[[]string] `json:"recurring_commit_ids"`
	// Can only be used for commit specific overrides. Must be used in conjunction with
	// one of product_id, product_tags, pricing_group_values, or
	// presentation_group_values. If provided, the override will only apply to credits
	// created by the specified recurring credit ids.
	RecurringCreditIDs param.Field[[]string] `json:"recurring_credit_ids"`
}

func (r V1ContractAmendParamsOverridesOverrideSpecifier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequency string

const (
	V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyMonthly   V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequency = "MONTHLY"
	V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyQuarterly V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequency = "QUARTERLY"
	V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyAnnual    V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequency = "ANNUAL"
	V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyWeekly    V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequency = "WEEKLY"
)

func (r V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyMonthly, V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyQuarterly, V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyAnnual, V1ContractAmendParamsOverridesOverrideSpecifiersBillingFrequencyWeekly:
		return true
	}
	return false
}

// Required for OVERWRITE type.
type V1ContractAmendParamsOverridesOverwriteRate struct {
	RateType     param.Field[V1ContractAmendParamsOverridesOverwriteRateRateType] `json:"rate_type,required"`
	CreditTypeID param.Field[string]                                              `json:"credit_type_id" format:"uuid"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate
	// processors.
	CustomRate param.Field[map[string]interface{}] `json:"custom_rate"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type. Must be
	// set to true.
	IsProrated param.Field[bool] `json:"is_prorated"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type,
	// this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price param.Field[float64] `json:"price"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity param.Field[float64] `json:"quantity"`
	// Only set for TIERED rate_type.
	Tiers param.Field[[]V1ContractAmendParamsOverridesOverwriteRateTier] `json:"tiers"`
}

func (r V1ContractAmendParamsOverridesOverwriteRate) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsOverridesOverwriteRateRateType string

const (
	V1ContractAmendParamsOverridesOverwriteRateRateTypeFlat         V1ContractAmendParamsOverridesOverwriteRateRateType = "FLAT"
	V1ContractAmendParamsOverridesOverwriteRateRateTypePercentage   V1ContractAmendParamsOverridesOverwriteRateRateType = "PERCENTAGE"
	V1ContractAmendParamsOverridesOverwriteRateRateTypeSubscription V1ContractAmendParamsOverridesOverwriteRateRateType = "SUBSCRIPTION"
	V1ContractAmendParamsOverridesOverwriteRateRateTypeTiered       V1ContractAmendParamsOverridesOverwriteRateRateType = "TIERED"
	V1ContractAmendParamsOverridesOverwriteRateRateTypeCustom       V1ContractAmendParamsOverridesOverwriteRateRateType = "CUSTOM"
)

func (r V1ContractAmendParamsOverridesOverwriteRateRateType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsOverridesOverwriteRateRateTypeFlat, V1ContractAmendParamsOverridesOverwriteRateRateTypePercentage, V1ContractAmendParamsOverridesOverwriteRateRateTypeSubscription, V1ContractAmendParamsOverridesOverwriteRateRateTypeTiered, V1ContractAmendParamsOverridesOverwriteRateRateTypeCustom:
		return true
	}
	return false
}

type V1ContractAmendParamsOverridesOverwriteRateTier struct {
	Price param.Field[float64] `json:"price,required"`
	Size  param.Field[float64] `json:"size"`
}

func (r V1ContractAmendParamsOverridesOverwriteRateTier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Indicates whether the override applies to commit rates or list rates. Can only
// be used for overrides that have `is_commit_specific` set to `true`. Defaults to
// `"LIST_RATE"`.
type V1ContractAmendParamsOverridesTarget string

const (
	V1ContractAmendParamsOverridesTargetCommitRate V1ContractAmendParamsOverridesTarget = "COMMIT_RATE"
	V1ContractAmendParamsOverridesTargetListRate   V1ContractAmendParamsOverridesTarget = "LIST_RATE"
)

func (r V1ContractAmendParamsOverridesTarget) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsOverridesTargetCommitRate, V1ContractAmendParamsOverridesTargetListRate:
		return true
	}
	return false
}

type V1ContractAmendParamsOverridesTier struct {
	Multiplier param.Field[float64] `json:"multiplier,required"`
	Size       param.Field[float64] `json:"size"`
}

func (r V1ContractAmendParamsOverridesTier) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Overwrites are prioritized over multipliers and tiered overrides.
type V1ContractAmendParamsOverridesType string

const (
	V1ContractAmendParamsOverridesTypeOverwrite  V1ContractAmendParamsOverridesType = "OVERWRITE"
	V1ContractAmendParamsOverridesTypeMultiplier V1ContractAmendParamsOverridesType = "MULTIPLIER"
	V1ContractAmendParamsOverridesTypeTiered     V1ContractAmendParamsOverridesType = "TIERED"
)

func (r V1ContractAmendParamsOverridesType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsOverridesTypeOverwrite, V1ContractAmendParamsOverridesTypeMultiplier, V1ContractAmendParamsOverridesTypeTiered:
		return true
	}
	return false
}

type V1ContractAmendParamsProfessionalService struct {
	// Maximum amount for the term.
	MaxAmount param.Field[float64] `json:"max_amount,required"`
	ProductID param.Field[string]  `json:"product_id,required" format:"uuid"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity param.Field[float64] `json:"quantity,required"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified.
	UnitPrice    param.Field[float64]           `json:"unit_price,required"`
	CustomFields param.Field[map[string]string] `json:"custom_fields"`
	Description  param.Field[string]            `json:"description"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
}

func (r V1ContractAmendParamsProfessionalService) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsResellerRoyalty struct {
	ResellerType param.Field[V1ContractAmendParamsResellerRoyaltiesResellerType] `json:"reseller_type,required"`
	// Must provide at least one of applicable_product_ids or applicable_product_tags.
	ApplicableProductIDs param.Field[[]string] `json:"applicable_product_ids" format:"uuid"`
	// Must provide at least one of applicable_product_ids or applicable_product_tags.
	ApplicableProductTags param.Field[[]string]                                         `json:"applicable_product_tags"`
	AwsOptions            param.Field[V1ContractAmendParamsResellerRoyaltiesAwsOptions] `json:"aws_options"`
	// Use null to indicate that the existing end timestamp should be removed.
	EndingBefore          param.Field[time.Time]                                        `json:"ending_before" format:"date-time"`
	Fraction              param.Field[float64]                                          `json:"fraction"`
	GcpOptions            param.Field[V1ContractAmendParamsResellerRoyaltiesGcpOptions] `json:"gcp_options"`
	NetsuiteResellerID    param.Field[string]                                           `json:"netsuite_reseller_id"`
	ResellerContractValue param.Field[float64]                                          `json:"reseller_contract_value"`
	StartingAt            param.Field[time.Time]                                        `json:"starting_at" format:"date-time"`
}

func (r V1ContractAmendParamsResellerRoyalty) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsResellerRoyaltiesResellerType string

const (
	V1ContractAmendParamsResellerRoyaltiesResellerTypeAws           V1ContractAmendParamsResellerRoyaltiesResellerType = "AWS"
	V1ContractAmendParamsResellerRoyaltiesResellerTypeAwsProService V1ContractAmendParamsResellerRoyaltiesResellerType = "AWS_PRO_SERVICE"
	V1ContractAmendParamsResellerRoyaltiesResellerTypeGcp           V1ContractAmendParamsResellerRoyaltiesResellerType = "GCP"
	V1ContractAmendParamsResellerRoyaltiesResellerTypeGcpProService V1ContractAmendParamsResellerRoyaltiesResellerType = "GCP_PRO_SERVICE"
)

func (r V1ContractAmendParamsResellerRoyaltiesResellerType) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsResellerRoyaltiesResellerTypeAws, V1ContractAmendParamsResellerRoyaltiesResellerTypeAwsProService, V1ContractAmendParamsResellerRoyaltiesResellerTypeGcp, V1ContractAmendParamsResellerRoyaltiesResellerTypeGcpProService:
		return true
	}
	return false
}

type V1ContractAmendParamsResellerRoyaltiesAwsOptions struct {
	AwsAccountNumber    param.Field[string] `json:"aws_account_number"`
	AwsOfferID          param.Field[string] `json:"aws_offer_id"`
	AwsPayerReferenceID param.Field[string] `json:"aws_payer_reference_id"`
}

func (r V1ContractAmendParamsResellerRoyaltiesAwsOptions) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsResellerRoyaltiesGcpOptions struct {
	GcpAccountID param.Field[string] `json:"gcp_account_id"`
	GcpOfferID   param.Field[string] `json:"gcp_offer_id"`
}

func (r V1ContractAmendParamsResellerRoyaltiesGcpOptions) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsScheduledCharge struct {
	ProductID param.Field[string] `json:"product_id,required" format:"uuid"`
	// Must provide either schedule_items or recurring_schedule.
	Schedule param.Field[V1ContractAmendParamsScheduledChargesSchedule] `json:"schedule,required"`
	// displayed on invoices
	Name param.Field[string] `json:"name"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID param.Field[string] `json:"netsuite_sales_order_id"`
}

func (r V1ContractAmendParamsScheduledCharge) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Must provide either schedule_items or recurring_schedule.
type V1ContractAmendParamsScheduledChargesSchedule struct {
	// Defaults to USD (cents) if not passed.
	CreditTypeID param.Field[string] `json:"credit_type_id" format:"uuid"`
	// This field is only applicable to commit invoice schedules. If true, this
	// schedule will not generate an invoice.
	DoNotInvoice param.Field[bool] `json:"do_not_invoice"`
	// Enter the unit price and quantity for the charge or instead only send the
	// amount. If amount is sent, the unit price is assumed to be the amount and
	// quantity is inferred to be 1.
	RecurringSchedule param.Field[V1ContractAmendParamsScheduledChargesScheduleRecurringSchedule] `json:"recurring_schedule"`
	// Either provide amount or provide both unit_price and quantity.
	ScheduleItems param.Field[[]V1ContractAmendParamsScheduledChargesScheduleScheduleItem] `json:"schedule_items"`
}

func (r V1ContractAmendParamsScheduledChargesSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Enter the unit price and quantity for the charge or instead only send the
// amount. If amount is sent, the unit price is assumed to be the amount and
// quantity is inferred to be 1.
type V1ContractAmendParamsScheduledChargesScheduleRecurringSchedule struct {
	AmountDistribution param.Field[V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistribution] `json:"amount_distribution,required"`
	// RFC 3339 timestamp (exclusive).
	EndingBefore param.Field[time.Time]                                                               `json:"ending_before,required" format:"date-time"`
	Frequency    param.Field[V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequency] `json:"frequency,required"`
	// RFC 3339 timestamp (inclusive).
	StartingAt param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractAmendParamsScheduledChargesScheduleRecurringSchedule) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistribution string

const (
	V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDivided        V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistribution = "DIVIDED"
	V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDividedRounded V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistribution = "DIVIDED_ROUNDED"
	V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistributionEach           V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistribution = "EACH"
)

func (r V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistribution) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDivided, V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistributionDividedRounded, V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleAmountDistributionEach:
		return true
	}
	return false
}

type V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequency string

const (
	V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencyMonthly    V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequency = "MONTHLY"
	V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencyQuarterly  V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequency = "QUARTERLY"
	V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencySemiAnnual V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequency = "SEMI_ANNUAL"
	V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencyAnnual     V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequency = "ANNUAL"
)

func (r V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequency) IsKnown() bool {
	switch r {
	case V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencyMonthly, V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencyQuarterly, V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencySemiAnnual, V1ContractAmendParamsScheduledChargesScheduleRecurringScheduleFrequencyAnnual:
		return true
	}
	return false
}

type V1ContractAmendParamsScheduledChargesScheduleScheduleItem struct {
	// timestamp of the scheduled event
	Timestamp param.Field[time.Time] `json:"timestamp,required" format:"date-time"`
	// Amount for the charge. Can be provided instead of unit_price and quantity. If
	// amount is sent, the unit_price is assumed to be the amount and quantity is
	// inferred to be 1.
	Amount param.Field[float64] `json:"amount"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount and must be specified with unit_price. If specified amount cannot be
	// provided.
	Quantity param.Field[float64] `json:"quantity"`
	// Unit price for the charge. Will be multiplied by quantity to determine the
	// amount and must be specified with quantity. If specified amount cannot be
	// provided.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractAmendParamsScheduledChargesScheduleScheduleItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractArchiveParams struct {
	// ID of the contract to archive
	ContractID param.Field[string] `json:"contract_id,required" format:"uuid"`
	// ID of the customer whose contract is to be archived
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// If false, the existing finalized invoices will remain after the contract is
	// archived.
	VoidInvoices param.Field[bool] `json:"void_invoices,required"`
}

func (r V1ContractArchiveParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewHistoricalInvoicesParams struct {
	Invoices param.Field[[]V1ContractNewHistoricalInvoicesParamsInvoice] `json:"invoices,required"`
	Preview  param.Field[bool]                                           `json:"preview,required"`
}

func (r V1ContractNewHistoricalInvoicesParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewHistoricalInvoicesParamsInvoice struct {
	ContractID         param.Field[string]                                                       `json:"contract_id,required" format:"uuid"`
	CreditTypeID       param.Field[string]                                                       `json:"credit_type_id,required" format:"uuid"`
	CustomerID         param.Field[string]                                                       `json:"customer_id,required" format:"uuid"`
	ExclusiveEndDate   param.Field[time.Time]                                                    `json:"exclusive_end_date,required" format:"date-time"`
	InclusiveStartDate param.Field[time.Time]                                                    `json:"inclusive_start_date,required" format:"date-time"`
	IssueDate          param.Field[time.Time]                                                    `json:"issue_date,required" format:"date-time"`
	UsageLineItems     param.Field[[]V1ContractNewHistoricalInvoicesParamsInvoicesUsageLineItem] `json:"usage_line_items,required"`
	// This field's availability is dependent on your client's configuration.
	BillableStatus       param.Field[V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatus]       `json:"billable_status"`
	BreakdownGranularity param.Field[V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularity] `json:"breakdown_granularity"`
	CustomFields         param.Field[map[string]string]                                                 `json:"custom_fields"`
}

func (r V1ContractNewHistoricalInvoicesParamsInvoice) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewHistoricalInvoicesParamsInvoicesUsageLineItem struct {
	ExclusiveEndDate        param.Field[time.Time]                                                                          `json:"exclusive_end_date,required" format:"date-time"`
	InclusiveStartDate      param.Field[time.Time]                                                                          `json:"inclusive_start_date,required" format:"date-time"`
	ProductID               param.Field[string]                                                                             `json:"product_id,required" format:"uuid"`
	PresentationGroupValues param.Field[map[string]string]                                                                  `json:"presentation_group_values"`
	PricingGroupValues      param.Field[map[string]string]                                                                  `json:"pricing_group_values"`
	Quantity                param.Field[float64]                                                                            `json:"quantity"`
	SubtotalsWithQuantity   param.Field[[]V1ContractNewHistoricalInvoicesParamsInvoicesUsageLineItemsSubtotalsWithQuantity] `json:"subtotals_with_quantity"`
}

func (r V1ContractNewHistoricalInvoicesParamsInvoicesUsageLineItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractNewHistoricalInvoicesParamsInvoicesUsageLineItemsSubtotalsWithQuantity struct {
	ExclusiveEndDate   param.Field[time.Time] `json:"exclusive_end_date,required" format:"date-time"`
	InclusiveStartDate param.Field[time.Time] `json:"inclusive_start_date,required" format:"date-time"`
	Quantity           param.Field[float64]   `json:"quantity,required"`
}

func (r V1ContractNewHistoricalInvoicesParamsInvoicesUsageLineItemsSubtotalsWithQuantity) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// This field's availability is dependent on your client's configuration.
type V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatus string

const (
	V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatusBillable   V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatus = "billable"
	V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatusUnbillable V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatus = "unbillable"
)

func (r V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatus) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatusBillable, V1ContractNewHistoricalInvoicesParamsInvoicesBillableStatusUnbillable:
		return true
	}
	return false
}

type V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularity string

const (
	V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularityHour V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularity = "HOUR"
	V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularityDay  V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularity = "DAY"
)

func (r V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularity) IsKnown() bool {
	switch r {
	case V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularityHour, V1ContractNewHistoricalInvoicesParamsInvoicesBreakdownGranularityDay:
		return true
	}
	return false
}

type V1ContractListBalancesParams struct {
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	ID         param.Field[string] `json:"id" format:"uuid"`
	// Return only balances that have access schedules that "cover" the provided date
	CoveringDate param.Field[time.Time] `json:"covering_date" format:"date-time"`
	// Include only balances that have any access before the provided date (exclusive)
	EffectiveBefore param.Field[time.Time] `json:"effective_before" format:"date-time"`
	// Include archived credits and credits from archived contracts.
	IncludeArchived param.Field[bool] `json:"include_archived"`
	// Include the balance of credits and commits in the response. Setting this flag
	// may cause the query to be slower.
	IncludeBalance param.Field[bool] `json:"include_balance"`
	// Include balances on the contract level.
	IncludeContractBalances param.Field[bool] `json:"include_contract_balances"`
	// Include ledgers in the response. Setting this flag may cause the query to be
	// slower.
	IncludeLedgers param.Field[bool] `json:"include_ledgers"`
	// The maximum number of commits to return. Defaults to 25.
	Limit param.Field[int64] `json:"limit"`
	// The next page token from a previous response.
	NextPage param.Field[string] `json:"next_page"`
	// Include only balances that have any access on or after the provided date
	StartingAt param.Field[time.Time] `json:"starting_at" format:"date-time"`
}

func (r V1ContractListBalancesParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractGetRateScheduleParams struct {
	// ID of the contract to get the rate schedule for.
	ContractID param.Field[string] `json:"contract_id,required" format:"uuid"`
	// ID of the customer for whose contract to get the rate schedule for.
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// Max number of results that should be returned
	Limit param.Field[int64] `query:"limit"`
	// Cursor that indicates where the next page of results should start.
	NextPage param.Field[string] `query:"next_page"`
	// optional timestamp which overlaps with the returned rate schedule segments. When
	// not specified, the current timestamp will be used.
	At param.Field[time.Time] `json:"at" format:"date-time"`
	// List of rate selectors, rates matching ANY of the selectors will be included in
	// the response. Passing no selectors will result in all rates being returned.
	Selectors param.Field[[]V1ContractGetRateScheduleParamsSelector] `json:"selectors"`
}

func (r V1ContractGetRateScheduleParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// URLQuery serializes [V1ContractGetRateScheduleParams]'s query parameters as
// `url.Values`.
func (r V1ContractGetRateScheduleParams) URLQuery() (v url.Values) {
	return apiquery.MarshalWithSettings(r, apiquery.QuerySettings{
		ArrayFormat:  apiquery.ArrayQueryFormatComma,
		NestedFormat: apiquery.NestedQueryFormatBrackets,
	})
}

type V1ContractGetRateScheduleParamsSelector struct {
	// Subscription rates matching the billing frequency will be included in the
	// response.
	BillingFrequency param.Field[V1ContractGetRateScheduleParamsSelectorsBillingFrequency] `json:"billing_frequency"`
	// List of pricing group key value pairs, rates containing the matching key / value
	// pairs will be included in the response.
	PartialPricingGroupValues param.Field[map[string]string] `json:"partial_pricing_group_values"`
	// List of pricing group key value pairs, rates matching all of the key / value
	// pairs will be included in the response.
	PricingGroupValues param.Field[map[string]string] `json:"pricing_group_values"`
	// Rates matching the product id will be included in the response.
	ProductID param.Field[string] `json:"product_id" format:"uuid"`
	// List of product tags, rates matching any of the tags will be included in the
	// response.
	ProductTags param.Field[[]string] `json:"product_tags"`
}

func (r V1ContractGetRateScheduleParamsSelector) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Subscription rates matching the billing frequency will be included in the
// response.
type V1ContractGetRateScheduleParamsSelectorsBillingFrequency string

const (
	V1ContractGetRateScheduleParamsSelectorsBillingFrequencyMonthly   V1ContractGetRateScheduleParamsSelectorsBillingFrequency = "MONTHLY"
	V1ContractGetRateScheduleParamsSelectorsBillingFrequencyQuarterly V1ContractGetRateScheduleParamsSelectorsBillingFrequency = "QUARTERLY"
	V1ContractGetRateScheduleParamsSelectorsBillingFrequencyAnnual    V1ContractGetRateScheduleParamsSelectorsBillingFrequency = "ANNUAL"
	V1ContractGetRateScheduleParamsSelectorsBillingFrequencyWeekly    V1ContractGetRateScheduleParamsSelectorsBillingFrequency = "WEEKLY"
)

func (r V1ContractGetRateScheduleParamsSelectorsBillingFrequency) IsKnown() bool {
	switch r {
	case V1ContractGetRateScheduleParamsSelectorsBillingFrequencyMonthly, V1ContractGetRateScheduleParamsSelectorsBillingFrequencyQuarterly, V1ContractGetRateScheduleParamsSelectorsBillingFrequencyAnnual, V1ContractGetRateScheduleParamsSelectorsBillingFrequencyWeekly:
		return true
	}
	return false
}

type V1ContractGetSubscriptionQuantityHistoryParams struct {
	ContractID     param.Field[string] `json:"contract_id,required" format:"uuid"`
	CustomerID     param.Field[string] `json:"customer_id,required" format:"uuid"`
	SubscriptionID param.Field[string] `json:"subscription_id,required" format:"uuid"`
}

func (r V1ContractGetSubscriptionQuantityHistoryParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractScheduleProServicesInvoiceParams struct {
	ContractID param.Field[string] `json:"contract_id,required" format:"uuid"`
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// The date the invoice is issued
	IssuedAt param.Field[time.Time] `json:"issued_at,required" format:"date-time"`
	// Each line requires an amount or both unit_price and quantity.
	LineItems param.Field[[]V1ContractScheduleProServicesInvoiceParamsLineItem] `json:"line_items,required"`
	// The end date of the invoice header in Netsuite
	NetsuiteInvoiceHeaderEnd param.Field[time.Time] `json:"netsuite_invoice_header_end" format:"date-time"`
	// The start date of the invoice header in Netsuite
	NetsuiteInvoiceHeaderStart param.Field[time.Time] `json:"netsuite_invoice_header_start" format:"date-time"`
}

func (r V1ContractScheduleProServicesInvoiceParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

// Describes the line item for a professional service charge on an invoice.
type V1ContractScheduleProServicesInvoiceParamsLineItem struct {
	ProfessionalServiceID param.Field[string] `json:"professional_service_id,required" format:"uuid"`
	// If the professional_service_id was added on an amendment, this is required.
	AmendmentID param.Field[string] `json:"amendment_id" format:"uuid"`
	// Amount for the term on the new invoice.
	Amount param.Field[float64] `json:"amount"`
	// For client use.
	Metadata param.Field[string] `json:"metadata"`
	// The end date for the billing period on the invoice.
	NetsuiteInvoiceBillingEnd param.Field[time.Time] `json:"netsuite_invoice_billing_end" format:"date-time"`
	// The start date for the billing period on the invoice.
	NetsuiteInvoiceBillingStart param.Field[time.Time] `json:"netsuite_invoice_billing_start" format:"date-time"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the
	// amount.
	Quantity param.Field[float64] `json:"quantity"`
	// If specified, this overrides the unit price on the pro service term. Must also
	// provide quantity (but not amount) if providing unit_price.
	UnitPrice param.Field[float64] `json:"unit_price"`
}

func (r V1ContractScheduleProServicesInvoiceParamsLineItem) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractSetUsageFilterParams struct {
	ContractID  param.Field[string]    `json:"contract_id,required" format:"uuid"`
	CustomerID  param.Field[string]    `json:"customer_id,required" format:"uuid"`
	GroupKey    param.Field[string]    `json:"group_key,required"`
	GroupValues param.Field[[]string]  `json:"group_values,required"`
	StartingAt  param.Field[time.Time] `json:"starting_at,required" format:"date-time"`
}

func (r V1ContractSetUsageFilterParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}

type V1ContractUpdateEndDateParams struct {
	// ID of the contract to update
	ContractID param.Field[string] `json:"contract_id,required" format:"uuid"`
	// ID of the customer whose contract is to be updated
	CustomerID param.Field[string] `json:"customer_id,required" format:"uuid"`
	// If true, allows setting the contract end date earlier than the end_timestamp of
	// existing finalized invoices. Finalized invoices will be unchanged; if you want
	// to incorporate the new end date, you can void and regenerate finalized usage
	// invoices. Defaults to true.
	AllowEndingBeforeFinalizedInvoice param.Field[bool] `json:"allow_ending_before_finalized_invoice"`
	// RFC 3339 timestamp indicating when the contract will end (exclusive). If not
	// provided, the contract will be updated to be open-ended.
	EndingBefore param.Field[time.Time] `json:"ending_before" format:"date-time"`
}

func (r V1ContractUpdateEndDateParams) MarshalJSON() (data []byte, err error) {
	return apijson.MarshalRoot(r)
}
